
Assignment_3_ADC_TempSensor_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f34  0800a278  0800a278  0001a278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1ac  0800b1ac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1ac  0800b1ac  0001b1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1b4  0800b1b4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1b4  0800b1b4  0001b1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1b8  0800b1b8  0001b1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b1bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001d4  0800b390  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800b390  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017385  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc3  00000000  00000000  000375cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  0003a590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fc  00000000  00000000  0003bb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024833  00000000  00000000  0003cc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001933e  00000000  00000000  000614a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df48c  00000000  00000000  0007a7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f68  00000000  00000000  00159c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00160bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a25c 	.word	0x0800a25c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a25c 	.word	0x0800a25c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <deBounceReadPin>:
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

int8_t deBounceReadPin(int16_t pin, char port, int8_t stableInterval)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	717b      	strb	r3, [r7, #5]
 8000f52:	4613      	mov	r3, r2
 8000f54:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState = GPIO_PIN_RESET;	//remember variables should be initialized
 8000f56:	2300      	movs	r3, #0
 8000f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int8_t pinStateWeAreLookingFor = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int32_t msTimeStamp = HAL_GetTick();		//get a timeStamp in ms
 8000f62:	f001 fa9f 	bl	80024a4 <HAL_GetTick>
 8000f66:	4603      	mov	r3, r0
 8000f68:	623b      	str	r3, [r7, #32]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
		/*Configure GPIO pin : */
		switch(pin)
 8000f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	d85a      	bhi.n	800102c <deBounceReadPin+0xe8>
 8000f76:	a201      	add	r2, pc, #4	; (adr r2, 8000f7c <deBounceReadPin+0x38>)
 8000f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7c:	08000fbd 	.word	0x08000fbd
 8000f80:	08000fc3 	.word	0x08000fc3
 8000f84:	08000fc9 	.word	0x08000fc9
 8000f88:	08000fcf 	.word	0x08000fcf
 8000f8c:	08000fd5 	.word	0x08000fd5
 8000f90:	08000fdb 	.word	0x08000fdb
 8000f94:	08000fe1 	.word	0x08000fe1
 8000f98:	08000fe7 	.word	0x08000fe7
 8000f9c:	08000fed 	.word	0x08000fed
 8000fa0:	08000ff5 	.word	0x08000ff5
 8000fa4:	08000ffd 	.word	0x08000ffd
 8000fa8:	08001005 	.word	0x08001005
 8000fac:	0800100d 	.word	0x0800100d
 8000fb0:	08001015 	.word	0x08001015
 8000fb4:	0800101d 	.word	0x0800101d
 8000fb8:	08001025 	.word	0x08001025
		{
			case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	e038      	b.n	8001034 <deBounceReadPin+0xf0>
			case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	e035      	b.n	8001034 <deBounceReadPin+0xf0>
			case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e032      	b.n	8001034 <deBounceReadPin+0xf0>
			case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	e02f      	b.n	8001034 <deBounceReadPin+0xf0>
			case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e02c      	b.n	8001034 <deBounceReadPin+0xf0>
			case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 8000fda:	2320      	movs	r3, #32
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	e029      	b.n	8001034 <deBounceReadPin+0xf0>
			case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8000fe0:	2340      	movs	r3, #64	; 0x40
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e026      	b.n	8001034 <deBounceReadPin+0xf0>
			case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	e023      	b.n	8001034 <deBounceReadPin+0xf0>
			case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 8000fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e01f      	b.n	8001034 <deBounceReadPin+0xf0>
			case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8000ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	e01b      	b.n	8001034 <deBounceReadPin+0xf0>
			case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 8000ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	e017      	b.n	8001034 <deBounceReadPin+0xf0>
			case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8001004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e013      	b.n	8001034 <deBounceReadPin+0xf0>
			case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 800100c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	e00f      	b.n	8001034 <deBounceReadPin+0xf0>
			case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 8001014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e00b      	b.n	8001034 <deBounceReadPin+0xf0>
			case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 800101c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	e007      	b.n	8001034 <deBounceReadPin+0xf0>
			case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 8001024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	e003      	b.n	8001034 <deBounceReadPin+0xf0>
			default:
				printf( "bad gpio pin number in read pin\n\r");
 800102c:	4847      	ldr	r0, [pc, #284]	; (800114c <deBounceReadPin+0x208>)
 800102e:	f006 ffa3 	bl	8007f78 <iprintf>
				break;
 8001032:	bf00      	nop
		}


	/* let's do our first read of the pin
	 * and to do that we need to incorporate the port we're going to read*/
	pinState = 0 ;
 8001034:	2300      	movs	r3, #0
 8001036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (port)
 800103a:	797b      	ldrb	r3, [r7, #5]
 800103c:	2b43      	cmp	r3, #67	; 0x43
 800103e:	d01b      	beq.n	8001078 <deBounceReadPin+0x134>
 8001040:	2b43      	cmp	r3, #67	; 0x43
 8001042:	dc23      	bgt.n	800108c <deBounceReadPin+0x148>
 8001044:	2b41      	cmp	r3, #65	; 0x41
 8001046:	d002      	beq.n	800104e <deBounceReadPin+0x10a>
 8001048:	2b42      	cmp	r3, #66	; 0x42
 800104a:	d00b      	beq.n	8001064 <deBounceReadPin+0x120>
 800104c:	e01e      	b.n	800108c <deBounceReadPin+0x148>
	{
		case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	b29b      	uxth	r3, r3
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001058:	f002 ff3e 	bl	8003ed8 <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001062:	e017      	b.n	8001094 <deBounceReadPin+0x150>
		case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	b29b      	uxth	r3, r3
 8001068:	4619      	mov	r1, r3
 800106a:	4839      	ldr	r0, [pc, #228]	; (8001150 <deBounceReadPin+0x20c>)
 800106c:	f002 ff34 	bl	8003ed8 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001076:	e00d      	b.n	8001094 <deBounceReadPin+0x150>
		case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	b29b      	uxth	r3, r3
 800107c:	4619      	mov	r1, r3
 800107e:	4835      	ldr	r0, [pc, #212]	; (8001154 <deBounceReadPin+0x210>)
 8001080:	f002 ff2a 	bl	8003ed8 <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800108a:	e003      	b.n	8001094 <deBounceReadPin+0x150>
		default:
			printf( "bad gpio port name in read pin\n\r");
 800108c:	4832      	ldr	r0, [pc, #200]	; (8001158 <deBounceReadPin+0x214>)
 800108e:	f006 ff73 	bl	8007f78 <iprintf>
			break;
 8001092:	bf00      	nop
	}
	/* is the GPIO pin high or low 	 */
	if(pinState == GPIO_PIN_RESET )		// if low we're looking for more 0's
 8001094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001098:	2b00      	cmp	r3, #0
 800109a:	d103      	bne.n	80010a4 <deBounceReadPin+0x160>
	{
		pinStateWeAreLookingFor = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80010a2:	e043      	b.n	800112c <deBounceReadPin+0x1e8>
	}
	else
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	/* now, let's read the pin again until x stable ms have elapsed */
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 80010aa:	e03f      	b.n	800112c <deBounceReadPin+0x1e8>
	{

		switch (port)
 80010ac:	797b      	ldrb	r3, [r7, #5]
 80010ae:	2b43      	cmp	r3, #67	; 0x43
 80010b0:	d01b      	beq.n	80010ea <deBounceReadPin+0x1a6>
 80010b2:	2b43      	cmp	r3, #67	; 0x43
 80010b4:	dc23      	bgt.n	80010fe <deBounceReadPin+0x1ba>
 80010b6:	2b41      	cmp	r3, #65	; 0x41
 80010b8:	d002      	beq.n	80010c0 <deBounceReadPin+0x17c>
 80010ba:	2b42      	cmp	r3, #66	; 0x42
 80010bc:	d00b      	beq.n	80010d6 <deBounceReadPin+0x192>
 80010be:	e01e      	b.n	80010fe <deBounceReadPin+0x1ba>
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4619      	mov	r1, r3
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f002 ff05 	bl	8003ed8 <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010d4:	e017      	b.n	8001106 <deBounceReadPin+0x1c2>
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	481c      	ldr	r0, [pc, #112]	; (8001150 <deBounceReadPin+0x20c>)
 80010de:	f002 fefb 	bl	8003ed8 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010e8:	e00d      	b.n	8001106 <deBounceReadPin+0x1c2>
			case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	4619      	mov	r1, r3
 80010f0:	4818      	ldr	r0, [pc, #96]	; (8001154 <deBounceReadPin+0x210>)
 80010f2:	f002 fef1 	bl	8003ed8 <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010fc:	e003      	b.n	8001106 <deBounceReadPin+0x1c2>
			default:
				printf( "bad gpio port letter in read pin\n\r");
 80010fe:	4817      	ldr	r0, [pc, #92]	; (800115c <deBounceReadPin+0x218>)
 8001100:	f006 ff3a 	bl	8007f78 <iprintf>
				break;
 8001104:	bf00      	nop
		}
		if(pinState != pinStateWeAreLookingFor)
 8001106:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800110a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800110e:	429a      	cmp	r2, r3
 8001110:	d00c      	beq.n	800112c <deBounceReadPin+0x1e8>
		{
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
 8001112:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf0c      	ite	eq
 800111a:	2301      	moveq	r3, #1
 800111c:	2300      	movne	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			/* reset the timeStamp as we've had a change in state			 */
			msTimeStamp = HAL_GetTick();
 8001124:	f001 f9be 	bl	80024a4 <HAL_GetTick>
 8001128:	4603      	mov	r3, r0
 800112a:	623b      	str	r3, [r7, #32]
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 800112c:	f001 f9ba 	bl	80024a4 <HAL_GetTick>
 8001130:	4601      	mov	r1, r0
 8001132:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	4413      	add	r3, r2
 800113a:	4299      	cmp	r1, r3
 800113c:	d3b6      	bcc.n	80010ac <deBounceReadPin+0x168>
		}
	}
	return (pinStateWeAreLookingFor);
 800113e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8001142:	4618      	mov	r0, r3
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	0800a2b0 	.word	0x0800a2b0
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800
 8001158:	0800a2d4 	.word	0x0800a2d4
 800115c:	0800a2f8 	.word	0x0800a2f8

08001160 <rgbColor>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Sets RGB color values for LED based on temperature range
void rgbColor(uint8_t red_value, uint8_t green_value, uint8_t blue_value) {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
 800116a:	460b      	mov	r3, r1
 800116c:	71bb      	strb	r3, [r7, #6]
 800116e:	4613      	mov	r3, r2
 8001170:	717b      	strb	r3, [r7, #5]
	htim1.Instance->CCR1 = red_value;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <rgbColor+0x38>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	79fa      	ldrb	r2, [r7, #7]
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = green_value;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <rgbColor+0x38>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	79ba      	ldrb	r2, [r7, #6]
 8001180:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = blue_value;
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <rgbColor+0x38>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	797a      	ldrb	r2, [r7, #5]
 8001188:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200002b8 	.word	0x200002b8
 800119c:	00000000 	.word	0x00000000

080011a0 <tempCalibration>:

// Calibrates raw ADC value to temperature in Celsius
float tempCalibration(float raw) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	ed87 0a01 	vstr	s0, [r7, #4]
	float tempCelcius = ((3.3 / 4095 * raw * 1000) - 500) / 10;
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff f9cc 	bl	8000548 <__aeabi_f2d>
 80011b0:	a31a      	add	r3, pc, #104	; (adr r3, 800121c <tempCalibration+0x7c>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff fa1f 	bl	80005f8 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <tempCalibration+0x70>)
 80011c8:	f7ff fa16 	bl	80005f8 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <tempCalibration+0x74>)
 80011da:	f7ff f855 	bl	8000288 <__aeabi_dsub>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <tempCalibration+0x78>)
 80011ec:	f7ff fb2e 	bl	800084c <__aeabi_ddiv>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fcd6 	bl	8000ba8 <__aeabi_d2f>
 80011fc:	4603      	mov	r3, r0
 80011fe:	60fb      	str	r3, [r7, #12]
	return tempCelcius;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	ee07 3a90 	vmov	s15, r3
}
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	408f4000 	.word	0x408f4000
 8001214:	407f4000 	.word	0x407f4000
 8001218:	40240000 	.word	0x40240000
 800121c:	e734d9b4 	.word	0xe734d9b4
 8001220:	3f4a680c 	.word	0x3f4a680c

08001224 <refresh>:

// Refresh the display and update data
void refresh(struct Temperature *data) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af02      	add	r7, sp, #8
 800122a:	6078      	str	r0, [r7, #4]
	ssd1331_clear_screen(BLACK);
 800122c:	2000      	movs	r0, #0
 800122e:	f000 fd4c 	bl	8001cca <ssd1331_clear_screen>
	ssd1331_display_string(15, 20, "Refreshing", FONT_1206, GREY);
 8001232:	f24c 6318 	movw	r3, #50712	; 0xc618
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	230c      	movs	r3, #12
 800123a:	4a18      	ldr	r2, [pc, #96]	; (800129c <refresh+0x78>)
 800123c:	2114      	movs	r1, #20
 800123e:	200f      	movs	r0, #15
 8001240:	f000 fcfa 	bl	8001c38 <ssd1331_display_string>
	HAL_Delay(100);
 8001244:	2064      	movs	r0, #100	; 0x64
 8001246:	f001 f939 	bl	80024bc <HAL_Delay>
	ssd1331_display_string(40, 30, ".", FONT_1206, GREY);
 800124a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	230c      	movs	r3, #12
 8001252:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <refresh+0x7c>)
 8001254:	211e      	movs	r1, #30
 8001256:	2028      	movs	r0, #40	; 0x28
 8001258:	f000 fcee 	bl	8001c38 <ssd1331_display_string>
	HAL_Delay(200);
 800125c:	20c8      	movs	r0, #200	; 0xc8
 800125e:	f001 f92d 	bl	80024bc <HAL_Delay>
	ssd1331_display_string(45, 30, ".", FONT_1206, GREY);
 8001262:	f24c 6318 	movw	r3, #50712	; 0xc618
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	230c      	movs	r3, #12
 800126a:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <refresh+0x7c>)
 800126c:	211e      	movs	r1, #30
 800126e:	202d      	movs	r0, #45	; 0x2d
 8001270:	f000 fce2 	bl	8001c38 <ssd1331_display_string>
	HAL_Delay(300);
 8001274:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001278:	f001 f920 	bl	80024bc <HAL_Delay>
	ssd1331_display_string(50, 30, ".", FONT_1206, GREY);
 800127c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	230c      	movs	r3, #12
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <refresh+0x7c>)
 8001286:	211e      	movs	r1, #30
 8001288:	2032      	movs	r0, #50	; 0x32
 800128a:	f000 fcd5 	bl	8001c38 <ssd1331_display_string>
	displayContent(data);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f90e 	bl	80014b0 <displayContent>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	0800a31c 	.word	0x0800a31c
 80012a0:	0800a328 	.word	0x0800a328

080012a4 <readTemperature>:

// Read temperature, update LED color, and refresh display
void readTemperature(struct Temperature *data) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	uint8_t buttonState = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	74fb      	strb	r3, [r7, #19]
	uint32_t lastUpdateTime = HAL_GetTick();
 80012b0:	f001 f8f8 	bl	80024a4 <HAL_GetTick>
 80012b4:	6178      	str	r0, [r7, #20]
	uint32_t updateInterval = 60000; 			// 1 minute in milliseconds
 80012b6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80012ba:	60fb      	str	r3, [r7, #12]
	uint32_t immediateUpdateDelay = 1;		 	// 1 milliseconds
 80012bc:	2301      	movs	r3, #1
 80012be:	60bb      	str	r3, [r7, #8]

	// Start ADC calibration
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 80012c0:	217f      	movs	r1, #127	; 0x7f
 80012c2:	4833      	ldr	r0, [pc, #204]	; (8001390 <readTemperature+0xec>)
 80012c4:	f002 fb58 	bl	8003978 <HAL_ADCEx_Calibration_Start>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <readTemperature+0x2e>
		/* Calibration Error */
		Error_Handler();
 80012ce:	f000 fbc7 	bl	8001a60 <Error_Handler>
	}

	while (1) {
		// Start ADC conversion
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80012d2:	482f      	ldr	r0, [pc, #188]	; (8001390 <readTemperature+0xec>)
 80012d4:	f001 fc6e 	bl	8002bb4 <HAL_ADC_Start>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <readTemperature+0x3e>
			/* Start Conversation Error */
			Error_Handler();
 80012de:	f000 fbbf 	bl	8001a60 <Error_Handler>
		}

		if (HAL_ADC_PollForConversion(&hadc1, 1) != HAL_OK) {
 80012e2:	2101      	movs	r1, #1
 80012e4:	482a      	ldr	r0, [pc, #168]	; (8001390 <readTemperature+0xec>)
 80012e6:	f001 fcfb 	bl	8002ce0 <HAL_ADC_PollForConversion>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <readTemperature+0x52>
			/* End Of Conversion flag not set on time */
			Error_Handler();
 80012f0:	f000 fbb6 	bl	8001a60 <Error_Handler>
 80012f4:	e7ed      	b.n	80012d2 <readTemperature+0x2e>
		} else {
			/* ADC conversion completed */
			//Get the converted value of the regular channel
			data->adcPinValue = HAL_ADC_GetValue(&hadc1);
 80012f6:	4826      	ldr	r0, [pc, #152]	; (8001390 <readTemperature+0xec>)
 80012f8:	f001 fd81 	bl	8002dfe <HAL_ADC_GetValue>
 80012fc:	ee07 0a90 	vmov	s15, r0
 8001300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a00 	vstr	s15, [r3]
			data->temp = tempCalibration(data->adcPinValue);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	eeb0 0a67 	vmov.f32	s0, s15
 8001314:	f7ff ff44 	bl	80011a0 <tempCalibration>
 8001318:	eef0 7a40 	vmov.f32	s15, s0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edc3 7a01 	vstr	s15, [r3, #4]
			HAL_ADC_Stop(&hadc1);
 8001322:	481b      	ldr	r0, [pc, #108]	; (8001390 <readTemperature+0xec>)
 8001324:	f001 fca9 	bl	8002c7a <HAL_ADC_Stop>

			// Check the push button status
			buttonState = deBounceReadPin(7, 'B', 1);
 8001328:	2201      	movs	r2, #1
 800132a:	2142      	movs	r1, #66	; 0x42
 800132c:	2007      	movs	r0, #7
 800132e:	f7ff fe09 	bl	8000f44 <deBounceReadPin>
 8001332:	4603      	mov	r3, r0
 8001334:	74fb      	strb	r3, [r7, #19]

			if (buttonState == GPIO_PIN_RESET) {
 8001336:	7cfb      	ldrb	r3, [r7, #19]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d111      	bne.n	8001360 <readTemperature+0xbc>
				// Button is pressed, turn on LD3_PIN
				HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	2108      	movs	r1, #8
 8001340:	4814      	ldr	r0, [pc, #80]	; (8001394 <readTemperature+0xf0>)
 8001342:	f002 fde1 	bl	8003f08 <HAL_GPIO_WritePin>
				refresh(data);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ff6c 	bl	8001224 <refresh>
				RGB_LED(data);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f823 	bl	8001398 <RGB_LED>
				lastUpdateTime = HAL_GetTick() - immediateUpdateDelay; // Set the last update time to force immediate update
 8001352:	f001 f8a7 	bl	80024a4 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e004      	b.n	800136a <readTemperature+0xc6>

			} else {
				// Button is not pressed, turn off LD3_PIN
				HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2108      	movs	r1, #8
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <readTemperature+0xf0>)
 8001366:	f002 fdcf 	bl	8003f08 <HAL_GPIO_WritePin>
			}

			// Check if it's time to update
			if ((HAL_GetTick() - lastUpdateTime) >= updateInterval) {
 800136a:	f001 f89b 	bl	80024a4 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	429a      	cmp	r2, r3
 8001378:	d8ab      	bhi.n	80012d2 <readTemperature+0x2e>
				displayContent(data);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f898 	bl	80014b0 <displayContent>
				RGB_LED(data);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f809 	bl	8001398 <RGB_LED>
				lastUpdateTime = HAL_GetTick(); // Update the last update time
 8001386:	f001 f88d 	bl	80024a4 <HAL_GetTick>
 800138a:	6178      	str	r0, [r7, #20]
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 800138c:	e7a1      	b.n	80012d2 <readTemperature+0x2e>
 800138e:	bf00      	nop
 8001390:	200001f0 	.word	0x200001f0
 8001394:	48000400 	.word	0x48000400

08001398 <RGB_LED>:
		}
	}
}

// Sets LED color based on temperature range
void RGB_LED(struct Temperature *data) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if (data->temp < -15) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80013a6:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 80013aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	d505      	bpl.n	80013c0 <RGB_LED+0x28>
		rgbColor(WHITE);
 80013b4:	22ff      	movs	r2, #255	; 0xff
 80013b6:	21ff      	movs	r1, #255	; 0xff
 80013b8:	20ff      	movs	r0, #255	; 0xff
 80013ba:	f7ff fed1 	bl	8001160 <rgbColor>
	} else if (data->temp > 15.1 && data->temp < 25) {
		rgbColor(ORANGE);
	} else if (data->temp > 25.1) {
		rgbColor(RED);
	}
}
 80013be:	e067      	b.n	8001490 <RGB_LED+0xf8>
	} else if (data->temp > -15 && data->temp < 5) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80013c6:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 80013ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	dd0f      	ble.n	80013f4 <RGB_LED+0x5c>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80013da:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80013de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	d505      	bpl.n	80013f4 <RGB_LED+0x5c>
		rgbColor(BLUE);
 80013e8:	22ff      	movs	r2, #255	; 0xff
 80013ea:	2100      	movs	r1, #0
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff feb7 	bl	8001160 <rgbColor>
 80013f2:	e04d      	b.n	8001490 <RGB_LED+0xf8>
	} else if (data->temp > 5.1 && data->temp < 15) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f8a5 	bl	8000548 <__aeabi_f2d>
 80013fe:	a326      	add	r3, pc, #152	; (adr r3, 8001498 <RGB_LED+0x100>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7ff fb88 	bl	8000b18 <__aeabi_dcmpgt>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00f      	beq.n	800142e <RGB_LED+0x96>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	edd3 7a01 	vldr	s15, [r3, #4]
 8001414:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	d505      	bpl.n	800142e <RGB_LED+0x96>
		rgbColor(YELLOW);
 8001422:	2200      	movs	r2, #0
 8001424:	21ff      	movs	r1, #255	; 0xff
 8001426:	20ff      	movs	r0, #255	; 0xff
 8001428:	f7ff fe9a 	bl	8001160 <rgbColor>
 800142c:	e030      	b.n	8001490 <RGB_LED+0xf8>
	} else if (data->temp > 15.1 && data->temp < 25) {
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f888 	bl	8000548 <__aeabi_f2d>
 8001438:	a319      	add	r3, pc, #100	; (adr r3, 80014a0 <RGB_LED+0x108>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7ff fb6b 	bl	8000b18 <__aeabi_dcmpgt>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00f      	beq.n	8001468 <RGB_LED+0xd0>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	edd3 7a01 	vldr	s15, [r3, #4]
 800144e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	d505      	bpl.n	8001468 <RGB_LED+0xd0>
		rgbColor(ORANGE);
 800145c:	2200      	movs	r2, #0
 800145e:	217d      	movs	r1, #125	; 0x7d
 8001460:	20ff      	movs	r0, #255	; 0xff
 8001462:	f7ff fe7d 	bl	8001160 <rgbColor>
 8001466:	e013      	b.n	8001490 <RGB_LED+0xf8>
	} else if (data->temp > 25.1) {
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f86b 	bl	8000548 <__aeabi_f2d>
 8001472:	a30d      	add	r3, pc, #52	; (adr r3, 80014a8 <RGB_LED+0x110>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff fb4e 	bl	8000b18 <__aeabi_dcmpgt>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d100      	bne.n	8001484 <RGB_LED+0xec>
}
 8001482:	e005      	b.n	8001490 <RGB_LED+0xf8>
		rgbColor(RED);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	20ff      	movs	r0, #255	; 0xff
 800148a:	f7ff fe69 	bl	8001160 <rgbColor>
}
 800148e:	e7ff      	b.n	8001490 <RGB_LED+0xf8>
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	66666666 	.word	0x66666666
 800149c:	40146666 	.word	0x40146666
 80014a0:	33333333 	.word	0x33333333
 80014a4:	402e3333 	.word	0x402e3333
 80014a8:	9999999a 	.word	0x9999999a
 80014ac:	40391999 	.word	0x40391999

080014b0 <displayContent>:

// Displays content on the OLED screen
void displayContent(struct Temperature *data) {
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	6078      	str	r0, [r7, #4]
	ssd1331_clear_screen(BLACK);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 fc06 	bl	8001cca <ssd1331_clear_screen>
	ssd1331_display_string(19, 25, "Press BTN", FONT_1206, GREY);
 80014be:	f24c 6318 	movw	r3, #50712	; 0xc618
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	230c      	movs	r3, #12
 80014c6:	4a1a      	ldr	r2, [pc, #104]	; (8001530 <displayContent+0x80>)
 80014c8:	2119      	movs	r1, #25
 80014ca:	2013      	movs	r0, #19
 80014cc:	f000 fbb4 	bl	8001c38 <ssd1331_display_string>
	ssd1331_display_string(37, 35, "to", FONT_1206, GREY);
 80014d0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	230c      	movs	r3, #12
 80014d8:	4a16      	ldr	r2, [pc, #88]	; (8001534 <displayContent+0x84>)
 80014da:	2123      	movs	r1, #35	; 0x23
 80014dc:	2025      	movs	r0, #37	; 0x25
 80014de:	f000 fbab 	bl	8001c38 <ssd1331_display_string>
	ssd1331_display_string(24, 45, "Refresh", FONT_1206, GREY);
 80014e2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	230c      	movs	r3, #12
 80014ea:	4a13      	ldr	r2, [pc, #76]	; (8001538 <displayContent+0x88>)
 80014ec:	212d      	movs	r1, #45	; 0x2d
 80014ee:	2018      	movs	r0, #24
 80014f0:	f000 fba2 	bl	8001c38 <ssd1331_display_string>
	sprintf(data->msg, "Temp:%.1fC", data->temp);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f103 0408 	add.w	r4, r3, #8
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f822 	bl	8000548 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	490c      	ldr	r1, [pc, #48]	; (800153c <displayContent+0x8c>)
 800150a:	4620      	mov	r0, r4
 800150c:	f006 fd46 	bl	8007f9c <siprintf>
	ssd1331_display_string(36, 0, data->msg, FONT_1206, GOLDEN);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f103 0208 	add.w	r2, r3, #8
 8001516:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	230c      	movs	r3, #12
 800151e:	2100      	movs	r1, #0
 8001520:	2024      	movs	r0, #36	; 0x24
 8001522:	f000 fb89 	bl	8001c38 <ssd1331_display_string>
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	0800a32c 	.word	0x0800a32c
 8001534:	0800a338 	.word	0x0800a338
 8001538:	0800a33c 	.word	0x0800a33c
 800153c:	0800a344 	.word	0x0800a344

08001540 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001546:	f000 ff44 	bl	80023d2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800154a:	f000 f83b 	bl	80015c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800154e:	f000 fa31 	bl	80019b4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001552:	f000 f899 	bl	8001688 <MX_ADC1_Init>
	MX_TIM1_Init();
 8001556:	f000 f939 	bl	80017cc <MX_TIM1_Init>
	MX_SPI1_Init();
 800155a:	f000 f8f9 	bl	8001750 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 800155e:	f000 f9f9 	bl	8001954 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	//Initiates OLED
	ssd1331_init();
 8001562:	f000 fbd7 	bl	8001d14 <ssd1331_init>

	//Printing Error if PWM Generation failed to start
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {
 8001566:	2100      	movs	r1, #0
 8001568:	4812      	ldr	r0, [pc, #72]	; (80015b4 <main+0x74>)
 800156a:	f004 fabd 	bl	8005ae8 <HAL_TIM_PWM_Start>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <main+0x3a>
		printf("Error Channel-1 PWM");
 8001574:	4810      	ldr	r0, [pc, #64]	; (80015b8 <main+0x78>)
 8001576:	f006 fcff 	bl	8007f78 <iprintf>
	}
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) {
 800157a:	2104      	movs	r1, #4
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <main+0x74>)
 800157e:	f004 fab3 	bl	8005ae8 <HAL_TIM_PWM_Start>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <main+0x4e>
		printf("Error Channel-2 PWM");
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <main+0x7c>)
 800158a:	f006 fcf5 	bl	8007f78 <iprintf>
	}
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) {
 800158e:	2108      	movs	r1, #8
 8001590:	4808      	ldr	r0, [pc, #32]	; (80015b4 <main+0x74>)
 8001592:	f004 faa9 	bl	8005ae8 <HAL_TIM_PWM_Start>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <main+0x62>
		printf("Error Channel-3 PWM");
 800159c:	4808      	ldr	r0, [pc, #32]	; (80015c0 <main+0x80>)
 800159e:	f006 fceb 	bl	8007f78 <iprintf>
	}

	struct Temperature myData;  // Declaring an instance of struct Temperature

	displayContent(&myData);	// Passing the address of the instance to the function
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff83 	bl	80014b0 <displayContent>
	readTemperature(&myData); 	// Passing the address of the instance to the function
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fe79 	bl	80012a4 <readTemperature>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80015b2:	e7fe      	b.n	80015b2 <main+0x72>
 80015b4:	200002b8 	.word	0x200002b8
 80015b8:	0800a350 	.word	0x0800a350
 80015bc:	0800a364 	.word	0x0800a364
 80015c0:	0800a378 	.word	0x0800a378

080015c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b096      	sub	sp, #88	; 0x58
 80015c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	2244      	movs	r2, #68	; 0x44
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f006 fd45 	bl	8008062 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015ea:	f002 fcc3 	bl	8003f74 <HAL_PWREx_ControlVoltageScaling>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80015f4:	f000 fa34 	bl	8001a60 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80015f8:	f002 fc9e 	bl	8003f38 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <SystemClock_Config+0xc0>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001602:	4a20      	ldr	r2, [pc, #128]	; (8001684 <SystemClock_Config+0xc0>)
 8001604:	f023 0318 	bic.w	r3, r3, #24
 8001608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 800160c:	2314      	movs	r3, #20
 800160e:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001610:	2301      	movs	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001614:	2301      	movs	r3, #1
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800161c:	2360      	movs	r3, #96	; 0x60
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001620:	2302      	movs	r3, #2
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001624:	2301      	movs	r3, #1
 8001626:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001628:	2301      	movs	r3, #1
 800162a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 800162c:	2310      	movs	r3, #16
 800162e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001630:	2307      	movs	r3, #7
 8001632:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001634:	2302      	movs	r3, #2
 8001636:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001638:	2302      	movs	r3, #2
 800163a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fced 	bl	8004020 <HAL_RCC_OscConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x8c>
		Error_Handler();
 800164c:	f000 fa08 	bl	8001a60 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001650:	230f      	movs	r3, #15
 8001652:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001654:	2303      	movs	r3, #3
 8001656:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001664:	463b      	mov	r3, r7
 8001666:	2101      	movs	r1, #1
 8001668:	4618      	mov	r0, r3
 800166a:	f003 f8ed 	bl	8004848 <HAL_RCC_ClockConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0xb4>
		Error_Handler();
 8001674:	f000 f9f4 	bl	8001a60 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8001678:	f003 fd00 	bl	800507c <HAL_RCCEx_EnableMSIPLLMode>
}
 800167c:	bf00      	nop
 800167e:	3758      	adds	r7, #88	; 0x58
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000

08001688 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800168e:	463b      	mov	r3, r7
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016a0:	4a29      	ldr	r2, [pc, #164]	; (8001748 <MX_ADC1_Init+0xc0>)
 80016a2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016bc:	4b21      	ldr	r3, [pc, #132]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016be:	2204      	movs	r2, #4
 80016c0:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80016fe:	4811      	ldr	r0, [pc, #68]	; (8001744 <MX_ADC1_Init+0xbc>)
 8001700:	f001 f916 	bl	8002930 <HAL_ADC_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_ADC1_Init+0x86>
		Error_Handler();
 800170a:	f000 f9a9 	bl	8001a60 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_ADC1_Init+0xc4>)
 8001710:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001712:	2306      	movs	r3, #6
 8001714:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800171a:	237f      	movs	r3, #127	; 0x7f
 800171c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800171e:	2304      	movs	r3, #4
 8001720:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001726:	463b      	mov	r3, r7
 8001728:	4619      	mov	r1, r3
 800172a:	4806      	ldr	r0, [pc, #24]	; (8001744 <MX_ADC1_Init+0xbc>)
 800172c:	f001 fb74 	bl	8002e18 <HAL_ADC_ConfigChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_ADC1_Init+0xb2>
		Error_Handler();
 8001736:	f000 f993 	bl	8001a60 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200001f0 	.word	0x200001f0
 8001748:	50040000 	.word	0x50040000
 800174c:	21800100 	.word	0x21800100

08001750 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <MX_SPI1_Init+0x78>)
 8001758:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <MX_SPI1_Init+0x74>)
 800175c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001760:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_SPI1_Init+0x74>)
 800176a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800176e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_SPI1_Init+0x74>)
 800177e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001782:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001786:	2210      	movs	r2, #16
 8001788:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_SPI1_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_SPI1_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_SPI1_Init+0x74>)
 800179e:	2207      	movs	r2, #7
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_SPI1_Init+0x74>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_SPI1_Init+0x74>)
 80017aa:	2208      	movs	r2, #8
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_SPI1_Init+0x74>)
 80017b0:	f003 fd66 	bl	8005280 <HAL_SPI_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_SPI1_Init+0x6e>
		Error_Handler();
 80017ba:	f000 f951 	bl	8001a60 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000254 	.word	0x20000254
 80017c8:	40013000 	.word	0x40013000

080017cc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b09a      	sub	sp, #104	; 0x68
 80017d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80017d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]
 80017fe:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	222c      	movs	r2, #44	; 0x2c
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f006 fc2b 	bl	8008062 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800180c:	4b4f      	ldr	r3, [pc, #316]	; (800194c <MX_TIM1_Init+0x180>)
 800180e:	4a50      	ldr	r2, [pc, #320]	; (8001950 <MX_TIM1_Init+0x184>)
 8001810:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 84;
 8001812:	4b4e      	ldr	r3, [pc, #312]	; (800194c <MX_TIM1_Init+0x180>)
 8001814:	2254      	movs	r2, #84	; 0x54
 8001816:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b4c      	ldr	r3, [pc, #304]	; (800194c <MX_TIM1_Init+0x180>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 255;
 800181e:	4b4b      	ldr	r3, [pc, #300]	; (800194c <MX_TIM1_Init+0x180>)
 8001820:	22ff      	movs	r2, #255	; 0xff
 8001822:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001824:	4b49      	ldr	r3, [pc, #292]	; (800194c <MX_TIM1_Init+0x180>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800182a:	4b48      	ldr	r3, [pc, #288]	; (800194c <MX_TIM1_Init+0x180>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001830:	4b46      	ldr	r3, [pc, #280]	; (800194c <MX_TIM1_Init+0x180>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001836:	4845      	ldr	r0, [pc, #276]	; (800194c <MX_TIM1_Init+0x180>)
 8001838:	f004 f89e 	bl	8005978 <HAL_TIM_Base_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001842:	f000 f90d 	bl	8001a60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184a:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800184c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001850:	4619      	mov	r1, r3
 8001852:	483e      	ldr	r0, [pc, #248]	; (800194c <MX_TIM1_Init+0x180>)
 8001854:	f004 fb3a 	bl	8005ecc <HAL_TIM_ConfigClockSource>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM1_Init+0x96>
		Error_Handler();
 800185e:	f000 f8ff 	bl	8001a60 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001862:	483a      	ldr	r0, [pc, #232]	; (800194c <MX_TIM1_Init+0x180>)
 8001864:	f004 f8df 	bl	8005a26 <HAL_TIM_PWM_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM1_Init+0xa6>
		Error_Handler();
 800186e:	f000 f8f7 	bl	8001a60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800187e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001882:	4619      	mov	r1, r3
 8001884:	4831      	ldr	r0, [pc, #196]	; (800194c <MX_TIM1_Init+0x180>)
 8001886:	f004 ff8d 	bl	80067a4 <HAL_TIMEx_MasterConfigSynchronization>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM1_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8001890:	f000 f8e6 	bl	8001a60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001894:	2360      	movs	r3, #96	; 0x60
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189c:	2300      	movs	r3, #0
 800189e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80018b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4824      	ldr	r0, [pc, #144]	; (800194c <MX_TIM1_Init+0x180>)
 80018ba:	f004 f9f3 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 80018c4:	f000 f8cc 	bl	8001a60 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80018c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018cc:	2204      	movs	r2, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	481e      	ldr	r0, [pc, #120]	; (800194c <MX_TIM1_Init+0x180>)
 80018d2:	f004 f9e7 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 80018dc:	f000 f8c0 	bl	8001a60 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 80018e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e4:	2208      	movs	r2, #8
 80018e6:	4619      	mov	r1, r3
 80018e8:	4818      	ldr	r0, [pc, #96]	; (800194c <MX_TIM1_Init+0x180>)
 80018ea:	f004 f9db 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM1_Init+0x12c>
			!= HAL_OK) {
		Error_Handler();
 80018f4:	f000 f8b4 	bl	8001a60 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800190c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001910:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800191a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4619      	mov	r1, r3
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <MX_TIM1_Init+0x180>)
 800192e:	f004 ff9f 	bl	8006870 <HAL_TIMEx_ConfigBreakDeadTime>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM1_Init+0x170>
			!= HAL_OK) {
		Error_Handler();
 8001938:	f000 f892 	bl	8001a60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800193c:	4803      	ldr	r0, [pc, #12]	; (800194c <MX_TIM1_Init+0x180>)
 800193e:	f000 fb7f 	bl	8002040 <HAL_TIM_MspPostInit>

}
 8001942:	bf00      	nop
 8001944:	3768      	adds	r7, #104	; 0x68
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200002b8 	.word	0x200002b8
 8001950:	40012c00 	.word	0x40012c00

08001954 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <MX_USART2_UART_Init+0x58>)
 800195a:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <MX_USART2_UART_Init+0x5c>)
 800195c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <MX_USART2_UART_Init+0x58>)
 8001960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001964:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_USART2_UART_Init+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <MX_USART2_UART_Init+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_USART2_UART_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_USART2_UART_Init+0x58>)
 800197a:	220c      	movs	r2, #12
 800197c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <MX_USART2_UART_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_USART2_UART_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <MX_USART2_UART_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_USART2_UART_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_USART2_UART_Init+0x58>)
 8001998:	f004 ffe2 	bl	8006960 <HAL_UART_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80019a2:	f000 f85d 	bl	8001a60 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000304 	.word	0x20000304
 80019b0:	40004400 	.word	0x40004400

080019b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <MX_GPIO_Init+0xa4>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <MX_GPIO_Init+0xa4>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <MX_GPIO_Init+0xa4>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <MX_GPIO_Init+0xa4>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <MX_GPIO_Init+0xa4>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_GPIO_Init+0xa4>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_GPIO_Init+0xa4>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	4a16      	ldr	r2, [pc, #88]	; (8001a58 <MX_GPIO_Init+0xa4>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_GPIO_Init+0xa4>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001a12:	2200      	movs	r2, #0
 8001a14:	2178      	movs	r1, #120	; 0x78
 8001a16:	4811      	ldr	r0, [pc, #68]	; (8001a5c <MX_GPIO_Init+0xa8>)
 8001a18:	f002 fa76 	bl	8003f08 <HAL_GPIO_WritePin>
			LD3_Pin | SSD1331_CS_Pin | SSD1331_DC_Pin | SSD1331_RES_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | SSD1331_CS_Pin | SSD1331_DC_Pin
 8001a1c:	2378      	movs	r3, #120	; 0x78
 8001a1e:	60fb      	str	r3, [r7, #12]
			| SSD1331_RES_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4619      	mov	r1, r3
 8001a32:	480a      	ldr	r0, [pc, #40]	; (8001a5c <MX_GPIO_Init+0xa8>)
 8001a34:	f002 f8e6 	bl	8003c04 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4804      	ldr	r0, [pc, #16]	; (8001a5c <MX_GPIO_Init+0xa8>)
 8001a4c:	f002 f8da 	bl	8003c04 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000400 	.word	0x48000400

08001a60 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a68:	e7fe      	b.n	8001a68 <Error_Handler+0x8>
	...

08001a6c <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd) 
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	460a      	mov	r2, r1
 8001a76:	71fb      	strb	r3, [r7, #7]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8001a7c:	79bb      	ldrb	r3, [r7, #6]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8001a82:	2201      	movs	r2, #1
 8001a84:	2120      	movs	r1, #32
 8001a86:	4811      	ldr	r0, [pc, #68]	; (8001acc <ssd1331_write_byte+0x60>)
 8001a88:	f002 fa3e 	bl	8003f08 <HAL_GPIO_WritePin>
 8001a8c:	e004      	b.n	8001a98 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2120      	movs	r1, #32
 8001a92:	480e      	ldr	r0, [pc, #56]	; (8001acc <ssd1331_write_byte+0x60>)
 8001a94:	f002 fa38 	bl	8003f08 <HAL_GPIO_WritePin>
	}
	
	__SSD1331_CS_CLR();
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2110      	movs	r1, #16
 8001a9c:	480b      	ldr	r0, [pc, #44]	; (8001acc <ssd1331_write_byte+0x60>)
 8001a9e:	f002 fa33 	bl	8003f08 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8001aa2:	1df9      	adds	r1, r7, #7
 8001aa4:	2364      	movs	r3, #100	; 0x64
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <ssd1331_write_byte+0x64>)
 8001aaa:	f003 fc8c 	bl	80053c6 <HAL_SPI_Transmit>
	
	__SSD1331_CS_SET();
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2110      	movs	r1, #16
 8001ab2:	4806      	ldr	r0, [pc, #24]	; (8001acc <ssd1331_write_byte+0x60>)
 8001ab4:	f002 fa28 	bl	8003f08 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2120      	movs	r1, #32
 8001abc:	4803      	ldr	r0, [pc, #12]	; (8001acc <ssd1331_write_byte+0x60>)
 8001abe:	f002 fa23 	bl	8003f08 <HAL_GPIO_WritePin>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	48000400 	.word	0x48000400
 8001ad0:	20000254 	.word	0x20000254

08001ad4 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor) 
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	71bb      	strb	r3, [r7, #6]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b5f      	cmp	r3, #95	; 0x5f
 8001aea:	d82b      	bhi.n	8001b44 <ssd1331_draw_point+0x70>
 8001aec:	79bb      	ldrb	r3, [r7, #6]
 8001aee:	2b3f      	cmp	r3, #63	; 0x3f
 8001af0:	d828      	bhi.n	8001b44 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8001af2:	2100      	movs	r1, #0
 8001af4:	2015      	movs	r0, #21
 8001af6:	f7ff ffb9 	bl	8001a6c <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ffb4 	bl	8001a6c <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8001b04:	2100      	movs	r1, #0
 8001b06:	205f      	movs	r0, #95	; 0x5f
 8001b08:	f7ff ffb0 	bl	8001a6c <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2075      	movs	r0, #117	; 0x75
 8001b10:	f7ff ffac 	bl	8001a6c <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ffa7 	bl	8001a6c <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8001b1e:	2100      	movs	r1, #0
 8001b20:	203f      	movs	r0, #63	; 0x3f
 8001b22:	f7ff ffa3 	bl	8001a6c <ssd1331_write_byte>
    
    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8001b26:	88bb      	ldrh	r3, [r7, #4]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2101      	movs	r1, #1
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff9b 	bl	8001a6c <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);   
 8001b36:	88bb      	ldrh	r3, [r7, #4]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff95 	bl	8001a6c <ssd1331_write_byte>
 8001b42:	e000      	b.n	8001b46 <ssd1331_draw_point+0x72>
		return;
 8001b44:	bf00      	nop
}
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <ssd1331_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{      	
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4604      	mov	r4, r0
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	71fb      	strb	r3, [r7, #7]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71bb      	strb	r3, [r7, #6]
 8001b62:	460b      	mov	r3, r1
 8001b64:	717b      	strb	r3, [r7, #5]
 8001b66:	4613      	mov	r3, r2
 8001b68:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8001b6a:	79bb      	ldrb	r3, [r7, #6]
 8001b6c:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	2b5f      	cmp	r3, #95	; 0x5f
 8001b76:	d857      	bhi.n	8001c28 <ssd1331_display_char+0xdc>
 8001b78:	79bb      	ldrb	r3, [r7, #6]
 8001b7a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b7c:	d854      	bhi.n	8001c28 <ssd1331_display_char+0xdc>
		return;
	}
					   
    for (i = 0; i < chSize; i ++) {   
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	e04c      	b.n	8001c1e <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8001b84:	793b      	ldrb	r3, [r7, #4]
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	d10d      	bne.n	8001ba6 <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];  
 8001b8a:	797b      	ldrb	r3, [r7, #5]
 8001b8c:	f1a3 0220 	sub.w	r2, r3, #32
 8001b90:	7bf9      	ldrb	r1, [r7, #15]
 8001b92:	4827      	ldr	r0, [pc, #156]	; (8001c30 <ssd1331_display_char+0xe4>)
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4403      	add	r3, r0
 8001b9e:	440b      	add	r3, r1
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	737b      	strb	r3, [r7, #13]
 8001ba4:	e00c      	b.n	8001bc0 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) { 
 8001ba6:	793b      	ldrb	r3, [r7, #4]
 8001ba8:	2b10      	cmp	r3, #16
 8001baa:	d109      	bne.n	8001bc0 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8001bac:	797b      	ldrb	r3, [r7, #5]
 8001bae:	f1a3 0220 	sub.w	r2, r3, #32
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	491f      	ldr	r1, [pc, #124]	; (8001c34 <ssd1331_display_char+0xe8>)
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	440a      	add	r2, r1
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	737b      	strb	r3, [r7, #13]
		}
		
        for (j = 0; j < 8; j ++) {
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73bb      	strb	r3, [r7, #14]
 8001bc4:	e025      	b.n	8001c12 <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8001bc6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	da06      	bge.n	8001bdc <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8001bce:	8c3a      	ldrh	r2, [r7, #32]
 8001bd0:	79b9      	ldrb	r1, [r7, #6]
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff7d 	bl	8001ad4 <ssd1331_draw_point>
 8001bda:	e005      	b.n	8001be8 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8001bdc:	79b9      	ldrb	r1, [r7, #6]
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	2200      	movs	r2, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff76 	bl	8001ad4 <ssd1331_draw_point>
		}		  
			chTemp <<= 1;
 8001be8:	7b7b      	ldrb	r3, [r7, #13]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8001bee:	79bb      	ldrb	r3, [r7, #6]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8001bf4:	79ba      	ldrb	r2, [r7, #6]
 8001bf6:	7b3b      	ldrb	r3, [r7, #12]
 8001bf8:	1ad2      	subs	r2, r2, r3
 8001bfa:	793b      	ldrb	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d105      	bne.n	8001c0c <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8001c00:	7b3b      	ldrb	r3, [r7, #12]
 8001c02:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	3301      	adds	r3, #1
 8001c08:	71fb      	strb	r3, [r7, #7]
				break;
 8001c0a:	e005      	b.n	8001c18 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8001c0c:	7bbb      	ldrb	r3, [r7, #14]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	73bb      	strb	r3, [r7, #14]
 8001c12:	7bbb      	ldrb	r3, [r7, #14]
 8001c14:	2b07      	cmp	r3, #7
 8001c16:	d9d6      	bls.n	8001bc6 <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {   
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	793b      	ldrb	r3, [r7, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d3ae      	bcc.n	8001b84 <ssd1331_display_char+0x38>
 8001c26:	e000      	b.n	8001c2a <ssd1331_display_char+0xde>
		return;
 8001c28:	bf00      	nop
			}
		}  	 
    } 
}
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd90      	pop	{r4, r7, pc}
 8001c30:	0800a38c 	.word	0x0800a38c
 8001c34:	0800a800 	.word	0x0800a800

08001c38 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen 
  *         
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	603a      	str	r2, [r7, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	460b      	mov	r3, r1
 8001c48:	71bb      	strb	r3, [r7, #6]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	2b5f      	cmp	r3, #95	; 0x5f
 8001c52:	d836      	bhi.n	8001cc2 <ssd1331_display_string+0x8a>
 8001c54:	79bb      	ldrb	r3, [r7, #6]
 8001c56:	2b3f      	cmp	r3, #63	; 0x3f
 8001c58:	d833      	bhi.n	8001cc2 <ssd1331_display_string+0x8a>
		return;
	}
	
    while (*pchString != '\0') {       
 8001c5a:	e02d      	b.n	8001cb8 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8001c5c:	79fa      	ldrb	r2, [r7, #7]
 8001c5e:	797b      	ldrb	r3, [r7, #5]
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dd12      	ble.n	8001c92 <ssd1331_display_string+0x5a>
			chXpos = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8001c70:	79ba      	ldrb	r2, [r7, #6]
 8001c72:	797b      	ldrb	r3, [r7, #5]
 8001c74:	4413      	add	r3, r2
 8001c76:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8001c78:	79ba      	ldrb	r2, [r7, #6]
 8001c7a:	797b      	ldrb	r3, [r7, #5]
 8001c7c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dd06      	ble.n	8001c92 <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	71fb      	strb	r3, [r7, #7]
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f000 f81c 	bl	8001cca <ssd1331_clear_screen>
			}
		}
		
        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	797c      	ldrb	r4, [r7, #5]
 8001c98:	79b9      	ldrb	r1, [r7, #6]
 8001c9a:	79f8      	ldrb	r0, [r7, #7]
 8001c9c:	8b3b      	ldrh	r3, [r7, #24]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	4623      	mov	r3, r4
 8001ca2:	f7ff ff53 	bl	8001b4c <ssd1331_display_char>
        chXpos += chSize / 2;
 8001ca6:	797b      	ldrb	r3, [r7, #5]
 8001ca8:	085b      	lsrs	r3, r3, #1
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4413      	add	r3, r2
 8001cb0:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {       
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1cd      	bne.n	8001c5c <ssd1331_display_string+0x24>
 8001cc0:	e000      	b.n	8001cc4 <ssd1331_display_string+0x8c>
		return;
 8001cc2:	bf00      	nop
    } 
}
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd90      	pop	{r4, r7, pc}

08001cca <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)  
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	81fb      	strh	r3, [r7, #14]
 8001cd8:	e013      	b.n	8001d02 <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001cda:	2300      	movs	r3, #0
 8001cdc:	81bb      	strh	r3, [r7, #12]
 8001cde:	e00a      	b.n	8001cf6 <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8001ce0:	89bb      	ldrh	r3, [r7, #12]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	89fa      	ldrh	r2, [r7, #14]
 8001ce6:	b2d1      	uxtb	r1, r2
 8001ce8:	88fa      	ldrh	r2, [r7, #6]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fef2 	bl	8001ad4 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001cf0:	89bb      	ldrh	r3, [r7, #12]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	81bb      	strh	r3, [r7, #12]
 8001cf6:	89bb      	ldrh	r3, [r7, #12]
 8001cf8:	2b5f      	cmp	r3, #95	; 0x5f
 8001cfa:	d9f1      	bls.n	8001ce0 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001cfc:	89fb      	ldrh	r3, [r7, #14]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	81fb      	strh	r3, [r7, #14]
 8001d02:	89fb      	ldrh	r3, [r7, #14]
 8001d04:	2b3f      	cmp	r3, #63	; 0x3f
 8001d06:	d9e8      	bls.n	8001cda <ssd1331_clear_screen+0x10>
		}
	}
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <ssd1331_init>:


void ssd1331_init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2140      	movs	r1, #64	; 0x40
 8001d1c:	4852      	ldr	r0, [pc, #328]	; (8001e68 <ssd1331_init+0x154>)
 8001d1e:	f002 f8f3 	bl	8003f08 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8001d22:	2201      	movs	r2, #1
 8001d24:	2110      	movs	r1, #16
 8001d26:	4850      	ldr	r0, [pc, #320]	; (8001e68 <ssd1331_init+0x154>)
 8001d28:	f002 f8ee 	bl	8003f08 <HAL_GPIO_WritePin>
	
  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	20ae      	movs	r0, #174	; 0xae
 8001d30:	f7ff fe9c 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8001d34:	2100      	movs	r1, #0
 8001d36:	2081      	movs	r0, #129	; 0x81
 8001d38:	f7ff fe98 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	20ff      	movs	r0, #255	; 0xff
 8001d40:	f7ff fe94 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8001d44:	2100      	movs	r1, #0
 8001d46:	2082      	movs	r0, #130	; 0x82
 8001d48:	f7ff fe90 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	20ff      	movs	r0, #255	; 0xff
 8001d50:	f7ff fe8c 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8001d54:	2100      	movs	r1, #0
 8001d56:	2083      	movs	r0, #131	; 0x83
 8001d58:	f7ff fe88 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	20ff      	movs	r0, #255	; 0xff
 8001d60:	f7ff fe84 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8001d64:	2100      	movs	r1, #0
 8001d66:	2087      	movs	r0, #135	; 0x87
 8001d68:	f7ff fe80 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2006      	movs	r0, #6
 8001d70:	f7ff fe7c 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8001d74:	2100      	movs	r1, #0
 8001d76:	208a      	movs	r0, #138	; 0x8a
 8001d78:	f7ff fe78 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2064      	movs	r0, #100	; 0x64
 8001d80:	f7ff fe74 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8001d84:	2100      	movs	r1, #0
 8001d86:	208b      	movs	r0, #139	; 0x8b
 8001d88:	f7ff fe70 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2078      	movs	r0, #120	; 0x78
 8001d90:	f7ff fe6c 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8001d94:	2100      	movs	r1, #0
 8001d96:	208c      	movs	r0, #140	; 0x8c
 8001d98:	f7ff fe68 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2064      	movs	r0, #100	; 0x64
 8001da0:	f7ff fe64 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8001da4:	2100      	movs	r1, #0
 8001da6:	20a0      	movs	r0, #160	; 0xa0
 8001da8:	f7ff fe60 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72              
 8001dac:	2100      	movs	r1, #0
 8001dae:	2072      	movs	r0, #114	; 0x72
 8001db0:	f7ff fe5c 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8001db4:	2100      	movs	r1, #0
 8001db6:	20a1      	movs	r0, #161	; 0xa1
 8001db8:	f7ff fe58 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff fe54 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	20a2      	movs	r0, #162	; 0xa2
 8001dc8:	f7ff fe50 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff fe4c 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	20a4      	movs	r0, #164	; 0xa4
 8001dd8:	f7ff fe48 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8001ddc:	2100      	movs	r1, #0
 8001dde:	20a8      	movs	r0, #168	; 0xa8
 8001de0:	f7ff fe44 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 8001de4:	2100      	movs	r1, #0
 8001de6:	203f      	movs	r0, #63	; 0x3f
 8001de8:	f7ff fe40 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8001dec:	2100      	movs	r1, #0
 8001dee:	20ad      	movs	r0, #173	; 0xad
 8001df0:	f7ff fe3c 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 8001df4:	2100      	movs	r1, #0
 8001df6:	208e      	movs	r0, #142	; 0x8e
 8001df8:	f7ff fe38 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	20b0      	movs	r0, #176	; 0xb0
 8001e00:	f7ff fe34 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8001e04:	2100      	movs	r1, #0
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff fe30 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	20b1      	movs	r0, #177	; 0xb1
 8001e10:	f7ff fe2c 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8001e14:	2100      	movs	r1, #0
 8001e16:	2031      	movs	r0, #49	; 0x31
 8001e18:	f7ff fe28 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	20b3      	movs	r0, #179	; 0xb3
 8001e20:	f7ff fe24 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8001e24:	2100      	movs	r1, #0
 8001e26:	20f0      	movs	r0, #240	; 0xf0
 8001e28:	f7ff fe20 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	20bb      	movs	r0, #187	; 0xbb
 8001e30:	f7ff fe1c 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8001e34:	2100      	movs	r1, #0
 8001e36:	203a      	movs	r0, #58	; 0x3a
 8001e38:	f7ff fe18 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	20be      	movs	r0, #190	; 0xbe
 8001e40:	f7ff fe14 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8001e44:	2100      	movs	r1, #0
 8001e46:	203e      	movs	r0, #62	; 0x3e
 8001e48:	f7ff fe10 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	202e      	movs	r0, #46	; 0x2e
 8001e50:	f7ff fe0c 	bl	8001a6c <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8001e54:	2100      	movs	r1, #0
 8001e56:	20af      	movs	r0, #175	; 0xaf
 8001e58:	f7ff fe08 	bl	8001a6c <ssd1331_write_byte>
  
  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff ff34 	bl	8001cca <ssd1331_clear_screen>
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	48000400 	.word	0x48000400

08001e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <HAL_MspInit+0x44>)
 8001e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e76:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_MspInit+0x44>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_MspInit+0x44>)
 8001e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_MspInit+0x44>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <HAL_MspInit+0x44>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e94:	6593      	str	r3, [r2, #88]	; 0x58
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_MspInit+0x44>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b09e      	sub	sp, #120	; 0x78
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	2254      	movs	r2, #84	; 0x54
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f006 f8c4 	bl	8008062 <memset>
  if(hadc->Instance==ADC1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <HAL_ADC_MspInit+0xc0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d143      	bne.n	8001f6c <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ee4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ee8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001eea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001eee:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001ef8:	2310      	movs	r3, #16
 8001efa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001efc:	2307      	movs	r3, #7
 8001efe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f00:	2302      	movs	r3, #2
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f04:	2302      	movs	r3, #2
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f0e:	f107 0310 	add.w	r3, r7, #16
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 febc 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001f1e:	f7ff fd9f 	bl	8001a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_ADC_MspInit+0xc4>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <HAL_ADC_MspInit+0xc4>)
 8001f28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_ADC_MspInit+0xc4>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <HAL_ADC_MspInit+0xc4>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	4a0e      	ldr	r2, [pc, #56]	; (8001f78 <HAL_ADC_MspInit+0xc4>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <HAL_ADC_MspInit+0xc4>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f52:	2308      	movs	r3, #8
 8001f54:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f56:	230b      	movs	r3, #11
 8001f58:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f62:	4619      	mov	r1, r3
 8001f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f68:	f001 fe4c 	bl	8003c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f6c:	bf00      	nop
 8001f6e:	3778      	adds	r7, #120	; 0x78
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	50040000 	.word	0x50040000
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <HAL_SPI_MspInit+0x7c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d128      	bne.n	8001ff0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_SPI_MspInit+0x80>)
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa2:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <HAL_SPI_MspInit+0x80>)
 8001fa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fa8:	6613      	str	r3, [r2, #96]	; 0x60
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_SPI_MspInit+0x80>)
 8001fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_SPI_MspInit+0x80>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <HAL_SPI_MspInit+0x80>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_SPI_MspInit+0x80>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001fce:	2382      	movs	r3, #130	; 0x82
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fde:	2305      	movs	r3, #5
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fec:	f001 fe0a 	bl	8003c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3728      	adds	r7, #40	; 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40013000 	.word	0x40013000
 8001ffc:	40021000 	.word	0x40021000

08002000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <HAL_TIM_Base_MspInit+0x38>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d10b      	bne.n	800202a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_TIM_Base_MspInit+0x3c>)
 8002014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_TIM_Base_MspInit+0x3c>)
 8002018:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800201c:	6613      	str	r3, [r2, #96]	; 0x60
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <HAL_TIM_Base_MspInit+0x3c>)
 8002020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40012c00 	.word	0x40012c00
 800203c:	40021000 	.word	0x40021000

08002040 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <HAL_TIM_MspPostInit+0x68>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d11d      	bne.n	800209e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_TIM_MspPostInit+0x6c>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <HAL_TIM_MspPostInit+0x6c>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_TIM_MspPostInit+0x6c>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800207a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800207e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800208c:	2301      	movs	r3, #1
 800208e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	4619      	mov	r1, r3
 8002096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209a:	f001 fdb3 	bl	8003c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800209e:	bf00      	nop
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40012c00 	.word	0x40012c00
 80020ac:	40021000 	.word	0x40021000

080020b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b09e      	sub	sp, #120	; 0x78
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	2254      	movs	r2, #84	; 0x54
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f005 ffc6 	bl	8008062 <memset>
  if(huart->Instance==USART2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a28      	ldr	r2, [pc, #160]	; (800217c <HAL_UART_MspInit+0xcc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d148      	bne.n	8002172 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020e0:	2302      	movs	r3, #2
 80020e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 fdcf 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f8:	f7ff fcb2 	bl	8001a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020fc:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_UART_MspInit+0xd0>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	4a1f      	ldr	r2, [pc, #124]	; (8002180 <HAL_UART_MspInit+0xd0>)
 8002102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002106:	6593      	str	r3, [r2, #88]	; 0x58
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_UART_MspInit+0xd0>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_UART_MspInit+0xd0>)
 8002116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002118:	4a19      	ldr	r2, [pc, #100]	; (8002180 <HAL_UART_MspInit+0xd0>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <HAL_UART_MspInit+0xd0>)
 8002122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800212c:	2304      	movs	r3, #4
 800212e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213c:	2307      	movs	r3, #7
 800213e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002144:	4619      	mov	r1, r3
 8002146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214a:	f001 fd5b 	bl	8003c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800214e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002152:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002160:	2303      	movs	r3, #3
 8002162:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216e:	f001 fd49 	bl	8003c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002172:	bf00      	nop
 8002174:	3778      	adds	r7, #120	; 0x78
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40004400 	.word	0x40004400
 8002180:	40021000 	.word	0x40021000

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <NMI_Handler+0x4>

0800218a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <HardFault_Handler+0x4>

08002190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <MemManage_Handler+0x4>

08002196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d0:	f000 f954 	bl	800247c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <_getpid>:



int _getpid(void)

{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  return 1;
 80021dc:	2301      	movs	r3, #1

}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_kill>:



int _kill(int pid, int sig)

{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]

  (void)pid;

  (void)sig;

  errno = EINVAL;
 80021f2:	f005 ff89 	bl	8008108 <__errno>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2216      	movs	r2, #22
 80021fa:	601a      	str	r2, [r3, #0]

  return -1;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295

}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_exit>:



void _exit (int status)

{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  _kill(status, -1);
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ffe7 	bl	80021e8 <_kill>

  while (1) {}    /* Make sure we hang here */
 800221a:	e7fe      	b.n	800221a <_exit+0x12>

0800221c <_read>:


/*This is to read data from the serial port*/

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart2, ptr, 1, HAL_MAX_DELAY);
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
 800222c:	2201      	movs	r2, #1
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	4803      	ldr	r0, [pc, #12]	; (8002240 <_read+0x24>)
 8002232:	f004 fc6d 	bl	8006b10 <HAL_UART_Receive>
	return 1;
 8002236:	2301      	movs	r3, #1
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000304 	.word	0x20000304

08002244 <_write>:


//this is for printing data in serial port
int _write(int32_t file, uint8_t *ptr, int32_t len)

{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef result = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	b29a      	uxth	r2, r3
 8002258:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	4809      	ldr	r0, [pc, #36]	; (8002284 <_write+0x40>)
 8002260:	f004 fbcc 	bl	80069fc <HAL_UART_Transmit>
 8002264:	4603      	mov	r3, r0
 8002266:	75fb      	strb	r3, [r7, #23]

	if((result == HAL_ERROR) || (result == HAL_BUSY))
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d002      	beq.n	8002274 <_write+0x30>
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d101      	bne.n	8002278 <_write+0x34>

	{

		Error_Handler();
 8002274:	f7ff fbf4 	bl	8001a60 <Error_Handler>

	}

	return len;
 8002278:	687b      	ldr	r3, [r7, #4]

}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000304 	.word	0x20000304

08002288 <_close>:



int _close(int file)

{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  (void)file;

  return -1;
 8002290:	f04f 33ff 	mov.w	r3, #4294967295

}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <_fstat>:



int _fstat(int file, struct stat *st)

{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]

  (void)file;

  st->st_mode = S_IFCHR;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b0:	605a      	str	r2, [r3, #4]

  return 0;
 80022b2:	2300      	movs	r3, #0

}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_isatty>:



int _isatty(int file)

{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  (void)file;

  return 1;
 80022c8:	2301      	movs	r3, #1

}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <_lseek>:



int _lseek(int file, int ptr, int dir)

{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]

  (void)ptr;

  (void)dir;

  return 0;
 80022e2:	2300      	movs	r3, #0

}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <_sbrk+0x5c>)
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <_sbrk+0x60>)
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <_sbrk+0x64>)
 800230e:	4a12      	ldr	r2, [pc, #72]	; (8002358 <_sbrk+0x68>)
 8002310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <_sbrk+0x64>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	429a      	cmp	r2, r3
 800231e:	d207      	bcs.n	8002330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002320:	f005 fef2 	bl	8008108 <__errno>
 8002324:	4603      	mov	r3, r0
 8002326:	220c      	movs	r2, #12
 8002328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	e009      	b.n	8002344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <_sbrk+0x64>)
 8002340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002342:	68fb      	ldr	r3, [r7, #12]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20010000 	.word	0x20010000
 8002350:	00000400 	.word	0x00000400
 8002354:	2000038c 	.word	0x2000038c
 8002358:	200004e0 	.word	0x200004e0

0800235c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <SystemInit+0x20>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <SystemInit+0x20>)
 8002368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800236c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002384:	f7ff ffea 	bl	800235c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002388:	480c      	ldr	r0, [pc, #48]	; (80023bc <LoopForever+0x6>)
  ldr r1, =_edata
 800238a:	490d      	ldr	r1, [pc, #52]	; (80023c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <LoopForever+0xe>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002390:	e002      	b.n	8002398 <LoopCopyDataInit>

08002392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002396:	3304      	adds	r3, #4

08002398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800239c:	d3f9      	bcc.n	8002392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023a0:	4c0a      	ldr	r4, [pc, #40]	; (80023cc <LoopForever+0x16>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a4:	e001      	b.n	80023aa <LoopFillZerobss>

080023a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a8:	3204      	adds	r2, #4

080023aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ac:	d3fb      	bcc.n	80023a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ae:	f005 feb1 	bl	8008114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023b2:	f7ff f8c5 	bl	8001540 <main>

080023b6 <LoopForever>:

LoopForever:
    b LoopForever
 80023b6:	e7fe      	b.n	80023b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80023c4:	0800b1bc 	.word	0x0800b1bc
  ldr r2, =_sbss
 80023c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80023cc:	200004e0 	.word	0x200004e0

080023d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023d0:	e7fe      	b.n	80023d0 <ADC1_IRQHandler>

080023d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023dc:	2003      	movs	r0, #3
 80023de:	f001 fbdd 	bl	8003b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023e2:	2000      	movs	r0, #0
 80023e4:	f000 f80e 	bl	8002404 <HAL_InitTick>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	71fb      	strb	r3, [r7, #7]
 80023f2:	e001      	b.n	80023f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023f4:	f7ff fd3a 	bl	8001e6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023f8:	79fb      	ldrb	r3, [r7, #7]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <HAL_InitTick+0x6c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d023      	beq.n	8002460 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_InitTick+0x70>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b14      	ldr	r3, [pc, #80]	; (8002470 <HAL_InitTick+0x6c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4619      	mov	r1, r3
 8002422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002426:	fbb3 f3f1 	udiv	r3, r3, r1
 800242a:	fbb2 f3f3 	udiv	r3, r2, r3
 800242e:	4618      	mov	r0, r3
 8002430:	f001 fbdb 	bl	8003bea <HAL_SYSTICK_Config>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10f      	bne.n	800245a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b0f      	cmp	r3, #15
 800243e:	d809      	bhi.n	8002454 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002440:	2200      	movs	r2, #0
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f001 fbb3 	bl	8003bb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_InitTick+0x74>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e007      	b.n	8002464 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	e004      	b.n	8002464 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e001      	b.n	8002464 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000008 	.word	0x20000008
 8002474:	20000000 	.word	0x20000000
 8002478:	20000004 	.word	0x20000004

0800247c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_IncTick+0x20>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_IncTick+0x24>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_IncTick+0x24>)
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000008 	.word	0x20000008
 80024a0:	20000390 	.word	0x20000390

080024a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000390 	.word	0x20000390

080024bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c4:	f7ff ffee 	bl	80024a4 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d005      	beq.n	80024e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_Delay+0x44>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024e2:	bf00      	nop
 80024e4:	f7ff ffde 	bl	80024a4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d8f7      	bhi.n	80024e4 <HAL_Delay+0x28>
  {
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000008 	.word	0x20000008

08002504 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	609a      	str	r2, [r3, #8]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	609a      	str	r2, [r3, #8]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3360      	adds	r3, #96	; 0x60
 800257e:	461a      	mov	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <LL_ADC_SetOffset+0x44>)
 800258e:	4013      	ands	r3, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	4313      	orrs	r3, r2
 800259c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025a4:	bf00      	nop
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	03fff000 	.word	0x03fff000

080025b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3360      	adds	r3, #96	; 0x60
 80025c2:	461a      	mov	r2, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3360      	adds	r3, #96	; 0x60
 80025f0:	461a      	mov	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	431a      	orrs	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800260a:	bf00      	nop
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3330      	adds	r3, #48	; 0x30
 800264c:	461a      	mov	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	4413      	add	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	211f      	movs	r1, #31
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	401a      	ands	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	0e9b      	lsrs	r3, r3, #26
 8002674:	f003 011f 	and.w	r1, r3, #31
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	431a      	orrs	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3314      	adds	r3, #20
 80026a4:	461a      	mov	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	0e5b      	lsrs	r3, r3, #25
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	4413      	add	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	0d1b      	lsrs	r3, r3, #20
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	2107      	movs	r1, #7
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	401a      	ands	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	0d1b      	lsrs	r3, r3, #20
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	431a      	orrs	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002704:	43db      	mvns	r3, r3
 8002706:	401a      	ands	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f003 0318 	and.w	r3, r3, #24
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002710:	40d9      	lsrs	r1, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	400b      	ands	r3, r1
 8002716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271a:	431a      	orrs	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	0007ffff 	.word	0x0007ffff

08002734 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002744:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6093      	str	r3, [r2, #8]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800276c:	d101      	bne.n	8002772 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002790:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002794:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027bc:	d101      	bne.n	80027c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002808:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800280c:	f043 0202 	orr.w	r2, r3, #2
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <LL_ADC_IsEnabled+0x18>
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <LL_ADC_IsEnabled+0x1a>
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b02      	cmp	r3, #2
 8002858:	d101      	bne.n	800285e <LL_ADC_IsDisableOngoing+0x18>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <LL_ADC_IsDisableOngoing+0x1a>
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800287c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002880:	f043 0204 	orr.w	r2, r3, #4
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028a8:	f043 0210 	orr.w	r2, r3, #16
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d101      	bne.n	80028d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028f6:	f043 0220 	orr.w	r2, r3, #32
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b08      	cmp	r3, #8
 800291c:	d101      	bne.n	8002922 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e126      	b.n	8002b98 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff faab 	bl	8001eb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fef1 	bl	8002758 <LL_ADC_IsDeepPowerDownEnabled>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d004      	beq.n	8002986 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fed7 	bl	8002734 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff0c 	bl	80027a8 <LL_ADC_IsInternalRegulatorEnabled>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d115      	bne.n	80029c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fef0 	bl	8002780 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029a0:	4b7f      	ldr	r3, [pc, #508]	; (8002ba0 <HAL_ADC_Init+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	4a7f      	ldr	r2, [pc, #508]	; (8002ba4 <HAL_ADC_Init+0x274>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	3301      	adds	r3, #1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029b4:	e002      	b.n	80029bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f9      	bne.n	80029b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff feee 	bl	80027a8 <LL_ADC_IsInternalRegulatorEnabled>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10d      	bne.n	80029ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	f043 0210 	orr.w	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff62 	bl	80028bc <LL_ADC_REG_IsConversionOngoing>
 80029f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f040 80bf 	bne.w	8002b86 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 80bb 	bne.w	8002b86 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a18:	f043 0202 	orr.w	r2, r3, #2
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fefb 	bl	8002820 <LL_ADC_IsEnabled>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a30:	485d      	ldr	r0, [pc, #372]	; (8002ba8 <HAL_ADC_Init+0x278>)
 8002a32:	f7ff fef5 	bl	8002820 <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4619      	mov	r1, r3
 8002a42:	485a      	ldr	r0, [pc, #360]	; (8002bac <HAL_ADC_Init+0x27c>)
 8002a44:	f7ff fd5e 	bl	8002504 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7e5b      	ldrb	r3, [r3, #25]
 8002a4c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a52:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a58:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a5e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a66:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d106      	bne.n	8002a84 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	045b      	lsls	r3, r3, #17
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d009      	beq.n	8002aa0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <HAL_ADC_Init+0x280>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	69b9      	ldr	r1, [r7, #24]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff26 	bl	800290a <LL_ADC_INJ_IsConversionOngoing>
 8002abe:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d13d      	bne.n	8002b42 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d13a      	bne.n	8002b42 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ad0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ad8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ae8:	f023 0302 	bic.w	r3, r3, #2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	69b9      	ldr	r1, [r7, #24]
 8002af2:	430b      	orrs	r3, r1
 8002af4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d118      	bne.n	8002b32 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b0a:	f023 0304 	bic.w	r3, r3, #4
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b1c:	4311      	orrs	r1, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b22:	430a      	orrs	r2, r1
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	611a      	str	r2, [r3, #16]
 8002b30:	e007      	b.n	8002b42 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10c      	bne.n	8002b64 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	f023 010f 	bic.w	r1, r3, #15
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	1e5a      	subs	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
 8002b62:	e007      	b.n	8002b74 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 020f 	bic.w	r2, r2, #15
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	f023 0303 	bic.w	r3, r3, #3
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54
 8002b84:	e007      	b.n	8002b96 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	f043 0210 	orr.w	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b96:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	053e2d63 	.word	0x053e2d63
 8002ba8:	50040000 	.word	0x50040000
 8002bac:	50040300 	.word	0x50040300
 8002bb0:	fff0c007 	.word	0xfff0c007

08002bb4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fe7b 	bl	80028bc <LL_ADC_REG_IsConversionOngoing>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d14f      	bne.n	8002c6c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_Start+0x26>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e04b      	b.n	8002c72 <HAL_ADC_Start+0xbe>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fdb6 	bl	8003754 <ADC_Enable>
 8002be8:	4603      	mov	r3, r0
 8002bea:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d137      	bne.n	8002c62 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c12:	d106      	bne.n	8002c22 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	f023 0206 	bic.w	r2, r3, #6
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c20:	e002      	b.n	8002c28 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	221c      	movs	r2, #28
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fe06 	bl	800286c <LL_ADC_REG_StartConversion>
 8002c60:	e006      	b.n	8002c70 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c6a:	e001      	b.n	8002c70 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_Stop+0x16>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e023      	b.n	8002cd8 <HAL_ADC_Stop+0x5e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002c98:	2103      	movs	r1, #3
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fc9e 	bl	80035dc <ADC_ConversionStop>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d111      	bne.n	8002cce <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fdd8 	bl	8003860 <ADC_Disable>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d102      	bne.n	8002cf8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002cf2:	2308      	movs	r3, #8
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	e010      	b.n	8002d1a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d007      	beq.n	8002d16 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0a:	f043 0220 	orr.w	r2, r3, #32
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e06f      	b.n	8002df6 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002d16:	2304      	movs	r3, #4
 8002d18:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d1a:	f7ff fbc3 	bl	80024a4 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d20:	e021      	b.n	8002d66 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d01d      	beq.n	8002d66 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d2a:	f7ff fbbb 	bl	80024a4 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d302      	bcc.n	8002d40 <HAL_ADC_PollForConversion+0x60>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d112      	bne.n	8002d66 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	f043 0204 	orr.w	r2, r3, #4
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e047      	b.n	8002df6 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0d6      	beq.n	8002d22 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fc46 	bl	8002616 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01c      	beq.n	8002dca <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	7e5b      	ldrb	r3, [r3, #25]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d118      	bne.n	8002dca <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d111      	bne.n	8002dca <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d105      	bne.n	8002dca <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d104      	bne.n	8002de2 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2208      	movs	r2, #8
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e008      	b.n	8002df4 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d103      	bne.n	8002df4 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	220c      	movs	r2, #12
 8002df2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b0b6      	sub	sp, #216	; 0xd8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x22>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e3bb      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x79a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fd38 	bl	80028bc <LL_ADC_REG_IsConversionOngoing>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f040 83a0 	bne.w	8003594 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d824      	bhi.n	8002eae <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	3b02      	subs	r3, #2
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d81b      	bhi.n	8002ea6 <HAL_ADC_ConfigChannel+0x8e>
 8002e6e:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <HAL_ADC_ConfigChannel+0x5c>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e8d 	.word	0x08002e8d
 8002e7c:	08002e95 	.word	0x08002e95
 8002e80:	08002e9d 	.word	0x08002e9d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002e84:	230c      	movs	r3, #12
 8002e86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e8a:	e010      	b.n	8002eae <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002e8c:	2312      	movs	r3, #18
 8002e8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e92:	e00c      	b.n	8002eae <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002e94:	2318      	movs	r3, #24
 8002e96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e9a:	e008      	b.n	8002eae <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ea4:	e003      	b.n	8002eae <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002ea6:	2306      	movs	r3, #6
 8002ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002eac:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002ebc:	f7ff fbbe 	bl	800263c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fcf9 	bl	80028bc <LL_ADC_REG_IsConversionOngoing>
 8002eca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fd19 	bl	800290a <LL_ADC_INJ_IsConversionOngoing>
 8002ed8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 81a4 	bne.w	800322e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f040 819f 	bne.w	800322e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	6819      	ldr	r1, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	461a      	mov	r2, r3
 8002efe:	f7ff fbc9 	bl	8002694 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	08db      	lsrs	r3, r3, #3
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d00a      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6919      	ldr	r1, [r3, #16]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f34:	f7ff fb1a 	bl	800256c <LL_ADC_SetOffset>
 8002f38:	e179      	b.n	800322e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fb37 	bl	80025b4 <LL_ADC_GetOffsetChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x14e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2100      	movs	r1, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fb2c 	bl	80025b4 <LL_ADC_GetOffsetChannel>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	0e9b      	lsrs	r3, r3, #26
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	e01e      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x18c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fb21 	bl	80025b4 <LL_ADC_GetOffsetChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002f94:	2320      	movs	r3, #32
 8002f96:	e004      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002f98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d105      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x1a4>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	e018      	b.n	8002fee <HAL_ADC_ConfigChannel+0x1d6>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002fd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002fe0:	2320      	movs	r3, #32
 8002fe2:	e004      	b.n	8002fee <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002fe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d106      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff faf0 	bl	80025e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2101      	movs	r1, #1
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fad4 	bl	80025b4 <LL_ADC_GetOffsetChannel>
 800300c:	4603      	mov	r3, r0
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <HAL_ADC_ConfigChannel+0x214>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2101      	movs	r1, #1
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fac9 	bl	80025b4 <LL_ADC_GetOffsetChannel>
 8003022:	4603      	mov	r3, r0
 8003024:	0e9b      	lsrs	r3, r3, #26
 8003026:	f003 021f 	and.w	r2, r3, #31
 800302a:	e01e      	b.n	800306a <HAL_ADC_ConfigChannel+0x252>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fabe 	bl	80025b4 <LL_ADC_GetOffsetChannel>
 8003038:	4603      	mov	r3, r0
 800303a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800304a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800304e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800305a:	2320      	movs	r3, #32
 800305c:	e004      	b.n	8003068 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800305e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003072:	2b00      	cmp	r3, #0
 8003074:	d105      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x26a>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	e018      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x29c>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003096:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800309a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800309e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80030a6:	2320      	movs	r3, #32
 80030a8:	e004      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80030aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d106      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	2101      	movs	r1, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fa8d 	bl	80025e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2102      	movs	r1, #2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fa71 	bl	80025b4 <LL_ADC_GetOffsetChannel>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x2da>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2102      	movs	r1, #2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fa66 	bl	80025b4 <LL_ADC_GetOffsetChannel>
 80030e8:	4603      	mov	r3, r0
 80030ea:	0e9b      	lsrs	r3, r3, #26
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	e01e      	b.n	8003130 <HAL_ADC_ConfigChannel+0x318>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2102      	movs	r1, #2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fa5b 	bl	80025b4 <LL_ADC_GetOffsetChannel>
 80030fe:	4603      	mov	r3, r0
 8003100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003114:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003118:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003120:	2320      	movs	r3, #32
 8003122:	e004      	b.n	800312e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x330>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	0e9b      	lsrs	r3, r3, #26
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	e014      	b.n	8003172 <HAL_ADC_ConfigChannel+0x35a>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800315c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003164:	2320      	movs	r3, #32
 8003166:	e004      	b.n	8003172 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003168:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003172:	429a      	cmp	r2, r3
 8003174:	d106      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	2102      	movs	r1, #2
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fa2e 	bl	80025e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2103      	movs	r1, #3
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fa12 	bl	80025b4 <LL_ADC_GetOffsetChannel>
 8003190:	4603      	mov	r3, r0
 8003192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x398>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2103      	movs	r1, #3
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fa07 	bl	80025b4 <LL_ADC_GetOffsetChannel>
 80031a6:	4603      	mov	r3, r0
 80031a8:	0e9b      	lsrs	r3, r3, #26
 80031aa:	f003 021f 	and.w	r2, r3, #31
 80031ae:	e017      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x3c8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2103      	movs	r1, #3
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff f9fc 	bl	80025b4 <LL_ADC_GetOffsetChannel>
 80031bc:	4603      	mov	r3, r0
 80031be:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ca:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80031cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80031d2:	2320      	movs	r3, #32
 80031d4:	e003      	b.n	80031de <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80031d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x3e0>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	0e9b      	lsrs	r3, r3, #26
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	e011      	b.n	800321c <HAL_ADC_ConfigChannel+0x404>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003208:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800320a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	e003      	b.n	800321c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800321c:	429a      	cmp	r2, r3
 800321e:	d106      	bne.n	800322e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2200      	movs	r2, #0
 8003226:	2103      	movs	r1, #3
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff f9d9 	bl	80025e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff faf4 	bl	8002820 <LL_ADC_IsEnabled>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 8140 	bne.w	80034c0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	461a      	mov	r2, r3
 800324e:	f7ff fa4d 	bl	80026ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4a8f      	ldr	r2, [pc, #572]	; (8003494 <HAL_ADC_ConfigChannel+0x67c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	f040 8131 	bne.w	80034c0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10b      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x46e>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0e9b      	lsrs	r3, r3, #26
 8003274:	3301      	adds	r3, #1
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	2b09      	cmp	r3, #9
 800327c:	bf94      	ite	ls
 800327e:	2301      	movls	r3, #1
 8003280:	2300      	movhi	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	e019      	b.n	80032ba <HAL_ADC_ConfigChannel+0x4a2>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003296:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800329e:	2320      	movs	r3, #32
 80032a0:	e003      	b.n	80032aa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80032a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a4:	fab3 f383 	clz	r3, r3
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	3301      	adds	r3, #1
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2b09      	cmp	r3, #9
 80032b2:	bf94      	ite	ls
 80032b4:	2301      	movls	r3, #1
 80032b6:	2300      	movhi	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d079      	beq.n	80033b2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d107      	bne.n	80032da <HAL_ADC_ConfigChannel+0x4c2>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	0e9b      	lsrs	r3, r3, #26
 80032d0:	3301      	adds	r3, #1
 80032d2:	069b      	lsls	r3, r3, #26
 80032d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032d8:	e015      	b.n	8003306 <HAL_ADC_ConfigChannel+0x4ee>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80032e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ea:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80032ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80032f2:	2320      	movs	r3, #32
 80032f4:	e003      	b.n	80032fe <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80032f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f8:	fab3 f383 	clz	r3, r3
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	069b      	lsls	r3, r3, #26
 8003302:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x50e>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	0e9b      	lsrs	r3, r3, #26
 8003318:	3301      	adds	r3, #1
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	2101      	movs	r1, #1
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	e017      	b.n	8003356 <HAL_ADC_ConfigChannel+0x53e>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003336:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800333e:	2320      	movs	r3, #32
 8003340:	e003      	b.n	800334a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003344:	fab3 f383 	clz	r3, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	3301      	adds	r3, #1
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	2101      	movs	r1, #1
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	ea42 0103 	orr.w	r1, r2, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <HAL_ADC_ConfigChannel+0x564>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	0e9b      	lsrs	r3, r3, #26
 800336c:	3301      	adds	r3, #1
 800336e:	f003 021f 	and.w	r2, r3, #31
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	051b      	lsls	r3, r3, #20
 800337a:	e018      	b.n	80033ae <HAL_ADC_ConfigChannel+0x596>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	e003      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	3301      	adds	r3, #1
 80033a2:	f003 021f 	and.w	r2, r3, #31
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ae:	430b      	orrs	r3, r1
 80033b0:	e081      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d107      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x5b6>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	0e9b      	lsrs	r3, r3, #26
 80033c4:	3301      	adds	r3, #1
 80033c6:	069b      	lsls	r3, r3, #26
 80033c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033cc:	e015      	b.n	80033fa <HAL_ADC_ConfigChannel+0x5e2>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80033e6:	2320      	movs	r3, #32
 80033e8:	e003      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	fab3 f383 	clz	r3, r3
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	069b      	lsls	r3, r3, #26
 80033f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_ADC_ConfigChannel+0x602>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	0e9b      	lsrs	r3, r3, #26
 800340c:	3301      	adds	r3, #1
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f303 	lsl.w	r3, r1, r3
 8003418:	e017      	b.n	800344a <HAL_ADC_ConfigChannel+0x632>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	61bb      	str	r3, [r7, #24]
  return result;
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003432:	2320      	movs	r3, #32
 8003434:	e003      	b.n	800343e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	3301      	adds	r3, #1
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	ea42 0103 	orr.w	r1, r2, r3
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x65e>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	0e9b      	lsrs	r3, r3, #26
 8003460:	3301      	adds	r3, #1
 8003462:	f003 021f 	and.w	r2, r3, #31
 8003466:	4613      	mov	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4413      	add	r3, r2
 800346c:	3b1e      	subs	r3, #30
 800346e:	051b      	lsls	r3, r3, #20
 8003470:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003474:	e01e      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x69c>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	60fb      	str	r3, [r7, #12]
  return result;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d104      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800348e:	2320      	movs	r3, #32
 8003490:	e006      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x688>
 8003492:	bf00      	nop
 8003494:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	f003 021f 	and.w	r2, r3, #31
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	3b1e      	subs	r3, #30
 80034ae:	051b      	lsls	r3, r3, #20
 80034b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ba:	4619      	mov	r1, r3
 80034bc:	f7ff f8ea 	bl	8002694 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <HAL_ADC_ConfigChannel+0x7a4>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d06c      	beq.n	80035a6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034cc:	483c      	ldr	r0, [pc, #240]	; (80035c0 <HAL_ADC_ConfigChannel+0x7a8>)
 80034ce:	f7ff f83f 	bl	8002550 <LL_ADC_GetCommonPathInternalCh>
 80034d2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a3a      	ldr	r2, [pc, #232]	; (80035c4 <HAL_ADC_ConfigChannel+0x7ac>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d127      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d121      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a35      	ldr	r2, [pc, #212]	; (80035c8 <HAL_ADC_ConfigChannel+0x7b0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d157      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034fe:	4619      	mov	r1, r3
 8003500:	482f      	ldr	r0, [pc, #188]	; (80035c0 <HAL_ADC_ConfigChannel+0x7a8>)
 8003502:	f7ff f812 	bl	800252a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003506:	4b31      	ldr	r3, [pc, #196]	; (80035cc <HAL_ADC_ConfigChannel+0x7b4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	099b      	lsrs	r3, r3, #6
 800350c:	4a30      	ldr	r2, [pc, #192]	; (80035d0 <HAL_ADC_ConfigChannel+0x7b8>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	099b      	lsrs	r3, r3, #6
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	4613      	mov	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003520:	e002      	b.n	8003528 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	3b01      	subs	r3, #1
 8003526:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f9      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800352e:	e03a      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a27      	ldr	r2, [pc, #156]	; (80035d4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d113      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800353a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800353e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10d      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1f      	ldr	r2, [pc, #124]	; (80035c8 <HAL_ADC_ConfigChannel+0x7b0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d12a      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003550:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003554:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003558:	4619      	mov	r1, r3
 800355a:	4819      	ldr	r0, [pc, #100]	; (80035c0 <HAL_ADC_ConfigChannel+0x7a8>)
 800355c:	f7fe ffe5 	bl	800252a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003560:	e021      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d11c      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800356c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d116      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <HAL_ADC_ConfigChannel+0x7b0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d111      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003582:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800358a:	4619      	mov	r1, r3
 800358c:	480c      	ldr	r0, [pc, #48]	; (80035c0 <HAL_ADC_ConfigChannel+0x7a8>)
 800358e:	f7fe ffcc 	bl	800252a <LL_ADC_SetCommonPathInternalCh>
 8003592:	e008      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	f043 0220 	orr.w	r2, r3, #32
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	37d8      	adds	r7, #216	; 0xd8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	80080000 	.word	0x80080000
 80035c0:	50040300 	.word	0x50040300
 80035c4:	c7520000 	.word	0xc7520000
 80035c8:	50040000 	.word	0x50040000
 80035cc:	20000000 	.word	0x20000000
 80035d0:	053e2d63 	.word	0x053e2d63
 80035d4:	cb840000 	.word	0xcb840000
 80035d8:	80000001 	.word	0x80000001

080035dc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff f962 	bl	80028bc <LL_ADC_REG_IsConversionOngoing>
 80035f8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff f983 	bl	800290a <LL_ADC_INJ_IsConversionOngoing>
 8003604:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d103      	bne.n	8003614 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8098 	beq.w	8003744 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d02a      	beq.n	8003678 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	7e5b      	ldrb	r3, [r3, #25]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d126      	bne.n	8003678 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7e1b      	ldrb	r3, [r3, #24]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d122      	bne.n	8003678 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003632:	2301      	movs	r3, #1
 8003634:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003636:	e014      	b.n	8003662 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4a45      	ldr	r2, [pc, #276]	; (8003750 <ADC_ConversionStop+0x174>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d90d      	bls.n	800365c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	f043 0210 	orr.w	r2, r3, #16
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003650:	f043 0201 	orr.w	r2, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e074      	b.n	8003746 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	3301      	adds	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366c:	2b40      	cmp	r3, #64	; 0x40
 800366e:	d1e3      	bne.n	8003638 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2240      	movs	r2, #64	; 0x40
 8003676:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d014      	beq.n	80036a8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff f91a 	bl	80028bc <LL_ADC_REG_IsConversionOngoing>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00c      	beq.n	80036a8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff f8d7 	bl	8002846 <LL_ADC_IsDisableOngoing>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff f8f6 	bl	8002894 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d014      	beq.n	80036d8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff f929 	bl	800290a <LL_ADC_INJ_IsConversionOngoing>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00c      	beq.n	80036d8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff f8bf 	bl	8002846 <LL_ADC_IsDisableOngoing>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff f905 	bl	80028e2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d005      	beq.n	80036ea <ADC_ConversionStop+0x10e>
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d105      	bne.n	80036f0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80036e4:	230c      	movs	r3, #12
 80036e6:	617b      	str	r3, [r7, #20]
        break;
 80036e8:	e005      	b.n	80036f6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80036ea:	2308      	movs	r3, #8
 80036ec:	617b      	str	r3, [r7, #20]
        break;
 80036ee:	e002      	b.n	80036f6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80036f0:	2304      	movs	r3, #4
 80036f2:	617b      	str	r3, [r7, #20]
        break;
 80036f4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80036f6:	f7fe fed5 	bl	80024a4 <HAL_GetTick>
 80036fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036fc:	e01b      	b.n	8003736 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036fe:	f7fe fed1 	bl	80024a4 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b05      	cmp	r3, #5
 800370a:	d914      	bls.n	8003736 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	f043 0210 	orr.w	r2, r3, #16
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e007      	b.n	8003746 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1dc      	bne.n	80036fe <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	a33fffff 	.word	0xa33fffff

08003754 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800375c:	2300      	movs	r3, #0
 800375e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff f85b 	bl	8002820 <LL_ADC_IsEnabled>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d169      	bne.n	8003844 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	4b36      	ldr	r3, [pc, #216]	; (8003850 <ADC_Enable+0xfc>)
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00d      	beq.n	800379a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003782:	f043 0210 	orr.w	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	f043 0201 	orr.w	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e055      	b.n	8003846 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff f816 	bl	80027d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037a4:	482b      	ldr	r0, [pc, #172]	; (8003854 <ADC_Enable+0x100>)
 80037a6:	f7fe fed3 	bl	8002550 <LL_ADC_GetCommonPathInternalCh>
 80037aa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80037ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037b4:	4b28      	ldr	r3, [pc, #160]	; (8003858 <ADC_Enable+0x104>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	099b      	lsrs	r3, r3, #6
 80037ba:	4a28      	ldr	r2, [pc, #160]	; (800385c <ADC_Enable+0x108>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	4613      	mov	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037ce:	e002      	b.n	80037d6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f9      	bne.n	80037d0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037dc:	f7fe fe62 	bl	80024a4 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037e2:	e028      	b.n	8003836 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff f819 	bl	8002820 <LL_ADC_IsEnabled>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe ffe9 	bl	80027d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037fe:	f7fe fe51 	bl	80024a4 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d914      	bls.n	8003836 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d00d      	beq.n	8003836 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381e:	f043 0210 	orr.w	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382a:	f043 0201 	orr.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e007      	b.n	8003846 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d1cf      	bne.n	80037e4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	8000003f 	.word	0x8000003f
 8003854:	50040300 	.word	0x50040300
 8003858:	20000000 	.word	0x20000000
 800385c:	053e2d63 	.word	0x053e2d63

08003860 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe ffea 	bl	8002846 <LL_ADC_IsDisableOngoing>
 8003872:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe ffd1 	bl	8002820 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d047      	beq.n	8003914 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d144      	bne.n	8003914 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 030d 	and.w	r3, r3, #13
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10c      	bne.n	80038b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe ffab 	bl	80027f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2203      	movs	r2, #3
 80038a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038aa:	f7fe fdfb 	bl	80024a4 <HAL_GetTick>
 80038ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038b0:	e029      	b.n	8003906 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	f043 0210 	orr.w	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e023      	b.n	8003916 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038ce:	f7fe fde9 	bl	80024a4 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d914      	bls.n	8003906 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e007      	b.n	8003916 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1dc      	bne.n	80038ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <LL_ADC_StartCalibration>:
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003930:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800393a:	4313      	orrs	r3, r2
 800393c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	609a      	str	r2, [r3, #8]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_ADC_IsCalibrationOnGoing>:
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003964:	d101      	bne.n	800396a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_ADCEx_Calibration_Start+0x1c>
 8003990:	2302      	movs	r3, #2
 8003992:	e04d      	b.n	8003a30 <HAL_ADCEx_Calibration_Start+0xb8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff ff5f 	bl	8003860 <ADC_Disable>
 80039a2:	4603      	mov	r3, r0
 80039a4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d136      	bne.n	8003a1a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039b4:	f023 0302 	bic.w	r3, r3, #2
 80039b8:	f043 0202 	orr.w	r2, r3, #2
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6839      	ldr	r1, [r7, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ffa9 	bl	800391e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80039cc:	e014      	b.n	80039f8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3301      	adds	r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80039da:	d30d      	bcc.n	80039f8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	f023 0312 	bic.w	r3, r3, #18
 80039e4:	f043 0210 	orr.w	r2, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e01b      	b.n	8003a30 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ffa7 	bl	8003950 <LL_ADC_IsCalibrationOnGoing>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e2      	bne.n	80039ce <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f023 0303 	bic.w	r3, r3, #3
 8003a10:	f043 0201 	orr.w	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
 8003a18:	e005      	b.n	8003a26 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	f043 0210 	orr.w	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <__NVIC_SetPriorityGrouping+0x44>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a54:	4013      	ands	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a6a:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <__NVIC_SetPriorityGrouping+0x44>)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	60d3      	str	r3, [r2, #12]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <__NVIC_GetPriorityGrouping+0x18>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	f003 0307 	and.w	r3, r3, #7
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	6039      	str	r1, [r7, #0]
 8003aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	db0a      	blt.n	8003ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	490c      	ldr	r1, [pc, #48]	; (8003ae8 <__NVIC_SetPriority+0x4c>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	0112      	lsls	r2, r2, #4
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ac4:	e00a      	b.n	8003adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4908      	ldr	r1, [pc, #32]	; (8003aec <__NVIC_SetPriority+0x50>)
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	0112      	lsls	r2, r2, #4
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	440b      	add	r3, r1
 8003ada:	761a      	strb	r2, [r3, #24]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	e000e100 	.word	0xe000e100
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	; 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f1c3 0307 	rsb	r3, r3, #7
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	bf28      	it	cs
 8003b0e:	2304      	movcs	r3, #4
 8003b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d902      	bls.n	8003b20 <NVIC_EncodePriority+0x30>
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3b03      	subs	r3, #3
 8003b1e:	e000      	b.n	8003b22 <NVIC_EncodePriority+0x32>
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b24:	f04f 32ff 	mov.w	r2, #4294967295
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	401a      	ands	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b38:	f04f 31ff 	mov.w	r1, #4294967295
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	43d9      	mvns	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b48:	4313      	orrs	r3, r2
         );
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3724      	adds	r7, #36	; 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b68:	d301      	bcc.n	8003b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e00f      	b.n	8003b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <SysTick_Config+0x40>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b76:	210f      	movs	r1, #15
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	f7ff ff8e 	bl	8003a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <SysTick_Config+0x40>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b86:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <SysTick_Config+0x40>)
 8003b88:	2207      	movs	r2, #7
 8003b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	e000e010 	.word	0xe000e010

08003b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ff47 	bl	8003a38 <__NVIC_SetPriorityGrouping>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	4603      	mov	r3, r0
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bc4:	f7ff ff5c 	bl	8003a80 <__NVIC_GetPriorityGrouping>
 8003bc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	6978      	ldr	r0, [r7, #20]
 8003bd0:	f7ff ff8e 	bl	8003af0 <NVIC_EncodePriority>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff5d 	bl	8003a9c <__NVIC_SetPriority>
}
 8003be2:	bf00      	nop
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff ffb0 	bl	8003b58 <SysTick_Config>
 8003bf8:	4603      	mov	r3, r0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c12:	e148      	b.n	8003ea6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	2101      	movs	r1, #1
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c20:	4013      	ands	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 813a 	beq.w	8003ea0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d005      	beq.n	8003c44 <HAL_GPIO_Init+0x40>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d130      	bne.n	8003ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	2203      	movs	r2, #3
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4013      	ands	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	f003 0201 	and.w	r2, r3, #1
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d017      	beq.n	8003ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d123      	bne.n	8003d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	08da      	lsrs	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3208      	adds	r2, #8
 8003cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	220f      	movs	r2, #15
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	08da      	lsrs	r2, r3, #3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3208      	adds	r2, #8
 8003d30:	6939      	ldr	r1, [r7, #16]
 8003d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	2203      	movs	r2, #3
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43db      	mvns	r3, r3
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 0203 	and.w	r2, r3, #3
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8094 	beq.w	8003ea0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d78:	4b52      	ldr	r3, [pc, #328]	; (8003ec4 <HAL_GPIO_Init+0x2c0>)
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7c:	4a51      	ldr	r2, [pc, #324]	; (8003ec4 <HAL_GPIO_Init+0x2c0>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	6613      	str	r3, [r2, #96]	; 0x60
 8003d84:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <HAL_GPIO_Init+0x2c0>)
 8003d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d90:	4a4d      	ldr	r2, [pc, #308]	; (8003ec8 <HAL_GPIO_Init+0x2c4>)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	3302      	adds	r3, #2
 8003d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	220f      	movs	r2, #15
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4013      	ands	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dba:	d00d      	beq.n	8003dd8 <HAL_GPIO_Init+0x1d4>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a43      	ldr	r2, [pc, #268]	; (8003ecc <HAL_GPIO_Init+0x2c8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d007      	beq.n	8003dd4 <HAL_GPIO_Init+0x1d0>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a42      	ldr	r2, [pc, #264]	; (8003ed0 <HAL_GPIO_Init+0x2cc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d101      	bne.n	8003dd0 <HAL_GPIO_Init+0x1cc>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e004      	b.n	8003dda <HAL_GPIO_Init+0x1d6>
 8003dd0:	2307      	movs	r3, #7
 8003dd2:	e002      	b.n	8003dda <HAL_GPIO_Init+0x1d6>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <HAL_GPIO_Init+0x1d6>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	f002 0203 	and.w	r2, r2, #3
 8003de0:	0092      	lsls	r2, r2, #2
 8003de2:	4093      	lsls	r3, r2
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dea:	4937      	ldr	r1, [pc, #220]	; (8003ec8 <HAL_GPIO_Init+0x2c4>)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	089b      	lsrs	r3, r3, #2
 8003df0:	3302      	adds	r3, #2
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003df8:	4b36      	ldr	r3, [pc, #216]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	43db      	mvns	r3, r3
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4013      	ands	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e1c:	4a2d      	ldr	r2, [pc, #180]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e22:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e46:	4a23      	ldr	r2, [pc, #140]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e4c:	4b21      	ldr	r3, [pc, #132]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e70:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e76:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4013      	ands	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e9a:	4a0e      	ldr	r2, [pc, #56]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f47f aeaf 	bne.w	8003c14 <HAL_GPIO_Init+0x10>
  }
}
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	48000400 	.word	0x48000400
 8003ed0:	48000800 	.word	0x48000800
 8003ed4:	40010400 	.word	0x40010400

08003ed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	887b      	ldrh	r3, [r7, #2]
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
 8003ef4:	e001      	b.n	8003efa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	807b      	strh	r3, [r7, #2]
 8003f14:	4613      	mov	r3, r2
 8003f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f18:	787b      	ldrb	r3, [r7, #1]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f1e:	887a      	ldrh	r2, [r7, #2]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f24:	e002      	b.n	8003f2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40007000 	.word	0x40007000

08003f58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40007000 	.word	0x40007000

08003f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f82:	d130      	bne.n	8003fe6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f84:	4b23      	ldr	r3, [pc, #140]	; (8004014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f90:	d038      	beq.n	8004004 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f92:	4b20      	ldr	r3, [pc, #128]	; (8004014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f9a:	4a1e      	ldr	r2, [pc, #120]	; (8004014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fa0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fa2:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2232      	movs	r2, #50	; 0x32
 8003fa8:	fb02 f303 	mul.w	r3, r2, r3
 8003fac:	4a1b      	ldr	r2, [pc, #108]	; (800401c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	0c9b      	lsrs	r3, r3, #18
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fb8:	e002      	b.n	8003fc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fc0:	4b14      	ldr	r3, [pc, #80]	; (8004014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fcc:	d102      	bne.n	8003fd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f2      	bne.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe0:	d110      	bne.n	8004004 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e00f      	b.n	8004006 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff2:	d007      	beq.n	8004004 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ff4:	4b07      	ldr	r3, [pc, #28]	; (8004014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ffc:	4a05      	ldr	r2, [pc, #20]	; (8004014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004002:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40007000 	.word	0x40007000
 8004018:	20000000 	.word	0x20000000
 800401c:	431bde83 	.word	0x431bde83

08004020 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f000 bc02 	b.w	8004838 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004034:	4b96      	ldr	r3, [pc, #600]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800403e:	4b94      	ldr	r3, [pc, #592]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 80e4 	beq.w	800421e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <HAL_RCC_OscConfig+0x4c>
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b0c      	cmp	r3, #12
 8004060:	f040 808b 	bne.w	800417a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b01      	cmp	r3, #1
 8004068:	f040 8087 	bne.w	800417a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800406c:	4b88      	ldr	r3, [pc, #544]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCC_OscConfig+0x64>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e3d9      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1a      	ldr	r2, [r3, #32]
 8004088:	4b81      	ldr	r3, [pc, #516]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d004      	beq.n	800409e <HAL_RCC_OscConfig+0x7e>
 8004094:	4b7e      	ldr	r3, [pc, #504]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800409c:	e005      	b.n	80040aa <HAL_RCC_OscConfig+0x8a>
 800409e:	4b7c      	ldr	r3, [pc, #496]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80040a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d223      	bcs.n	80040f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fd8c 	bl	8004bd0 <RCC_SetFlashLatencyFromMSIRange>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e3ba      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040c2:	4b73      	ldr	r3, [pc, #460]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a72      	ldr	r2, [pc, #456]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80040c8:	f043 0308 	orr.w	r3, r3, #8
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	4b70      	ldr	r3, [pc, #448]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	496d      	ldr	r1, [pc, #436]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040e0:	4b6b      	ldr	r3, [pc, #428]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	4968      	ldr	r1, [pc, #416]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	604b      	str	r3, [r1, #4]
 80040f4:	e025      	b.n	8004142 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040f6:	4b66      	ldr	r3, [pc, #408]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a65      	ldr	r2, [pc, #404]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80040fc:	f043 0308 	orr.w	r3, r3, #8
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	4b63      	ldr	r3, [pc, #396]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	4960      	ldr	r1, [pc, #384]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004114:	4b5e      	ldr	r3, [pc, #376]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	495b      	ldr	r1, [pc, #364]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fd4c 	bl	8004bd0 <RCC_SetFlashLatencyFromMSIRange>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e37a      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004142:	f000 fc81 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8004146:	4602      	mov	r2, r0
 8004148:	4b51      	ldr	r3, [pc, #324]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	4950      	ldr	r1, [pc, #320]	; (8004294 <HAL_RCC_OscConfig+0x274>)
 8004154:	5ccb      	ldrb	r3, [r1, r3]
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	fa22 f303 	lsr.w	r3, r2, r3
 800415e:	4a4e      	ldr	r2, [pc, #312]	; (8004298 <HAL_RCC_OscConfig+0x278>)
 8004160:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004162:	4b4e      	ldr	r3, [pc, #312]	; (800429c <HAL_RCC_OscConfig+0x27c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe f94c 	bl	8002404 <HAL_InitTick>
 800416c:	4603      	mov	r3, r0
 800416e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d052      	beq.n	800421c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	e35e      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d032      	beq.n	80041e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004182:	4b43      	ldr	r3, [pc, #268]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a42      	ldr	r2, [pc, #264]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800418e:	f7fe f989 	bl	80024a4 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004196:	f7fe f985 	bl	80024a4 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e347      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041a8:	4b39      	ldr	r3, [pc, #228]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041b4:	4b36      	ldr	r3, [pc, #216]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a35      	ldr	r2, [pc, #212]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80041ba:	f043 0308 	orr.w	r3, r3, #8
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b33      	ldr	r3, [pc, #204]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	4930      	ldr	r1, [pc, #192]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041d2:	4b2f      	ldr	r3, [pc, #188]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	492b      	ldr	r1, [pc, #172]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	604b      	str	r3, [r1, #4]
 80041e6:	e01a      	b.n	800421e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041e8:	4b29      	ldr	r3, [pc, #164]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a28      	ldr	r2, [pc, #160]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041f4:	f7fe f956 	bl	80024a4 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041fc:	f7fe f952 	bl	80024a4 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e314      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x1dc>
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800421c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d073      	beq.n	8004312 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d005      	beq.n	800423c <HAL_RCC_OscConfig+0x21c>
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b0c      	cmp	r3, #12
 8004234:	d10e      	bne.n	8004254 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d10b      	bne.n	8004254 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800423c:	4b14      	ldr	r3, [pc, #80]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d063      	beq.n	8004310 <HAL_RCC_OscConfig+0x2f0>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d15f      	bne.n	8004310 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e2f1      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425c:	d106      	bne.n	800426c <HAL_RCC_OscConfig+0x24c>
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a0b      	ldr	r2, [pc, #44]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	e025      	b.n	80042b8 <HAL_RCC_OscConfig+0x298>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004274:	d114      	bne.n	80042a0 <HAL_RCC_OscConfig+0x280>
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a05      	ldr	r2, [pc, #20]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 800427c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	4b03      	ldr	r3, [pc, #12]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a02      	ldr	r2, [pc, #8]	; (8004290 <HAL_RCC_OscConfig+0x270>)
 8004288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e013      	b.n	80042b8 <HAL_RCC_OscConfig+0x298>
 8004290:	40021000 	.word	0x40021000
 8004294:	0800adf0 	.word	0x0800adf0
 8004298:	20000000 	.word	0x20000000
 800429c:	20000004 	.word	0x20000004
 80042a0:	4ba0      	ldr	r3, [pc, #640]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a9f      	ldr	r2, [pc, #636]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b9d      	ldr	r3, [pc, #628]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a9c      	ldr	r2, [pc, #624]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 80042b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d013      	beq.n	80042e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fe f8f0 	bl	80024a4 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fe f8ec 	bl	80024a4 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e2ae      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042da:	4b92      	ldr	r3, [pc, #584]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x2a8>
 80042e6:	e014      	b.n	8004312 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fe f8dc 	bl	80024a4 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fe f8d8 	bl	80024a4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e29a      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004302:	4b88      	ldr	r3, [pc, #544]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x2d0>
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d060      	beq.n	80043e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b04      	cmp	r3, #4
 8004322:	d005      	beq.n	8004330 <HAL_RCC_OscConfig+0x310>
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b0c      	cmp	r3, #12
 8004328:	d119      	bne.n	800435e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d116      	bne.n	800435e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004330:	4b7c      	ldr	r3, [pc, #496]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_OscConfig+0x328>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e277      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004348:	4b76      	ldr	r3, [pc, #472]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	061b      	lsls	r3, r3, #24
 8004356:	4973      	ldr	r1, [pc, #460]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 8004358:	4313      	orrs	r3, r2
 800435a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800435c:	e040      	b.n	80043e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d023      	beq.n	80043ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004366:	4b6f      	ldr	r3, [pc, #444]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a6e      	ldr	r2, [pc, #440]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 800436c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7fe f897 	bl	80024a4 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800437a:	f7fe f893 	bl	80024a4 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e255      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800438c:	4b65      	ldr	r3, [pc, #404]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004398:	4b62      	ldr	r3, [pc, #392]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	061b      	lsls	r3, r3, #24
 80043a6:	495f      	ldr	r1, [pc, #380]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	604b      	str	r3, [r1, #4]
 80043ac:	e018      	b.n	80043e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ae:	4b5d      	ldr	r3, [pc, #372]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a5c      	ldr	r2, [pc, #368]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 80043b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fe f873 	bl	80024a4 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c2:	f7fe f86f 	bl	80024a4 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e231      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043d4:	4b53      	ldr	r3, [pc, #332]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f0      	bne.n	80043c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d03c      	beq.n	8004466 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01c      	beq.n	800442e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043f4:	4b4b      	ldr	r3, [pc, #300]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 80043f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fa:	4a4a      	ldr	r2, [pc, #296]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004404:	f7fe f84e 	bl	80024a4 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440c:	f7fe f84a 	bl	80024a4 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e20c      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800441e:	4b41      	ldr	r3, [pc, #260]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 8004420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ef      	beq.n	800440c <HAL_RCC_OscConfig+0x3ec>
 800442c:	e01b      	b.n	8004466 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442e:	4b3d      	ldr	r3, [pc, #244]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 8004430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004434:	4a3b      	ldr	r2, [pc, #236]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 8004436:	f023 0301 	bic.w	r3, r3, #1
 800443a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443e:	f7fe f831 	bl	80024a4 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004446:	f7fe f82d 	bl	80024a4 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e1ef      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004458:	4b32      	ldr	r3, [pc, #200]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 800445a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1ef      	bne.n	8004446 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80a6 	beq.w	80045c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004474:	2300      	movs	r3, #0
 8004476:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004478:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 800447a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10d      	bne.n	80044a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004484:	4b27      	ldr	r3, [pc, #156]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	4a26      	ldr	r2, [pc, #152]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	6593      	str	r3, [r2, #88]	; 0x58
 8004490:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449c:	2301      	movs	r3, #1
 800449e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a0:	4b21      	ldr	r3, [pc, #132]	; (8004528 <HAL_RCC_OscConfig+0x508>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d118      	bne.n	80044de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ac:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <HAL_RCC_OscConfig+0x508>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <HAL_RCC_OscConfig+0x508>)
 80044b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b8:	f7fd fff4 	bl	80024a4 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c0:	f7fd fff0 	bl	80024a4 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e1b2      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d2:	4b15      	ldr	r3, [pc, #84]	; (8004528 <HAL_RCC_OscConfig+0x508>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d108      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4d8>
 80044e6:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ec:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044f6:	e029      	b.n	800454c <HAL_RCC_OscConfig+0x52c>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b05      	cmp	r3, #5
 80044fe:	d115      	bne.n	800452c <HAL_RCC_OscConfig+0x50c>
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	4a07      	ldr	r2, [pc, #28]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 8004508:	f043 0304 	orr.w	r3, r3, #4
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004510:	4b04      	ldr	r3, [pc, #16]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	4a03      	ldr	r2, [pc, #12]	; (8004524 <HAL_RCC_OscConfig+0x504>)
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004520:	e014      	b.n	800454c <HAL_RCC_OscConfig+0x52c>
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
 8004528:	40007000 	.word	0x40007000
 800452c:	4b9a      	ldr	r3, [pc, #616]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	4a99      	ldr	r2, [pc, #612]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800453c:	4b96      	ldr	r3, [pc, #600]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	4a95      	ldr	r2, [pc, #596]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 8004544:	f023 0304 	bic.w	r3, r3, #4
 8004548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d016      	beq.n	8004582 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fd ffa6 	bl	80024a4 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455a:	e00a      	b.n	8004572 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455c:	f7fd ffa2 	bl	80024a4 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e162      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004572:	4b89      	ldr	r3, [pc, #548]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ed      	beq.n	800455c <HAL_RCC_OscConfig+0x53c>
 8004580:	e015      	b.n	80045ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004582:	f7fd ff8f 	bl	80024a4 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004588:	e00a      	b.n	80045a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fd ff8b 	bl	80024a4 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f241 3288 	movw	r2, #5000	; 0x1388
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e14b      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045a0:	4b7d      	ldr	r3, [pc, #500]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1ed      	bne.n	800458a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ae:	7ffb      	ldrb	r3, [r7, #31]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d105      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b4:	4b78      	ldr	r3, [pc, #480]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b8:	4a77      	ldr	r2, [pc, #476]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 80045ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d03c      	beq.n	8004646 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01c      	beq.n	800460e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045d4:	4b70      	ldr	r3, [pc, #448]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 80045d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045da:	4a6f      	ldr	r2, [pc, #444]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e4:	f7fd ff5e 	bl	80024a4 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ec:	f7fd ff5a 	bl	80024a4 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e11c      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045fe:	4b66      	ldr	r3, [pc, #408]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 8004600:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ef      	beq.n	80045ec <HAL_RCC_OscConfig+0x5cc>
 800460c:	e01b      	b.n	8004646 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800460e:	4b62      	ldr	r3, [pc, #392]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 8004610:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004614:	4a60      	ldr	r2, [pc, #384]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461e:	f7fd ff41 	bl	80024a4 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004626:	f7fd ff3d 	bl	80024a4 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e0ff      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004638:	4b57      	ldr	r3, [pc, #348]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 800463a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1ef      	bne.n	8004626 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 80f3 	beq.w	8004836 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	2b02      	cmp	r3, #2
 8004656:	f040 80c9 	bne.w	80047ec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800465a:	4b4f      	ldr	r3, [pc, #316]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f003 0203 	and.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	429a      	cmp	r2, r3
 800466c:	d12c      	bne.n	80046c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	3b01      	subs	r3, #1
 800467a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d123      	bne.n	80046c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800468c:	429a      	cmp	r2, r3
 800468e:	d11b      	bne.n	80046c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d113      	bne.n	80046c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	3b01      	subs	r3, #1
 80046ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d109      	bne.n	80046c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	3b01      	subs	r3, #1
 80046c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d06b      	beq.n	80047a0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b0c      	cmp	r3, #12
 80046cc:	d062      	beq.n	8004794 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046ce:	4b32      	ldr	r3, [pc, #200]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e0ac      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046de:	4b2e      	ldr	r3, [pc, #184]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2d      	ldr	r2, [pc, #180]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 80046e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046ea:	f7fd fedb 	bl	80024a4 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f2:	f7fd fed7 	bl	80024a4 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e099      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004704:	4b24      	ldr	r3, [pc, #144]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004710:	4b21      	ldr	r3, [pc, #132]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	4b21      	ldr	r3, [pc, #132]	; (800479c <HAL_RCC_OscConfig+0x77c>)
 8004716:	4013      	ands	r3, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004720:	3a01      	subs	r2, #1
 8004722:	0112      	lsls	r2, r2, #4
 8004724:	4311      	orrs	r1, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800472a:	0212      	lsls	r2, r2, #8
 800472c:	4311      	orrs	r1, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004732:	0852      	lsrs	r2, r2, #1
 8004734:	3a01      	subs	r2, #1
 8004736:	0552      	lsls	r2, r2, #21
 8004738:	4311      	orrs	r1, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800473e:	0852      	lsrs	r2, r2, #1
 8004740:	3a01      	subs	r2, #1
 8004742:	0652      	lsls	r2, r2, #25
 8004744:	4311      	orrs	r1, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800474a:	06d2      	lsls	r2, r2, #27
 800474c:	430a      	orrs	r2, r1
 800474e:	4912      	ldr	r1, [pc, #72]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 8004750:	4313      	orrs	r3, r2
 8004752:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004754:	4b10      	ldr	r3, [pc, #64]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a0f      	ldr	r2, [pc, #60]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 800475a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800475e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004760:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 8004766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800476a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800476c:	f7fd fe9a 	bl	80024a4 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004774:	f7fd fe96 	bl	80024a4 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e058      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004786:	4b04      	ldr	r3, [pc, #16]	; (8004798 <HAL_RCC_OscConfig+0x778>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004792:	e050      	b.n	8004836 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e04f      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
 8004798:	40021000 	.word	0x40021000
 800479c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a0:	4b27      	ldr	r3, [pc, #156]	; (8004840 <HAL_RCC_OscConfig+0x820>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d144      	bne.n	8004836 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047ac:	4b24      	ldr	r3, [pc, #144]	; (8004840 <HAL_RCC_OscConfig+0x820>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a23      	ldr	r2, [pc, #140]	; (8004840 <HAL_RCC_OscConfig+0x820>)
 80047b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b8:	4b21      	ldr	r3, [pc, #132]	; (8004840 <HAL_RCC_OscConfig+0x820>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4a20      	ldr	r2, [pc, #128]	; (8004840 <HAL_RCC_OscConfig+0x820>)
 80047be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047c4:	f7fd fe6e 	bl	80024a4 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047cc:	f7fd fe6a 	bl	80024a4 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e02c      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047de:	4b18      	ldr	r3, [pc, #96]	; (8004840 <HAL_RCC_OscConfig+0x820>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x7ac>
 80047ea:	e024      	b.n	8004836 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d01f      	beq.n	8004832 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f2:	4b13      	ldr	r3, [pc, #76]	; (8004840 <HAL_RCC_OscConfig+0x820>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a12      	ldr	r2, [pc, #72]	; (8004840 <HAL_RCC_OscConfig+0x820>)
 80047f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fe:	f7fd fe51 	bl	80024a4 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004806:	f7fd fe4d 	bl	80024a4 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e00f      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <HAL_RCC_OscConfig+0x820>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f0      	bne.n	8004806 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <HAL_RCC_OscConfig+0x820>)
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	4905      	ldr	r1, [pc, #20]	; (8004840 <HAL_RCC_OscConfig+0x820>)
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_RCC_OscConfig+0x824>)
 800482c:	4013      	ands	r3, r2
 800482e:	60cb      	str	r3, [r1, #12]
 8004830:	e001      	b.n	8004836 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000
 8004844:	feeefffc 	.word	0xfeeefffc

08004848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0e7      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800485c:	4b75      	ldr	r3, [pc, #468]	; (8004a34 <HAL_RCC_ClockConfig+0x1ec>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d910      	bls.n	800488c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b72      	ldr	r3, [pc, #456]	; (8004a34 <HAL_RCC_ClockConfig+0x1ec>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 0207 	bic.w	r2, r3, #7
 8004872:	4970      	ldr	r1, [pc, #448]	; (8004a34 <HAL_RCC_ClockConfig+0x1ec>)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b6e      	ldr	r3, [pc, #440]	; (8004a34 <HAL_RCC_ClockConfig+0x1ec>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0cf      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d010      	beq.n	80048ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	4b66      	ldr	r3, [pc, #408]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d908      	bls.n	80048ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a8:	4b63      	ldr	r3, [pc, #396]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4960      	ldr	r1, [pc, #384]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d04c      	beq.n	8004960 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d107      	bne.n	80048de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ce:	4b5a      	ldr	r3, [pc, #360]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d121      	bne.n	800491e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0a6      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d107      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048e6:	4b54      	ldr	r3, [pc, #336]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d115      	bne.n	800491e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e09a      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d107      	bne.n	800490e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048fe:	4b4e      	ldr	r3, [pc, #312]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e08e      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800490e:	4b4a      	ldr	r3, [pc, #296]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e086      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800491e:	4b46      	ldr	r3, [pc, #280]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f023 0203 	bic.w	r2, r3, #3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	4943      	ldr	r1, [pc, #268]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 800492c:	4313      	orrs	r3, r2
 800492e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004930:	f7fd fdb8 	bl	80024a4 <HAL_GetTick>
 8004934:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004936:	e00a      	b.n	800494e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004938:	f7fd fdb4 	bl	80024a4 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f241 3288 	movw	r2, #5000	; 0x1388
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e06e      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494e:	4b3a      	ldr	r3, [pc, #232]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 020c 	and.w	r2, r3, #12
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	429a      	cmp	r2, r3
 800495e:	d1eb      	bne.n	8004938 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d010      	beq.n	800498e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	4b31      	ldr	r3, [pc, #196]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004978:	429a      	cmp	r2, r3
 800497a:	d208      	bcs.n	800498e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800497c:	4b2e      	ldr	r3, [pc, #184]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	492b      	ldr	r1, [pc, #172]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 800498a:	4313      	orrs	r3, r2
 800498c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800498e:	4b29      	ldr	r3, [pc, #164]	; (8004a34 <HAL_RCC_ClockConfig+0x1ec>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d210      	bcs.n	80049be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499c:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <HAL_RCC_ClockConfig+0x1ec>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f023 0207 	bic.w	r2, r3, #7
 80049a4:	4923      	ldr	r1, [pc, #140]	; (8004a34 <HAL_RCC_ClockConfig+0x1ec>)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ac:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <HAL_RCC_ClockConfig+0x1ec>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d001      	beq.n	80049be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e036      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d008      	beq.n	80049dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ca:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	4918      	ldr	r1, [pc, #96]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d009      	beq.n	80049fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049e8:	4b13      	ldr	r3, [pc, #76]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	4910      	ldr	r1, [pc, #64]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049fc:	f000 f824 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <HAL_RCC_ClockConfig+0x1f0>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	091b      	lsrs	r3, r3, #4
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	490b      	ldr	r1, [pc, #44]	; (8004a3c <HAL_RCC_ClockConfig+0x1f4>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	fa22 f303 	lsr.w	r3, r2, r3
 8004a18:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <HAL_RCC_ClockConfig+0x1f8>)
 8004a1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a1c:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <HAL_RCC_ClockConfig+0x1fc>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fd fcef 	bl	8002404 <HAL_InitTick>
 8004a26:	4603      	mov	r3, r0
 8004a28:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a2a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40022000 	.word	0x40022000
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	0800adf0 	.word	0x0800adf0
 8004a40:	20000000 	.word	0x20000000
 8004a44:	20000004 	.word	0x20000004

08004a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b089      	sub	sp, #36	; 0x24
 8004a4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	2300      	movs	r3, #0
 8004a54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a56:	4b3e      	ldr	r3, [pc, #248]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a60:	4b3b      	ldr	r3, [pc, #236]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_GetSysClockFreq+0x34>
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d121      	bne.n	8004aba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d11e      	bne.n	8004aba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a7c:	4b34      	ldr	r3, [pc, #208]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d107      	bne.n	8004a98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a88:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a8e:	0a1b      	lsrs	r3, r3, #8
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	61fb      	str	r3, [r7, #28]
 8004a96:	e005      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a98:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004aa4:	4a2b      	ldr	r2, [pc, #172]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10d      	bne.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ab8:	e00a      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d102      	bne.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ac0:	4b25      	ldr	r3, [pc, #148]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ac2:	61bb      	str	r3, [r7, #24]
 8004ac4:	e004      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004acc:	4b23      	ldr	r3, [pc, #140]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ace:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b0c      	cmp	r3, #12
 8004ad4:	d134      	bne.n	8004b40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ad6:	4b1e      	ldr	r3, [pc, #120]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d003      	beq.n	8004aee <HAL_RCC_GetSysClockFreq+0xa6>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	d003      	beq.n	8004af4 <HAL_RCC_GetSysClockFreq+0xac>
 8004aec:	e005      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004aee:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x110>)
 8004af0:	617b      	str	r3, [r7, #20]
      break;
 8004af2:	e005      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004af4:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x114>)
 8004af6:	617b      	str	r3, [r7, #20]
      break;
 8004af8:	e002      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	617b      	str	r3, [r7, #20]
      break;
 8004afe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b00:	4b13      	ldr	r3, [pc, #76]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	fb03 f202 	mul.w	r2, r3, r2
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b26:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	0e5b      	lsrs	r3, r3, #25
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	3301      	adds	r3, #1
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b40:	69bb      	ldr	r3, [r7, #24]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3724      	adds	r7, #36	; 0x24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000
 8004b54:	0800ae08 	.word	0x0800ae08
 8004b58:	00f42400 	.word	0x00f42400
 8004b5c:	007a1200 	.word	0x007a1200

08004b60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b66:	681b      	ldr	r3, [r3, #0]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20000000 	.word	0x20000000

08004b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b7c:	f7ff fff0 	bl	8004b60 <HAL_RCC_GetHCLKFreq>
 8004b80:	4602      	mov	r2, r0
 8004b82:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	4904      	ldr	r1, [pc, #16]	; (8004ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b8e:	5ccb      	ldrb	r3, [r1, r3]
 8004b90:	f003 031f 	and.w	r3, r3, #31
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	0800ae00 	.word	0x0800ae00

08004ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ba8:	f7ff ffda 	bl	8004b60 <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0adb      	lsrs	r3, r3, #11
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4904      	ldr	r1, [pc, #16]	; (8004bcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	0800ae00 	.word	0x0800ae00

08004bd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bdc:	4b2a      	ldr	r3, [pc, #168]	; (8004c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004be8:	f7ff f9b6 	bl	8003f58 <HAL_PWREx_GetVoltageRange>
 8004bec:	6178      	str	r0, [r7, #20]
 8004bee:	e014      	b.n	8004c1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bf0:	4b25      	ldr	r3, [pc, #148]	; (8004c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf4:	4a24      	ldr	r2, [pc, #144]	; (8004c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8004bfc:	4b22      	ldr	r3, [pc, #136]	; (8004c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c08:	f7ff f9a6 	bl	8003f58 <HAL_PWREx_GetVoltageRange>
 8004c0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c0e:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c12:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c20:	d10b      	bne.n	8004c3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b80      	cmp	r3, #128	; 0x80
 8004c26:	d919      	bls.n	8004c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2ba0      	cmp	r3, #160	; 0xa0
 8004c2c:	d902      	bls.n	8004c34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c2e:	2302      	movs	r3, #2
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	e013      	b.n	8004c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c34:	2301      	movs	r3, #1
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	e010      	b.n	8004c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b80      	cmp	r3, #128	; 0x80
 8004c3e:	d902      	bls.n	8004c46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c40:	2303      	movs	r3, #3
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	e00a      	b.n	8004c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b80      	cmp	r3, #128	; 0x80
 8004c4a:	d102      	bne.n	8004c52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	e004      	b.n	8004c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b70      	cmp	r3, #112	; 0x70
 8004c56:	d101      	bne.n	8004c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c58:	2301      	movs	r3, #1
 8004c5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f023 0207 	bic.w	r2, r3, #7
 8004c64:	4909      	ldr	r1, [pc, #36]	; (8004c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c6c:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d001      	beq.n	8004c7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	40022000 	.word	0x40022000

08004c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c98:	2300      	movs	r3, #0
 8004c9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d031      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cb4:	d01a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004cb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cba:	d814      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d009      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004cc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cc4:	d10f      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004cc6:	4b5d      	ldr	r3, [pc, #372]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	4a5c      	ldr	r2, [pc, #368]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cd2:	e00c      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f9de 	bl	800509c <RCCEx_PLLSAI1_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ce4:	e003      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	74fb      	strb	r3, [r7, #19]
      break;
 8004cea:	e000      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cee:	7cfb      	ldrb	r3, [r7, #19]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cf4:	4b51      	ldr	r3, [pc, #324]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	494e      	ldr	r1, [pc, #312]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d0a:	e001      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0c:	7cfb      	ldrb	r3, [r7, #19]
 8004d0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 809e 	beq.w	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d22:	4b46      	ldr	r3, [pc, #280]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004d32:	2300      	movs	r3, #0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00d      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d38:	4b40      	ldr	r3, [pc, #256]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3c:	4a3f      	ldr	r2, [pc, #252]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d42:	6593      	str	r3, [r2, #88]	; 0x58
 8004d44:	4b3d      	ldr	r3, [pc, #244]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d50:	2301      	movs	r3, #1
 8004d52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d54:	4b3a      	ldr	r3, [pc, #232]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a39      	ldr	r2, [pc, #228]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d60:	f7fd fba0 	bl	80024a4 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d66:	e009      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d68:	f7fd fb9c 	bl	80024a4 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d902      	bls.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	74fb      	strb	r3, [r7, #19]
        break;
 8004d7a:	e005      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d7c:	4b30      	ldr	r3, [pc, #192]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0ef      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d15a      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d8e:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01e      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d019      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004daa:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004db6:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbc:	4a1f      	ldr	r2, [pc, #124]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dcc:	4a1b      	ldr	r2, [pc, #108]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dd6:	4a19      	ldr	r2, [pc, #100]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d016      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fd fb5c 	bl	80024a4 <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dee:	e00b      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df0:	f7fd fb58 	bl	80024a4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d902      	bls.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	74fb      	strb	r3, [r7, #19]
            break;
 8004e06:	e006      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0ec      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004e16:	7cfb      	ldrb	r3, [r7, #19]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10b      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2a:	4904      	ldr	r1, [pc, #16]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e32:	e009      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e34:	7cfb      	ldrb	r3, [r7, #19]
 8004e36:	74bb      	strb	r3, [r7, #18]
 8004e38:	e006      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004e3a:	bf00      	nop
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	7cfb      	ldrb	r3, [r7, #19]
 8004e46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e48:	7c7b      	ldrb	r3, [r7, #17]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d105      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4e:	4b8a      	ldr	r3, [pc, #552]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e52:	4a89      	ldr	r2, [pc, #548]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e66:	4b84      	ldr	r3, [pc, #528]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	f023 0203 	bic.w	r2, r3, #3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	4980      	ldr	r1, [pc, #512]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e88:	4b7b      	ldr	r3, [pc, #492]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8e:	f023 020c 	bic.w	r2, r3, #12
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	4978      	ldr	r1, [pc, #480]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eaa:	4b73      	ldr	r3, [pc, #460]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	496f      	ldr	r1, [pc, #444]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ecc:	4b6a      	ldr	r3, [pc, #424]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eda:	4967      	ldr	r1, [pc, #412]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004eee:	4b62      	ldr	r3, [pc, #392]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	495e      	ldr	r1, [pc, #376]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f10:	4b59      	ldr	r3, [pc, #356]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	4956      	ldr	r1, [pc, #344]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f32:	4b51      	ldr	r3, [pc, #324]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	494d      	ldr	r1, [pc, #308]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d028      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f54:	4b48      	ldr	r3, [pc, #288]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	4945      	ldr	r1, [pc, #276]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f72:	d106      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f74:	4b40      	ldr	r3, [pc, #256]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4a3f      	ldr	r2, [pc, #252]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f7e:	60d3      	str	r3, [r2, #12]
 8004f80:	e011      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f8a:	d10c      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	2101      	movs	r1, #1
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f882 	bl	800509c <RCCEx_PLLSAI1_Config>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f9c:	7cfb      	ldrb	r3, [r7, #19]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004fa2:	7cfb      	ldrb	r3, [r7, #19]
 8004fa4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d028      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fb2:	4b31      	ldr	r3, [pc, #196]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc0:	492d      	ldr	r1, [pc, #180]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fd0:	d106      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fd2:	4b29      	ldr	r3, [pc, #164]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	4a28      	ldr	r2, [pc, #160]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fdc:	60d3      	str	r3, [r2, #12]
 8004fde:	e011      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fe8:	d10c      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3304      	adds	r3, #4
 8004fee:	2101      	movs	r1, #1
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 f853 	bl	800509c <RCCEx_PLLSAI1_Config>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ffa:	7cfb      	ldrb	r3, [r7, #19]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005000:	7cfb      	ldrb	r3, [r7, #19]
 8005002:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01c      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005010:	4b19      	ldr	r3, [pc, #100]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501e:	4916      	ldr	r1, [pc, #88]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800502e:	d10c      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	2102      	movs	r1, #2
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f830 	bl	800509c <RCCEx_PLLSAI1_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005040:	7cfb      	ldrb	r3, [r7, #19]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005046:	7cfb      	ldrb	r3, [r7, #19]
 8005048:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005056:	4b08      	ldr	r3, [pc, #32]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005064:	4904      	ldr	r1, [pc, #16]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800506c:	7cbb      	ldrb	r3, [r7, #18]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40021000 	.word	0x40021000

0800507c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005080:	4b05      	ldr	r3, [pc, #20]	; (8005098 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a04      	ldr	r2, [pc, #16]	; (8005098 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005086:	f043 0304 	orr.w	r3, r3, #4
 800508a:	6013      	str	r3, [r2, #0]
}
 800508c:	bf00      	nop
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40021000 	.word	0x40021000

0800509c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050aa:	4b74      	ldr	r3, [pc, #464]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d018      	beq.n	80050e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050b6:	4b71      	ldr	r3, [pc, #452]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f003 0203 	and.w	r2, r3, #3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d10d      	bne.n	80050e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
       ||
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d009      	beq.n	80050e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80050ce:	4b6b      	ldr	r3, [pc, #428]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	091b      	lsrs	r3, r3, #4
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
       ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d047      	beq.n	8005172 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
 80050e6:	e044      	b.n	8005172 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d018      	beq.n	8005122 <RCCEx_PLLSAI1_Config+0x86>
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d825      	bhi.n	8005140 <RCCEx_PLLSAI1_Config+0xa4>
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d002      	beq.n	80050fe <RCCEx_PLLSAI1_Config+0x62>
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d009      	beq.n	8005110 <RCCEx_PLLSAI1_Config+0x74>
 80050fc:	e020      	b.n	8005140 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050fe:	4b5f      	ldr	r3, [pc, #380]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d11d      	bne.n	8005146 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800510e:	e01a      	b.n	8005146 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005110:	4b5a      	ldr	r3, [pc, #360]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005118:	2b00      	cmp	r3, #0
 800511a:	d116      	bne.n	800514a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005120:	e013      	b.n	800514a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005122:	4b56      	ldr	r3, [pc, #344]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10f      	bne.n	800514e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800512e:	4b53      	ldr	r3, [pc, #332]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800513e:	e006      	b.n	800514e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
      break;
 8005144:	e004      	b.n	8005150 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005146:	bf00      	nop
 8005148:	e002      	b.n	8005150 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800514e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10d      	bne.n	8005172 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005156:	4b49      	ldr	r3, [pc, #292]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6819      	ldr	r1, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	3b01      	subs	r3, #1
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	430b      	orrs	r3, r1
 800516c:	4943      	ldr	r1, [pc, #268]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 800516e:	4313      	orrs	r3, r2
 8005170:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d17c      	bne.n	8005272 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005178:	4b40      	ldr	r3, [pc, #256]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a3f      	ldr	r2, [pc, #252]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 800517e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005184:	f7fd f98e 	bl	80024a4 <HAL_GetTick>
 8005188:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800518a:	e009      	b.n	80051a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800518c:	f7fd f98a 	bl	80024a4 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d902      	bls.n	80051a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	73fb      	strb	r3, [r7, #15]
        break;
 800519e:	e005      	b.n	80051ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051a0:	4b36      	ldr	r3, [pc, #216]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1ef      	bne.n	800518c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d15f      	bne.n	8005272 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d110      	bne.n	80051da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051b8:	4b30      	ldr	r3, [pc, #192]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80051c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6892      	ldr	r2, [r2, #8]
 80051c8:	0211      	lsls	r1, r2, #8
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	68d2      	ldr	r2, [r2, #12]
 80051ce:	06d2      	lsls	r2, r2, #27
 80051d0:	430a      	orrs	r2, r1
 80051d2:	492a      	ldr	r1, [pc, #168]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	610b      	str	r3, [r1, #16]
 80051d8:	e027      	b.n	800522a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d112      	bne.n	8005206 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051e0:	4b26      	ldr	r3, [pc, #152]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80051e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6892      	ldr	r2, [r2, #8]
 80051f0:	0211      	lsls	r1, r2, #8
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6912      	ldr	r2, [r2, #16]
 80051f6:	0852      	lsrs	r2, r2, #1
 80051f8:	3a01      	subs	r2, #1
 80051fa:	0552      	lsls	r2, r2, #21
 80051fc:	430a      	orrs	r2, r1
 80051fe:	491f      	ldr	r1, [pc, #124]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005200:	4313      	orrs	r3, r2
 8005202:	610b      	str	r3, [r1, #16]
 8005204:	e011      	b.n	800522a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005206:	4b1d      	ldr	r3, [pc, #116]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800520e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6892      	ldr	r2, [r2, #8]
 8005216:	0211      	lsls	r1, r2, #8
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6952      	ldr	r2, [r2, #20]
 800521c:	0852      	lsrs	r2, r2, #1
 800521e:	3a01      	subs	r2, #1
 8005220:	0652      	lsls	r2, r2, #25
 8005222:	430a      	orrs	r2, r1
 8005224:	4915      	ldr	r1, [pc, #84]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005226:	4313      	orrs	r3, r2
 8005228:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800522a:	4b14      	ldr	r3, [pc, #80]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a13      	ldr	r2, [pc, #76]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005230:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005234:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005236:	f7fd f935 	bl	80024a4 <HAL_GetTick>
 800523a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800523c:	e009      	b.n	8005252 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800523e:	f7fd f931 	bl	80024a4 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d902      	bls.n	8005252 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	73fb      	strb	r3, [r7, #15]
          break;
 8005250:	e005      	b.n	800525e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005252:	4b0a      	ldr	r3, [pc, #40]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0ef      	beq.n	800523e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d106      	bne.n	8005272 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	4903      	ldr	r1, [pc, #12]	; (800527c <RCCEx_PLLSAI1_Config+0x1e0>)
 800526e:	4313      	orrs	r3, r2
 8005270:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005272:	7bfb      	ldrb	r3, [r7, #15]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40021000 	.word	0x40021000

08005280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e095      	b.n	80053be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	d108      	bne.n	80052ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a2:	d009      	beq.n	80052b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	61da      	str	r2, [r3, #28]
 80052aa:	e005      	b.n	80052b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc fe52 	bl	8001f7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052f8:	d902      	bls.n	8005300 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e002      	b.n	8005306 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005304:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800530e:	d007      	beq.n	8005320 <HAL_SPI_Init+0xa0>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005318:	d002      	beq.n	8005320 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005362:	ea42 0103 	orr.w	r1, r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	0c1b      	lsrs	r3, r3, #16
 800537c:	f003 0204 	and.w	r2, r3, #4
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800539c:	ea42 0103 	orr.w	r1, r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b088      	sub	sp, #32
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	4613      	mov	r3, r2
 80053d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_SPI_Transmit+0x22>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e15f      	b.n	80056a8 <HAL_SPI_Transmit+0x2e2>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053f0:	f7fd f858 	bl	80024a4 <HAL_GetTick>
 80053f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b01      	cmp	r3, #1
 8005404:	d002      	beq.n	800540c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005406:	2302      	movs	r3, #2
 8005408:	77fb      	strb	r3, [r7, #31]
    goto error;
 800540a:	e148      	b.n	800569e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_SPI_Transmit+0x52>
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d102      	bne.n	800541e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800541c:	e13f      	b.n	800569e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2203      	movs	r2, #3
 8005422:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	88fa      	ldrh	r2, [r7, #6]
 8005436:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	88fa      	ldrh	r2, [r7, #6]
 800543c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005468:	d10f      	bne.n	800548a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005478:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005488:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b40      	cmp	r3, #64	; 0x40
 8005496:	d007      	beq.n	80054a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054b0:	d94f      	bls.n	8005552 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <HAL_SPI_Transmit+0xfa>
 80054ba:	8afb      	ldrh	r3, [r7, #22]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d142      	bne.n	8005546 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	881a      	ldrh	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	1c9a      	adds	r2, r3, #2
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054e4:	e02f      	b.n	8005546 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d112      	bne.n	800551a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	881a      	ldrh	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	1c9a      	adds	r2, r3, #2
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005518:	e015      	b.n	8005546 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800551a:	f7fc ffc3 	bl	80024a4 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d803      	bhi.n	8005532 <HAL_SPI_Transmit+0x16c>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d102      	bne.n	8005538 <HAL_SPI_Transmit+0x172>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d106      	bne.n	8005546 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005544:	e0ab      	b.n	800569e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1ca      	bne.n	80054e6 <HAL_SPI_Transmit+0x120>
 8005550:	e080      	b.n	8005654 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_SPI_Transmit+0x19a>
 800555a:	8afb      	ldrh	r3, [r7, #22]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d174      	bne.n	800564a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b01      	cmp	r3, #1
 8005568:	d912      	bls.n	8005590 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	881a      	ldrh	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	1c9a      	adds	r2, r3, #2
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005584:	b29b      	uxth	r3, r3
 8005586:	3b02      	subs	r3, #2
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800558e:	e05c      	b.n	800564a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	7812      	ldrb	r2, [r2, #0]
 800559c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80055b6:	e048      	b.n	800564a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d12b      	bne.n	800561e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d912      	bls.n	80055f6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	881a      	ldrh	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	1c9a      	adds	r2, r3, #2
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b02      	subs	r3, #2
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055f4:	e029      	b.n	800564a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	330c      	adds	r3, #12
 8005600:	7812      	ldrb	r2, [r2, #0]
 8005602:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800561c:	e015      	b.n	800564a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800561e:	f7fc ff41 	bl	80024a4 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d803      	bhi.n	8005636 <HAL_SPI_Transmit+0x270>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d102      	bne.n	800563c <HAL_SPI_Transmit+0x276>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d106      	bne.n	800564a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005648:	e029      	b.n	800569e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1b1      	bne.n	80055b8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f947 	bl	80058ec <SPI_EndRxTxTransaction>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005672:	2300      	movs	r3, #0
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e003      	b.n	800569e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3720      	adds	r7, #32
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	4613      	mov	r3, r2
 80056be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056c0:	f7fc fef0 	bl	80024a4 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	4413      	add	r3, r2
 80056ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056d0:	f7fc fee8 	bl	80024a4 <HAL_GetTick>
 80056d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056d6:	4b39      	ldr	r3, [pc, #228]	; (80057bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	015b      	lsls	r3, r3, #5
 80056dc:	0d1b      	lsrs	r3, r3, #20
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	fb02 f303 	mul.w	r3, r2, r3
 80056e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056e6:	e054      	b.n	8005792 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d050      	beq.n	8005792 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056f0:	f7fc fed8 	bl	80024a4 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d902      	bls.n	8005706 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d13d      	bne.n	8005782 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005714:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800571e:	d111      	bne.n	8005744 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005728:	d004      	beq.n	8005734 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005732:	d107      	bne.n	8005744 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005742:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800574c:	d10f      	bne.n	800576e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800576c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e017      	b.n	80057b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	3b01      	subs	r3, #1
 8005790:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4013      	ands	r3, r2
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	429a      	cmp	r2, r3
 80057a0:	bf0c      	ite	eq
 80057a2:	2301      	moveq	r3, #1
 80057a4:	2300      	movne	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	461a      	mov	r2, r3
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d19b      	bne.n	80056e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3720      	adds	r7, #32
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000000 	.word	0x20000000

080057c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08a      	sub	sp, #40	; 0x28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80057d2:	f7fc fe67 	bl	80024a4 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	1a9b      	subs	r3, r3, r2
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	4413      	add	r3, r2
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80057e2:	f7fc fe5f 	bl	80024a4 <HAL_GetTick>
 80057e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	330c      	adds	r3, #12
 80057ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057f0:	4b3d      	ldr	r3, [pc, #244]	; (80058e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	00da      	lsls	r2, r3, #3
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	0d1b      	lsrs	r3, r3, #20
 8005800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005802:	fb02 f303 	mul.w	r3, r2, r3
 8005806:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005808:	e060      	b.n	80058cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005810:	d107      	bne.n	8005822 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005820:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d050      	beq.n	80058cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800582a:	f7fc fe3b 	bl	80024a4 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005836:	429a      	cmp	r2, r3
 8005838:	d902      	bls.n	8005840 <SPI_WaitFifoStateUntilTimeout+0x80>
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	2b00      	cmp	r3, #0
 800583e:	d13d      	bne.n	80058bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800584e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005858:	d111      	bne.n	800587e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005862:	d004      	beq.n	800586e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586c:	d107      	bne.n	800587e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800587c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005886:	d10f      	bne.n	80058a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e010      	b.n	80058de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4013      	ands	r3, r2
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d196      	bne.n	800580a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3728      	adds	r7, #40	; 0x28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000000 	.word	0x20000000

080058ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2200      	movs	r2, #0
 8005900:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff ff5b 	bl	80057c0 <SPI_WaitFifoStateUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d007      	beq.n	8005920 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005914:	f043 0220 	orr.w	r2, r3, #32
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e027      	b.n	8005970 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2200      	movs	r2, #0
 8005928:	2180      	movs	r1, #128	; 0x80
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7ff fec0 	bl	80056b0 <SPI_WaitFlagStateUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d007      	beq.n	8005946 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593a:	f043 0220 	orr.w	r2, r3, #32
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e014      	b.n	8005970 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff ff34 	bl	80057c0 <SPI_WaitFifoStateUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005962:	f043 0220 	orr.w	r2, r3, #32
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e000      	b.n	8005970 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e049      	b.n	8005a1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fc fb2e 	bl	8002000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f000 fb52 	bl	8006060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e049      	b.n	8005acc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d106      	bne.n	8005a52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f841 	bl	8005ad4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f000 fafb 	bl	8006060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <HAL_TIM_PWM_Start+0x24>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	bf14      	ite	ne
 8005b04:	2301      	movne	r3, #1
 8005b06:	2300      	moveq	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	e03c      	b.n	8005b86 <HAL_TIM_PWM_Start+0x9e>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d109      	bne.n	8005b26 <HAL_TIM_PWM_Start+0x3e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	bf14      	ite	ne
 8005b1e:	2301      	movne	r3, #1
 8005b20:	2300      	moveq	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	e02f      	b.n	8005b86 <HAL_TIM_PWM_Start+0x9e>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d109      	bne.n	8005b40 <HAL_TIM_PWM_Start+0x58>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	bf14      	ite	ne
 8005b38:	2301      	movne	r3, #1
 8005b3a:	2300      	moveq	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	e022      	b.n	8005b86 <HAL_TIM_PWM_Start+0x9e>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b0c      	cmp	r3, #12
 8005b44:	d109      	bne.n	8005b5a <HAL_TIM_PWM_Start+0x72>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	bf14      	ite	ne
 8005b52:	2301      	movne	r3, #1
 8005b54:	2300      	moveq	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	e015      	b.n	8005b86 <HAL_TIM_PWM_Start+0x9e>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d109      	bne.n	8005b74 <HAL_TIM_PWM_Start+0x8c>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	bf14      	ite	ne
 8005b6c:	2301      	movne	r3, #1
 8005b6e:	2300      	moveq	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	e008      	b.n	8005b86 <HAL_TIM_PWM_Start+0x9e>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	bf14      	ite	ne
 8005b80:	2301      	movne	r3, #1
 8005b82:	2300      	moveq	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e07e      	b.n	8005c8c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d104      	bne.n	8005b9e <HAL_TIM_PWM_Start+0xb6>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b9c:	e023      	b.n	8005be6 <HAL_TIM_PWM_Start+0xfe>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d104      	bne.n	8005bae <HAL_TIM_PWM_Start+0xc6>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bac:	e01b      	b.n	8005be6 <HAL_TIM_PWM_Start+0xfe>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d104      	bne.n	8005bbe <HAL_TIM_PWM_Start+0xd6>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bbc:	e013      	b.n	8005be6 <HAL_TIM_PWM_Start+0xfe>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b0c      	cmp	r3, #12
 8005bc2:	d104      	bne.n	8005bce <HAL_TIM_PWM_Start+0xe6>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bcc:	e00b      	b.n	8005be6 <HAL_TIM_PWM_Start+0xfe>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b10      	cmp	r3, #16
 8005bd2:	d104      	bne.n	8005bde <HAL_TIM_PWM_Start+0xf6>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bdc:	e003      	b.n	8005be6 <HAL_TIM_PWM_Start+0xfe>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2201      	movs	r2, #1
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fdb2 	bl	8006758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a26      	ldr	r2, [pc, #152]	; (8005c94 <HAL_TIM_PWM_Start+0x1ac>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_TIM_PWM_Start+0x12a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a25      	ldr	r2, [pc, #148]	; (8005c98 <HAL_TIM_PWM_Start+0x1b0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d004      	beq.n	8005c12 <HAL_TIM_PWM_Start+0x12a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a23      	ldr	r2, [pc, #140]	; (8005c9c <HAL_TIM_PWM_Start+0x1b4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d101      	bne.n	8005c16 <HAL_TIM_PWM_Start+0x12e>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <HAL_TIM_PWM_Start+0x130>
 8005c16:	2300      	movs	r3, #0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a18      	ldr	r2, [pc, #96]	; (8005c94 <HAL_TIM_PWM_Start+0x1ac>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d009      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x162>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3e:	d004      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x162>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a14      	ldr	r2, [pc, #80]	; (8005c98 <HAL_TIM_PWM_Start+0x1b0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d115      	bne.n	8005c76 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <HAL_TIM_PWM_Start+0x1b8>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b06      	cmp	r3, #6
 8005c5a:	d015      	beq.n	8005c88 <HAL_TIM_PWM_Start+0x1a0>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c62:	d011      	beq.n	8005c88 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c74:	e008      	b.n	8005c88 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0201 	orr.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	e000      	b.n	8005c8a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40012c00 	.word	0x40012c00
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	00010007 	.word	0x00010007

08005ca4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e0ff      	b.n	8005ec2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b14      	cmp	r3, #20
 8005cce:	f200 80f0 	bhi.w	8005eb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005cd2:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005d2d 	.word	0x08005d2d
 8005cdc:	08005eb3 	.word	0x08005eb3
 8005ce0:	08005eb3 	.word	0x08005eb3
 8005ce4:	08005eb3 	.word	0x08005eb3
 8005ce8:	08005d6d 	.word	0x08005d6d
 8005cec:	08005eb3 	.word	0x08005eb3
 8005cf0:	08005eb3 	.word	0x08005eb3
 8005cf4:	08005eb3 	.word	0x08005eb3
 8005cf8:	08005daf 	.word	0x08005daf
 8005cfc:	08005eb3 	.word	0x08005eb3
 8005d00:	08005eb3 	.word	0x08005eb3
 8005d04:	08005eb3 	.word	0x08005eb3
 8005d08:	08005def 	.word	0x08005def
 8005d0c:	08005eb3 	.word	0x08005eb3
 8005d10:	08005eb3 	.word	0x08005eb3
 8005d14:	08005eb3 	.word	0x08005eb3
 8005d18:	08005e31 	.word	0x08005e31
 8005d1c:	08005eb3 	.word	0x08005eb3
 8005d20:	08005eb3 	.word	0x08005eb3
 8005d24:	08005eb3 	.word	0x08005eb3
 8005d28:	08005e71 	.word	0x08005e71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f9f8 	bl	8006128 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0208 	orr.w	r2, r2, #8
 8005d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0204 	bic.w	r2, r2, #4
 8005d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6999      	ldr	r1, [r3, #24]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	691a      	ldr	r2, [r3, #16]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	619a      	str	r2, [r3, #24]
      break;
 8005d6a:	e0a5      	b.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fa54 	bl	8006220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6999      	ldr	r1, [r3, #24]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	021a      	lsls	r2, r3, #8
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	619a      	str	r2, [r3, #24]
      break;
 8005dac:	e084      	b.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68b9      	ldr	r1, [r7, #8]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 faad 	bl	8006314 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 0208 	orr.w	r2, r2, #8
 8005dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0204 	bic.w	r2, r2, #4
 8005dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69d9      	ldr	r1, [r3, #28]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	61da      	str	r2, [r3, #28]
      break;
 8005dec:	e064      	b.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fb05 	bl	8006404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69da      	ldr	r2, [r3, #28]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69d9      	ldr	r1, [r3, #28]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	021a      	lsls	r2, r3, #8
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	61da      	str	r2, [r3, #28]
      break;
 8005e2e:	e043      	b.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fb42 	bl	80064c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0208 	orr.w	r2, r2, #8
 8005e4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0204 	bic.w	r2, r2, #4
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e6e:	e023      	b.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fb7a 	bl	8006570 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	021a      	lsls	r2, r3, #8
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005eb0:	e002      	b.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop

08005ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e0b6      	b.n	8006056 <HAL_TIM_ConfigClockSource+0x18a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f24:	d03e      	beq.n	8005fa4 <HAL_TIM_ConfigClockSource+0xd8>
 8005f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2a:	f200 8087 	bhi.w	800603c <HAL_TIM_ConfigClockSource+0x170>
 8005f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f32:	f000 8086 	beq.w	8006042 <HAL_TIM_ConfigClockSource+0x176>
 8005f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3a:	d87f      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x170>
 8005f3c:	2b70      	cmp	r3, #112	; 0x70
 8005f3e:	d01a      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0xaa>
 8005f40:	2b70      	cmp	r3, #112	; 0x70
 8005f42:	d87b      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x170>
 8005f44:	2b60      	cmp	r3, #96	; 0x60
 8005f46:	d050      	beq.n	8005fea <HAL_TIM_ConfigClockSource+0x11e>
 8005f48:	2b60      	cmp	r3, #96	; 0x60
 8005f4a:	d877      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x170>
 8005f4c:	2b50      	cmp	r3, #80	; 0x50
 8005f4e:	d03c      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0xfe>
 8005f50:	2b50      	cmp	r3, #80	; 0x50
 8005f52:	d873      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x170>
 8005f54:	2b40      	cmp	r3, #64	; 0x40
 8005f56:	d058      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x13e>
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	d86f      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x170>
 8005f5c:	2b30      	cmp	r3, #48	; 0x30
 8005f5e:	d064      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x15e>
 8005f60:	2b30      	cmp	r3, #48	; 0x30
 8005f62:	d86b      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x170>
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d060      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x15e>
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d867      	bhi.n	800603c <HAL_TIM_ConfigClockSource+0x170>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d05c      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x15e>
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d05a      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x15e>
 8005f74:	e062      	b.n	800603c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f86:	f000 fbc7 	bl	8006718 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	609a      	str	r2, [r3, #8]
      break;
 8005fa2:	e04f      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fb4:	f000 fbb0 	bl	8006718 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fc6:	609a      	str	r2, [r3, #8]
      break;
 8005fc8:	e03c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f000 fb24 	bl	8006624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2150      	movs	r1, #80	; 0x50
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fb7d 	bl	80066e2 <TIM_ITRx_SetConfig>
      break;
 8005fe8:	e02c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f000 fb43 	bl	8006682 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2160      	movs	r1, #96	; 0x60
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fb6d 	bl	80066e2 <TIM_ITRx_SetConfig>
      break;
 8006008:	e01c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	461a      	mov	r2, r3
 8006018:	f000 fb04 	bl	8006624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2140      	movs	r1, #64	; 0x40
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fb5d 	bl	80066e2 <TIM_ITRx_SetConfig>
      break;
 8006028:	e00c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f000 fb54 	bl	80066e2 <TIM_ITRx_SetConfig>
      break;
 800603a:	e003      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	73fb      	strb	r3, [r7, #15]
      break;
 8006040:	e000      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a2a      	ldr	r2, [pc, #168]	; (800611c <TIM_Base_SetConfig+0xbc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_Base_SetConfig+0x20>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607e:	d108      	bne.n	8006092 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a21      	ldr	r2, [pc, #132]	; (800611c <TIM_Base_SetConfig+0xbc>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00b      	beq.n	80060b2 <TIM_Base_SetConfig+0x52>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a0:	d007      	beq.n	80060b2 <TIM_Base_SetConfig+0x52>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a1e      	ldr	r2, [pc, #120]	; (8006120 <TIM_Base_SetConfig+0xc0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d003      	beq.n	80060b2 <TIM_Base_SetConfig+0x52>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a1d      	ldr	r2, [pc, #116]	; (8006124 <TIM_Base_SetConfig+0xc4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d108      	bne.n	80060c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a0c      	ldr	r2, [pc, #48]	; (800611c <TIM_Base_SetConfig+0xbc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d007      	beq.n	8006100 <TIM_Base_SetConfig+0xa0>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a0b      	ldr	r2, [pc, #44]	; (8006120 <TIM_Base_SetConfig+0xc0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_Base_SetConfig+0xa0>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a0a      	ldr	r2, [pc, #40]	; (8006124 <TIM_Base_SetConfig+0xc4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d103      	bne.n	8006108 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	615a      	str	r2, [r3, #20]
}
 800610e:	bf00      	nop
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40012c00 	.word	0x40012c00
 8006120:	40014000 	.word	0x40014000
 8006124:	40014400 	.word	0x40014400

08006128 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	f023 0201 	bic.w	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0303 	bic.w	r3, r3, #3
 8006162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f023 0302 	bic.w	r3, r3, #2
 8006174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a24      	ldr	r2, [pc, #144]	; (8006214 <TIM_OC1_SetConfig+0xec>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d007      	beq.n	8006198 <TIM_OC1_SetConfig+0x70>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a23      	ldr	r2, [pc, #140]	; (8006218 <TIM_OC1_SetConfig+0xf0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_OC1_SetConfig+0x70>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a22      	ldr	r2, [pc, #136]	; (800621c <TIM_OC1_SetConfig+0xf4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10c      	bne.n	80061b2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 0308 	bic.w	r3, r3, #8
 800619e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 0304 	bic.w	r3, r3, #4
 80061b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a17      	ldr	r2, [pc, #92]	; (8006214 <TIM_OC1_SetConfig+0xec>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d007      	beq.n	80061ca <TIM_OC1_SetConfig+0xa2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a16      	ldr	r2, [pc, #88]	; (8006218 <TIM_OC1_SetConfig+0xf0>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <TIM_OC1_SetConfig+0xa2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a15      	ldr	r2, [pc, #84]	; (800621c <TIM_OC1_SetConfig+0xf4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d111      	bne.n	80061ee <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	621a      	str	r2, [r3, #32]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	40012c00 	.word	0x40012c00
 8006218:	40014000 	.word	0x40014000
 800621c:	40014400 	.word	0x40014400

08006220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	f023 0210 	bic.w	r2, r3, #16
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800624e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	021b      	lsls	r3, r3, #8
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f023 0320 	bic.w	r3, r3, #32
 800626e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	4313      	orrs	r3, r2
 800627a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a22      	ldr	r2, [pc, #136]	; (8006308 <TIM_OC2_SetConfig+0xe8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d10d      	bne.n	80062a0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800628a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800629e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a19      	ldr	r2, [pc, #100]	; (8006308 <TIM_OC2_SetConfig+0xe8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d007      	beq.n	80062b8 <TIM_OC2_SetConfig+0x98>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a18      	ldr	r2, [pc, #96]	; (800630c <TIM_OC2_SetConfig+0xec>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_OC2_SetConfig+0x98>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a17      	ldr	r2, [pc, #92]	; (8006310 <TIM_OC2_SetConfig+0xf0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d113      	bne.n	80062e0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40014000 	.word	0x40014000
 8006310:	40014400 	.word	0x40014400

08006314 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0303 	bic.w	r3, r3, #3
 800634e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	021b      	lsls	r3, r3, #8
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a21      	ldr	r2, [pc, #132]	; (80063f8 <TIM_OC3_SetConfig+0xe4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d10d      	bne.n	8006392 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800637c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <TIM_OC3_SetConfig+0xe4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d007      	beq.n	80063aa <TIM_OC3_SetConfig+0x96>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a17      	ldr	r2, [pc, #92]	; (80063fc <TIM_OC3_SetConfig+0xe8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d003      	beq.n	80063aa <TIM_OC3_SetConfig+0x96>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a16      	ldr	r2, [pc, #88]	; (8006400 <TIM_OC3_SetConfig+0xec>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d113      	bne.n	80063d2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	621a      	str	r2, [r3, #32]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40012c00 	.word	0x40012c00
 80063fc:	40014000 	.word	0x40014000
 8006400:	40014400 	.word	0x40014400

08006404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800643e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	031b      	lsls	r3, r3, #12
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a14      	ldr	r2, [pc, #80]	; (80064b4 <TIM_OC4_SetConfig+0xb0>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d007      	beq.n	8006478 <TIM_OC4_SetConfig+0x74>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a13      	ldr	r2, [pc, #76]	; (80064b8 <TIM_OC4_SetConfig+0xb4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d003      	beq.n	8006478 <TIM_OC4_SetConfig+0x74>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a12      	ldr	r2, [pc, #72]	; (80064bc <TIM_OC4_SetConfig+0xb8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d109      	bne.n	800648c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800647e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	019b      	lsls	r3, r3, #6
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	621a      	str	r2, [r3, #32]
}
 80064a6:	bf00      	nop
 80064a8:	371c      	adds	r7, #28
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40012c00 	.word	0x40012c00
 80064b8:	40014000 	.word	0x40014000
 80064bc:	40014400 	.word	0x40014400

080064c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006504:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	041b      	lsls	r3, r3, #16
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a13      	ldr	r2, [pc, #76]	; (8006564 <TIM_OC5_SetConfig+0xa4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <TIM_OC5_SetConfig+0x6a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a12      	ldr	r2, [pc, #72]	; (8006568 <TIM_OC5_SetConfig+0xa8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d003      	beq.n	800652a <TIM_OC5_SetConfig+0x6a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a11      	ldr	r2, [pc, #68]	; (800656c <TIM_OC5_SetConfig+0xac>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d109      	bne.n	800653e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006530:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	021b      	lsls	r3, r3, #8
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	621a      	str	r2, [r3, #32]
}
 8006558:	bf00      	nop
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	40012c00 	.word	0x40012c00
 8006568:	40014000 	.word	0x40014000
 800656c:	40014400 	.word	0x40014400

08006570 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800659e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	051b      	lsls	r3, r3, #20
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a14      	ldr	r2, [pc, #80]	; (8006618 <TIM_OC6_SetConfig+0xa8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d007      	beq.n	80065dc <TIM_OC6_SetConfig+0x6c>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a13      	ldr	r2, [pc, #76]	; (800661c <TIM_OC6_SetConfig+0xac>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d003      	beq.n	80065dc <TIM_OC6_SetConfig+0x6c>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a12      	ldr	r2, [pc, #72]	; (8006620 <TIM_OC6_SetConfig+0xb0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d109      	bne.n	80065f0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	029b      	lsls	r3, r3, #10
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	621a      	str	r2, [r3, #32]
}
 800660a:	bf00      	nop
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40012c00 	.word	0x40012c00
 800661c:	40014000 	.word	0x40014000
 8006620:	40014400 	.word	0x40014400

08006624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f023 0201 	bic.w	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800664e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f023 030a 	bic.w	r3, r3, #10
 8006660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	621a      	str	r2, [r3, #32]
}
 8006676:	bf00      	nop
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006682:	b480      	push	{r7}
 8006684:	b087      	sub	sp, #28
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f023 0210 	bic.w	r2, r3, #16
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	031b      	lsls	r3, r3, #12
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b085      	sub	sp, #20
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	f043 0307 	orr.w	r3, r3, #7
 8006704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	609a      	str	r2, [r3, #8]
}
 800670c:	bf00      	nop
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	021a      	lsls	r2, r3, #8
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	431a      	orrs	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4313      	orrs	r3, r2
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	609a      	str	r2, [r3, #8]
}
 800674c:	bf00      	nop
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f003 031f 	and.w	r3, r3, #31
 800676a:	2201      	movs	r2, #1
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a1a      	ldr	r2, [r3, #32]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	43db      	mvns	r3, r3
 800677a:	401a      	ands	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a1a      	ldr	r2, [r3, #32]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	fa01 f303 	lsl.w	r3, r1, r3
 8006790:	431a      	orrs	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	621a      	str	r2, [r3, #32]
}
 8006796:	bf00      	nop
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
	...

080067a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e04f      	b.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a21      	ldr	r2, [pc, #132]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d108      	bne.n	80067f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a14      	ldr	r2, [pc, #80]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d009      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006824:	d004      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a10      	ldr	r2, [pc, #64]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d10c      	bne.n	800684a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006836:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	4313      	orrs	r3, r2
 8006840:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	40012c00 	.word	0x40012c00
 800686c:	40014000 	.word	0x40014000

08006870 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006888:	2302      	movs	r3, #2
 800688a:	e060      	b.n	800694e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	041b      	lsls	r3, r3, #16
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a14      	ldr	r2, [pc, #80]	; (800695c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d115      	bne.n	800693c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	051b      	lsls	r3, r3, #20
 800691c:	4313      	orrs	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40012c00 	.word	0x40012c00

08006960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e040      	b.n	80069f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fb fb94 	bl	80020b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2224      	movs	r2, #36	; 0x24
 800698c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fba8 	bl	80070fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f979 	bl	8006ca4 <UART_SetConfig>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e01b      	b.n	80069f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fc27 	bl	8007240 <UART_CheckIdleState>
 80069f2:	4603      	mov	r3, r0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08a      	sub	sp, #40	; 0x28
 8006a00:	af02      	add	r7, sp, #8
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a10:	2b20      	cmp	r3, #32
 8006a12:	d178      	bne.n	8006b06 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_UART_Transmit+0x24>
 8006a1a:	88fb      	ldrh	r3, [r7, #6]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e071      	b.n	8006b08 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2221      	movs	r2, #33	; 0x21
 8006a30:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a32:	f7fb fd37 	bl	80024a4 <HAL_GetTick>
 8006a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	88fa      	ldrh	r2, [r7, #6]
 8006a3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	88fa      	ldrh	r2, [r7, #6]
 8006a44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a50:	d108      	bne.n	8006a64 <HAL_UART_Transmit+0x68>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d104      	bne.n	8006a64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	e003      	b.n	8006a6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a6c:	e030      	b.n	8006ad0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2200      	movs	r2, #0
 8006a76:	2180      	movs	r1, #128	; 0x80
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fc89 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d004      	beq.n	8006a8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2220      	movs	r2, #32
 8006a88:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e03c      	b.n	8006b08 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10b      	bne.n	8006aac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	881a      	ldrh	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aa0:	b292      	uxth	r2, r2
 8006aa2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	3302      	adds	r3, #2
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	e008      	b.n	8006abe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	781a      	ldrb	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	b292      	uxth	r2, r2
 8006ab6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	3301      	adds	r3, #1
 8006abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1c8      	bne.n	8006a6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2140      	movs	r1, #64	; 0x40
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 fc52 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d004      	beq.n	8006afc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2220      	movs	r2, #32
 8006af6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e005      	b.n	8006b08 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2220      	movs	r2, #32
 8006b00:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	e000      	b.n	8006b08 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006b06:	2302      	movs	r3, #2
  }
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3720      	adds	r7, #32
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	f040 80b6 	bne.w	8006c98 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <HAL_UART_Receive+0x28>
 8006b32:	88fb      	ldrh	r3, [r7, #6]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e0ae      	b.n	8006c9a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2222      	movs	r2, #34	; 0x22
 8006b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b52:	f7fb fca7 	bl	80024a4 <HAL_GetTick>
 8006b56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	88fa      	ldrh	r2, [r7, #6]
 8006b5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	88fa      	ldrh	r2, [r7, #6]
 8006b64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b70:	d10e      	bne.n	8006b90 <HAL_UART_Receive+0x80>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d105      	bne.n	8006b86 <HAL_UART_Receive+0x76>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b84:	e02d      	b.n	8006be2 <HAL_UART_Receive+0xd2>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	22ff      	movs	r2, #255	; 0xff
 8006b8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b8e:	e028      	b.n	8006be2 <HAL_UART_Receive+0xd2>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10d      	bne.n	8006bb4 <HAL_UART_Receive+0xa4>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d104      	bne.n	8006baa <HAL_UART_Receive+0x9a>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	22ff      	movs	r2, #255	; 0xff
 8006ba4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ba8:	e01b      	b.n	8006be2 <HAL_UART_Receive+0xd2>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	227f      	movs	r2, #127	; 0x7f
 8006bae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bb2:	e016      	b.n	8006be2 <HAL_UART_Receive+0xd2>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bbc:	d10d      	bne.n	8006bda <HAL_UART_Receive+0xca>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d104      	bne.n	8006bd0 <HAL_UART_Receive+0xc0>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	227f      	movs	r2, #127	; 0x7f
 8006bca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bce:	e008      	b.n	8006be2 <HAL_UART_Receive+0xd2>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	223f      	movs	r2, #63	; 0x3f
 8006bd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bd8:	e003      	b.n	8006be2 <HAL_UART_Receive+0xd2>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006be8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf2:	d108      	bne.n	8006c06 <HAL_UART_Receive+0xf6>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	e003      	b.n	8006c0e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006c0e:	e037      	b.n	8006c80 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2200      	movs	r2, #0
 8006c18:	2120      	movs	r1, #32
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 fbb8 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e033      	b.n	8006c9a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10c      	bne.n	8006c52 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	8a7b      	ldrh	r3, [r7, #18]
 8006c42:	4013      	ands	r3, r2
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	3302      	adds	r3, #2
 8006c4e:	61bb      	str	r3, [r7, #24]
 8006c50:	e00d      	b.n	8006c6e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	8a7b      	ldrh	r3, [r7, #18]
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	4013      	ands	r3, r2
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1c1      	bne.n	8006c10 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	e000      	b.n	8006c9a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006c98:	2302      	movs	r3, #2
  }
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3720      	adds	r7, #32
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ca8:	b08a      	sub	sp, #40	; 0x28
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	4bb4      	ldr	r3, [pc, #720]	; (8006fa4 <UART_SetConfig+0x300>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	6812      	ldr	r2, [r2, #0]
 8006cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4aa9      	ldr	r2, [pc, #676]	; (8006fa8 <UART_SetConfig+0x304>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d20:	430a      	orrs	r2, r1
 8006d22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4aa0      	ldr	r2, [pc, #640]	; (8006fac <UART_SetConfig+0x308>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d126      	bne.n	8006d7c <UART_SetConfig+0xd8>
 8006d2e:	4ba0      	ldr	r3, [pc, #640]	; (8006fb0 <UART_SetConfig+0x30c>)
 8006d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d81b      	bhi.n	8006d74 <UART_SetConfig+0xd0>
 8006d3c:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <UART_SetConfig+0xa0>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d55 	.word	0x08006d55
 8006d48:	08006d65 	.word	0x08006d65
 8006d4c:	08006d5d 	.word	0x08006d5d
 8006d50:	08006d6d 	.word	0x08006d6d
 8006d54:	2301      	movs	r3, #1
 8006d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d5a:	e080      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d62:	e07c      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006d64:	2304      	movs	r3, #4
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d6a:	e078      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006d6c:	2308      	movs	r3, #8
 8006d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d72:	e074      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006d74:	2310      	movs	r3, #16
 8006d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d7a:	e070      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a8c      	ldr	r2, [pc, #560]	; (8006fb4 <UART_SetConfig+0x310>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d138      	bne.n	8006df8 <UART_SetConfig+0x154>
 8006d86:	4b8a      	ldr	r3, [pc, #552]	; (8006fb0 <UART_SetConfig+0x30c>)
 8006d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8c:	f003 030c 	and.w	r3, r3, #12
 8006d90:	2b0c      	cmp	r3, #12
 8006d92:	d82d      	bhi.n	8006df0 <UART_SetConfig+0x14c>
 8006d94:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <UART_SetConfig+0xf8>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006dd1 	.word	0x08006dd1
 8006da0:	08006df1 	.word	0x08006df1
 8006da4:	08006df1 	.word	0x08006df1
 8006da8:	08006df1 	.word	0x08006df1
 8006dac:	08006de1 	.word	0x08006de1
 8006db0:	08006df1 	.word	0x08006df1
 8006db4:	08006df1 	.word	0x08006df1
 8006db8:	08006df1 	.word	0x08006df1
 8006dbc:	08006dd9 	.word	0x08006dd9
 8006dc0:	08006df1 	.word	0x08006df1
 8006dc4:	08006df1 	.word	0x08006df1
 8006dc8:	08006df1 	.word	0x08006df1
 8006dcc:	08006de9 	.word	0x08006de9
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dd6:	e042      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dde:	e03e      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006de0:	2304      	movs	r3, #4
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de6:	e03a      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006de8:	2308      	movs	r3, #8
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dee:	e036      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006df0:	2310      	movs	r3, #16
 8006df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df6:	e032      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a6a      	ldr	r2, [pc, #424]	; (8006fa8 <UART_SetConfig+0x304>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d12a      	bne.n	8006e58 <UART_SetConfig+0x1b4>
 8006e02:	4b6b      	ldr	r3, [pc, #428]	; (8006fb0 <UART_SetConfig+0x30c>)
 8006e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e10:	d01a      	beq.n	8006e48 <UART_SetConfig+0x1a4>
 8006e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e16:	d81b      	bhi.n	8006e50 <UART_SetConfig+0x1ac>
 8006e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e1c:	d00c      	beq.n	8006e38 <UART_SetConfig+0x194>
 8006e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e22:	d815      	bhi.n	8006e50 <UART_SetConfig+0x1ac>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <UART_SetConfig+0x18c>
 8006e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e2c:	d008      	beq.n	8006e40 <UART_SetConfig+0x19c>
 8006e2e:	e00f      	b.n	8006e50 <UART_SetConfig+0x1ac>
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e36:	e012      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e3e:	e00e      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006e40:	2304      	movs	r3, #4
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e46:	e00a      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006e48:	2308      	movs	r3, #8
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e4e:	e006      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006e50:	2310      	movs	r3, #16
 8006e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e56:	e002      	b.n	8006e5e <UART_SetConfig+0x1ba>
 8006e58:	2310      	movs	r3, #16
 8006e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a51      	ldr	r2, [pc, #324]	; (8006fa8 <UART_SetConfig+0x304>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d17a      	bne.n	8006f5e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d824      	bhi.n	8006eba <UART_SetConfig+0x216>
 8006e70:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <UART_SetConfig+0x1d4>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006e9d 	.word	0x08006e9d
 8006e7c:	08006ebb 	.word	0x08006ebb
 8006e80:	08006ea5 	.word	0x08006ea5
 8006e84:	08006ebb 	.word	0x08006ebb
 8006e88:	08006eab 	.word	0x08006eab
 8006e8c:	08006ebb 	.word	0x08006ebb
 8006e90:	08006ebb 	.word	0x08006ebb
 8006e94:	08006ebb 	.word	0x08006ebb
 8006e98:	08006eb3 	.word	0x08006eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e9c:	f7fd fe6c 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 8006ea0:	61f8      	str	r0, [r7, #28]
        break;
 8006ea2:	e010      	b.n	8006ec6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ea4:	4b44      	ldr	r3, [pc, #272]	; (8006fb8 <UART_SetConfig+0x314>)
 8006ea6:	61fb      	str	r3, [r7, #28]
        break;
 8006ea8:	e00d      	b.n	8006ec6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eaa:	f7fd fdcd 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8006eae:	61f8      	str	r0, [r7, #28]
        break;
 8006eb0:	e009      	b.n	8006ec6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eb6:	61fb      	str	r3, [r7, #28]
        break;
 8006eb8:	e005      	b.n	8006ec6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ec4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 8107 	beq.w	80070dc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	4413      	add	r3, r2
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d305      	bcc.n	8006eea <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ee4:	69fa      	ldr	r2, [r7, #28]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d903      	bls.n	8006ef2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ef0:	e0f4      	b.n	80070dc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	461c      	mov	r4, r3
 8006ef8:	4615      	mov	r5, r2
 8006efa:	f04f 0200 	mov.w	r2, #0
 8006efe:	f04f 0300 	mov.w	r3, #0
 8006f02:	022b      	lsls	r3, r5, #8
 8006f04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f08:	0222      	lsls	r2, r4, #8
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	6849      	ldr	r1, [r1, #4]
 8006f0e:	0849      	lsrs	r1, r1, #1
 8006f10:	2000      	movs	r0, #0
 8006f12:	4688      	mov	r8, r1
 8006f14:	4681      	mov	r9, r0
 8006f16:	eb12 0a08 	adds.w	sl, r2, r8
 8006f1a:	eb43 0b09 	adc.w	fp, r3, r9
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	603b      	str	r3, [r7, #0]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f2c:	4650      	mov	r0, sl
 8006f2e:	4659      	mov	r1, fp
 8006f30:	f7f9 fe8a 	bl	8000c48 <__aeabi_uldivmod>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	4613      	mov	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f42:	d308      	bcc.n	8006f56 <UART_SetConfig+0x2b2>
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f4a:	d204      	bcs.n	8006f56 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	60da      	str	r2, [r3, #12]
 8006f54:	e0c2      	b.n	80070dc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f5c:	e0be      	b.n	80070dc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f66:	d16a      	bne.n	800703e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d834      	bhi.n	8006fda <UART_SetConfig+0x336>
 8006f70:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <UART_SetConfig+0x2d4>)
 8006f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f76:	bf00      	nop
 8006f78:	08006f9d 	.word	0x08006f9d
 8006f7c:	08006fbd 	.word	0x08006fbd
 8006f80:	08006fc5 	.word	0x08006fc5
 8006f84:	08006fdb 	.word	0x08006fdb
 8006f88:	08006fcb 	.word	0x08006fcb
 8006f8c:	08006fdb 	.word	0x08006fdb
 8006f90:	08006fdb 	.word	0x08006fdb
 8006f94:	08006fdb 	.word	0x08006fdb
 8006f98:	08006fd3 	.word	0x08006fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f9c:	f7fd fdec 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 8006fa0:	61f8      	str	r0, [r7, #28]
        break;
 8006fa2:	e020      	b.n	8006fe6 <UART_SetConfig+0x342>
 8006fa4:	efff69f3 	.word	0xefff69f3
 8006fa8:	40008000 	.word	0x40008000
 8006fac:	40013800 	.word	0x40013800
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	40004400 	.word	0x40004400
 8006fb8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fbc:	f7fd fdf2 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8006fc0:	61f8      	str	r0, [r7, #28]
        break;
 8006fc2:	e010      	b.n	8006fe6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fc4:	4b4c      	ldr	r3, [pc, #304]	; (80070f8 <UART_SetConfig+0x454>)
 8006fc6:	61fb      	str	r3, [r7, #28]
        break;
 8006fc8:	e00d      	b.n	8006fe6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fca:	f7fd fd3d 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8006fce:	61f8      	str	r0, [r7, #28]
        break;
 8006fd0:	e009      	b.n	8006fe6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd6:	61fb      	str	r3, [r7, #28]
        break;
 8006fd8:	e005      	b.n	8006fe6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d077      	beq.n	80070dc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	005a      	lsls	r2, r3, #1
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	085b      	lsrs	r3, r3, #1
 8006ff6:	441a      	add	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007000:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b0f      	cmp	r3, #15
 8007006:	d916      	bls.n	8007036 <UART_SetConfig+0x392>
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700e:	d212      	bcs.n	8007036 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	b29b      	uxth	r3, r3
 8007014:	f023 030f 	bic.w	r3, r3, #15
 8007018:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	085b      	lsrs	r3, r3, #1
 800701e:	b29b      	uxth	r3, r3
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	b29a      	uxth	r2, r3
 8007026:	8afb      	ldrh	r3, [r7, #22]
 8007028:	4313      	orrs	r3, r2
 800702a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	8afa      	ldrh	r2, [r7, #22]
 8007032:	60da      	str	r2, [r3, #12]
 8007034:	e052      	b.n	80070dc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800703c:	e04e      	b.n	80070dc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800703e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007042:	2b08      	cmp	r3, #8
 8007044:	d827      	bhi.n	8007096 <UART_SetConfig+0x3f2>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x3a8>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	08007071 	.word	0x08007071
 8007050:	08007079 	.word	0x08007079
 8007054:	08007081 	.word	0x08007081
 8007058:	08007097 	.word	0x08007097
 800705c:	08007087 	.word	0x08007087
 8007060:	08007097 	.word	0x08007097
 8007064:	08007097 	.word	0x08007097
 8007068:	08007097 	.word	0x08007097
 800706c:	0800708f 	.word	0x0800708f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007070:	f7fd fd82 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 8007074:	61f8      	str	r0, [r7, #28]
        break;
 8007076:	e014      	b.n	80070a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007078:	f7fd fd94 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 800707c:	61f8      	str	r0, [r7, #28]
        break;
 800707e:	e010      	b.n	80070a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007080:	4b1d      	ldr	r3, [pc, #116]	; (80070f8 <UART_SetConfig+0x454>)
 8007082:	61fb      	str	r3, [r7, #28]
        break;
 8007084:	e00d      	b.n	80070a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007086:	f7fd fcdf 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 800708a:	61f8      	str	r0, [r7, #28]
        break;
 800708c:	e009      	b.n	80070a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007092:	61fb      	str	r3, [r7, #28]
        break;
 8007094:	e005      	b.n	80070a2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070a0:	bf00      	nop
    }

    if (pclk != 0U)
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d019      	beq.n	80070dc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	085a      	lsrs	r2, r3, #1
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	441a      	add	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	2b0f      	cmp	r3, #15
 80070c0:	d909      	bls.n	80070d6 <UART_SetConfig+0x432>
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c8:	d205      	bcs.n	80070d6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60da      	str	r2, [r3, #12]
 80070d4:	e002      	b.n	80070dc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80070e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3728      	adds	r7, #40	; 0x28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070f6:	bf00      	nop
 80070f8:	00f42400 	.word	0x00f42400

080070fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	f003 0308 	and.w	r3, r3, #8
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	f003 0310 	and.w	r3, r3, #16
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d01a      	beq.n	8007212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071fa:	d10a      	bne.n	8007212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	605a      	str	r2, [r3, #4]
  }
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b098      	sub	sp, #96	; 0x60
 8007244:	af02      	add	r7, sp, #8
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007250:	f7fb f928 	bl	80024a4 <HAL_GetTick>
 8007254:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0308 	and.w	r3, r3, #8
 8007260:	2b08      	cmp	r3, #8
 8007262:	d12e      	bne.n	80072c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007264:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800726c:	2200      	movs	r2, #0
 800726e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f88c 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d021      	beq.n	80072c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	e853 3f00 	ldrex	r3, [r3]
 800728a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800728c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007292:	653b      	str	r3, [r7, #80]	; 0x50
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800729c:	647b      	str	r3, [r7, #68]	; 0x44
 800729e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072a4:	e841 2300 	strex	r3, r2, [r1]
 80072a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e6      	bne.n	800727e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e062      	b.n	8007388 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d149      	bne.n	8007364 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072d8:	2200      	movs	r2, #0
 80072da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f856 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d03c      	beq.n	8007364 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	623b      	str	r3, [r7, #32]
   return(result);
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007308:	633b      	str	r3, [r7, #48]	; 0x30
 800730a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800730e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e6      	bne.n	80072ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3308      	adds	r3, #8
 8007322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	60fb      	str	r3, [r7, #12]
   return(result);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0301 	bic.w	r3, r3, #1
 8007332:	64bb      	str	r3, [r7, #72]	; 0x48
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3308      	adds	r3, #8
 800733a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800733c:	61fa      	str	r2, [r7, #28]
 800733e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	69b9      	ldr	r1, [r7, #24]
 8007342:	69fa      	ldr	r2, [r7, #28]
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	617b      	str	r3, [r7, #20]
   return(result);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e5      	bne.n	800731c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e011      	b.n	8007388 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2220      	movs	r2, #32
 8007368:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3758      	adds	r7, #88	; 0x58
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a0:	e049      	b.n	8007436 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a8:	d045      	beq.n	8007436 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073aa:	f7fb f87b 	bl	80024a4 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d302      	bcc.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e048      	b.n	8007456 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d031      	beq.n	8007436 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	f003 0308 	and.w	r3, r3, #8
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d110      	bne.n	8007402 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2208      	movs	r2, #8
 80073e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 f838 	bl	800745e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2208      	movs	r2, #8
 80073f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e029      	b.n	8007456 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800740c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007410:	d111      	bne.n	8007436 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800741a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 f81e 	bl	800745e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2220      	movs	r2, #32
 8007426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e00f      	b.n	8007456 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4013      	ands	r3, r2
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	429a      	cmp	r2, r3
 8007444:	bf0c      	ite	eq
 8007446:	2301      	moveq	r3, #1
 8007448:	2300      	movne	r3, #0
 800744a:	b2db      	uxtb	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	429a      	cmp	r2, r3
 8007452:	d0a6      	beq.n	80073a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800745e:	b480      	push	{r7}
 8007460:	b095      	sub	sp, #84	; 0x54
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800747a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007484:	643b      	str	r3, [r7, #64]	; 0x40
 8007486:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800748a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e6      	bne.n	8007466 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3308      	adds	r3, #8
 800749e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	e853 3f00 	ldrex	r3, [r3]
 80074a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f023 0301 	bic.w	r3, r3, #1
 80074ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3308      	adds	r3, #8
 80074b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e5      	bne.n	8007498 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d118      	bne.n	8007506 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f023 0310 	bic.w	r3, r3, #16
 80074e8:	647b      	str	r3, [r7, #68]	; 0x44
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074f2:	61bb      	str	r3, [r7, #24]
 80074f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6979      	ldr	r1, [r7, #20]
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e6      	bne.n	80074d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	669a      	str	r2, [r3, #104]	; 0x68
}
 800751a:	bf00      	nop
 800751c:	3754      	adds	r7, #84	; 0x54
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <__cvt>:
 8007526:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800752a:	ec55 4b10 	vmov	r4, r5, d0
 800752e:	2d00      	cmp	r5, #0
 8007530:	460e      	mov	r6, r1
 8007532:	4619      	mov	r1, r3
 8007534:	462b      	mov	r3, r5
 8007536:	bfbb      	ittet	lt
 8007538:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800753c:	461d      	movlt	r5, r3
 800753e:	2300      	movge	r3, #0
 8007540:	232d      	movlt	r3, #45	; 0x2d
 8007542:	700b      	strb	r3, [r1, #0]
 8007544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007546:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800754a:	4691      	mov	r9, r2
 800754c:	f023 0820 	bic.w	r8, r3, #32
 8007550:	bfbc      	itt	lt
 8007552:	4622      	movlt	r2, r4
 8007554:	4614      	movlt	r4, r2
 8007556:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800755a:	d005      	beq.n	8007568 <__cvt+0x42>
 800755c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007560:	d100      	bne.n	8007564 <__cvt+0x3e>
 8007562:	3601      	adds	r6, #1
 8007564:	2102      	movs	r1, #2
 8007566:	e000      	b.n	800756a <__cvt+0x44>
 8007568:	2103      	movs	r1, #3
 800756a:	ab03      	add	r3, sp, #12
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	ab02      	add	r3, sp, #8
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	ec45 4b10 	vmov	d0, r4, r5
 8007576:	4653      	mov	r3, sl
 8007578:	4632      	mov	r2, r6
 800757a:	f000 fe7d 	bl	8008278 <_dtoa_r>
 800757e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007582:	4607      	mov	r7, r0
 8007584:	d102      	bne.n	800758c <__cvt+0x66>
 8007586:	f019 0f01 	tst.w	r9, #1
 800758a:	d022      	beq.n	80075d2 <__cvt+0xac>
 800758c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007590:	eb07 0906 	add.w	r9, r7, r6
 8007594:	d110      	bne.n	80075b8 <__cvt+0x92>
 8007596:	783b      	ldrb	r3, [r7, #0]
 8007598:	2b30      	cmp	r3, #48	; 0x30
 800759a:	d10a      	bne.n	80075b2 <__cvt+0x8c>
 800759c:	2200      	movs	r2, #0
 800759e:	2300      	movs	r3, #0
 80075a0:	4620      	mov	r0, r4
 80075a2:	4629      	mov	r1, r5
 80075a4:	f7f9 fa90 	bl	8000ac8 <__aeabi_dcmpeq>
 80075a8:	b918      	cbnz	r0, 80075b2 <__cvt+0x8c>
 80075aa:	f1c6 0601 	rsb	r6, r6, #1
 80075ae:	f8ca 6000 	str.w	r6, [sl]
 80075b2:	f8da 3000 	ldr.w	r3, [sl]
 80075b6:	4499      	add	r9, r3
 80075b8:	2200      	movs	r2, #0
 80075ba:	2300      	movs	r3, #0
 80075bc:	4620      	mov	r0, r4
 80075be:	4629      	mov	r1, r5
 80075c0:	f7f9 fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80075c4:	b108      	cbz	r0, 80075ca <__cvt+0xa4>
 80075c6:	f8cd 900c 	str.w	r9, [sp, #12]
 80075ca:	2230      	movs	r2, #48	; 0x30
 80075cc:	9b03      	ldr	r3, [sp, #12]
 80075ce:	454b      	cmp	r3, r9
 80075d0:	d307      	bcc.n	80075e2 <__cvt+0xbc>
 80075d2:	9b03      	ldr	r3, [sp, #12]
 80075d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075d6:	1bdb      	subs	r3, r3, r7
 80075d8:	4638      	mov	r0, r7
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	b004      	add	sp, #16
 80075de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e2:	1c59      	adds	r1, r3, #1
 80075e4:	9103      	str	r1, [sp, #12]
 80075e6:	701a      	strb	r2, [r3, #0]
 80075e8:	e7f0      	b.n	80075cc <__cvt+0xa6>

080075ea <__exponent>:
 80075ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ec:	4603      	mov	r3, r0
 80075ee:	2900      	cmp	r1, #0
 80075f0:	bfb8      	it	lt
 80075f2:	4249      	neglt	r1, r1
 80075f4:	f803 2b02 	strb.w	r2, [r3], #2
 80075f8:	bfb4      	ite	lt
 80075fa:	222d      	movlt	r2, #45	; 0x2d
 80075fc:	222b      	movge	r2, #43	; 0x2b
 80075fe:	2909      	cmp	r1, #9
 8007600:	7042      	strb	r2, [r0, #1]
 8007602:	dd2a      	ble.n	800765a <__exponent+0x70>
 8007604:	f10d 0207 	add.w	r2, sp, #7
 8007608:	4617      	mov	r7, r2
 800760a:	260a      	movs	r6, #10
 800760c:	4694      	mov	ip, r2
 800760e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007612:	fb06 1415 	mls	r4, r6, r5, r1
 8007616:	3430      	adds	r4, #48	; 0x30
 8007618:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800761c:	460c      	mov	r4, r1
 800761e:	2c63      	cmp	r4, #99	; 0x63
 8007620:	f102 32ff 	add.w	r2, r2, #4294967295
 8007624:	4629      	mov	r1, r5
 8007626:	dcf1      	bgt.n	800760c <__exponent+0x22>
 8007628:	3130      	adds	r1, #48	; 0x30
 800762a:	f1ac 0402 	sub.w	r4, ip, #2
 800762e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007632:	1c41      	adds	r1, r0, #1
 8007634:	4622      	mov	r2, r4
 8007636:	42ba      	cmp	r2, r7
 8007638:	d30a      	bcc.n	8007650 <__exponent+0x66>
 800763a:	f10d 0209 	add.w	r2, sp, #9
 800763e:	eba2 020c 	sub.w	r2, r2, ip
 8007642:	42bc      	cmp	r4, r7
 8007644:	bf88      	it	hi
 8007646:	2200      	movhi	r2, #0
 8007648:	4413      	add	r3, r2
 800764a:	1a18      	subs	r0, r3, r0
 800764c:	b003      	add	sp, #12
 800764e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007650:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007654:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007658:	e7ed      	b.n	8007636 <__exponent+0x4c>
 800765a:	2330      	movs	r3, #48	; 0x30
 800765c:	3130      	adds	r1, #48	; 0x30
 800765e:	7083      	strb	r3, [r0, #2]
 8007660:	70c1      	strb	r1, [r0, #3]
 8007662:	1d03      	adds	r3, r0, #4
 8007664:	e7f1      	b.n	800764a <__exponent+0x60>
	...

08007668 <_printf_float>:
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	ed2d 8b02 	vpush	{d8}
 8007670:	b08d      	sub	sp, #52	; 0x34
 8007672:	460c      	mov	r4, r1
 8007674:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007678:	4616      	mov	r6, r2
 800767a:	461f      	mov	r7, r3
 800767c:	4605      	mov	r5, r0
 800767e:	f000 fcf9 	bl	8008074 <_localeconv_r>
 8007682:	f8d0 a000 	ldr.w	sl, [r0]
 8007686:	4650      	mov	r0, sl
 8007688:	f7f8 fdf2 	bl	8000270 <strlen>
 800768c:	2300      	movs	r3, #0
 800768e:	930a      	str	r3, [sp, #40]	; 0x28
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	9305      	str	r3, [sp, #20]
 8007694:	f8d8 3000 	ldr.w	r3, [r8]
 8007698:	f894 b018 	ldrb.w	fp, [r4, #24]
 800769c:	3307      	adds	r3, #7
 800769e:	f023 0307 	bic.w	r3, r3, #7
 80076a2:	f103 0208 	add.w	r2, r3, #8
 80076a6:	f8c8 2000 	str.w	r2, [r8]
 80076aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076b2:	9307      	str	r3, [sp, #28]
 80076b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80076b8:	ee08 0a10 	vmov	s16, r0
 80076bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80076c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076c4:	4b9e      	ldr	r3, [pc, #632]	; (8007940 <_printf_float+0x2d8>)
 80076c6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ca:	f7f9 fa2f 	bl	8000b2c <__aeabi_dcmpun>
 80076ce:	bb88      	cbnz	r0, 8007734 <_printf_float+0xcc>
 80076d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076d4:	4b9a      	ldr	r3, [pc, #616]	; (8007940 <_printf_float+0x2d8>)
 80076d6:	f04f 32ff 	mov.w	r2, #4294967295
 80076da:	f7f9 fa09 	bl	8000af0 <__aeabi_dcmple>
 80076de:	bb48      	cbnz	r0, 8007734 <_printf_float+0xcc>
 80076e0:	2200      	movs	r2, #0
 80076e2:	2300      	movs	r3, #0
 80076e4:	4640      	mov	r0, r8
 80076e6:	4649      	mov	r1, r9
 80076e8:	f7f9 f9f8 	bl	8000adc <__aeabi_dcmplt>
 80076ec:	b110      	cbz	r0, 80076f4 <_printf_float+0x8c>
 80076ee:	232d      	movs	r3, #45	; 0x2d
 80076f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076f4:	4a93      	ldr	r2, [pc, #588]	; (8007944 <_printf_float+0x2dc>)
 80076f6:	4b94      	ldr	r3, [pc, #592]	; (8007948 <_printf_float+0x2e0>)
 80076f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80076fc:	bf94      	ite	ls
 80076fe:	4690      	movls	r8, r2
 8007700:	4698      	movhi	r8, r3
 8007702:	2303      	movs	r3, #3
 8007704:	6123      	str	r3, [r4, #16]
 8007706:	9b05      	ldr	r3, [sp, #20]
 8007708:	f023 0304 	bic.w	r3, r3, #4
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	f04f 0900 	mov.w	r9, #0
 8007712:	9700      	str	r7, [sp, #0]
 8007714:	4633      	mov	r3, r6
 8007716:	aa0b      	add	r2, sp, #44	; 0x2c
 8007718:	4621      	mov	r1, r4
 800771a:	4628      	mov	r0, r5
 800771c:	f000 f9da 	bl	8007ad4 <_printf_common>
 8007720:	3001      	adds	r0, #1
 8007722:	f040 8090 	bne.w	8007846 <_printf_float+0x1de>
 8007726:	f04f 30ff 	mov.w	r0, #4294967295
 800772a:	b00d      	add	sp, #52	; 0x34
 800772c:	ecbd 8b02 	vpop	{d8}
 8007730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007734:	4642      	mov	r2, r8
 8007736:	464b      	mov	r3, r9
 8007738:	4640      	mov	r0, r8
 800773a:	4649      	mov	r1, r9
 800773c:	f7f9 f9f6 	bl	8000b2c <__aeabi_dcmpun>
 8007740:	b140      	cbz	r0, 8007754 <_printf_float+0xec>
 8007742:	464b      	mov	r3, r9
 8007744:	2b00      	cmp	r3, #0
 8007746:	bfbc      	itt	lt
 8007748:	232d      	movlt	r3, #45	; 0x2d
 800774a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800774e:	4a7f      	ldr	r2, [pc, #508]	; (800794c <_printf_float+0x2e4>)
 8007750:	4b7f      	ldr	r3, [pc, #508]	; (8007950 <_printf_float+0x2e8>)
 8007752:	e7d1      	b.n	80076f8 <_printf_float+0x90>
 8007754:	6863      	ldr	r3, [r4, #4]
 8007756:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800775a:	9206      	str	r2, [sp, #24]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	d13f      	bne.n	80077e0 <_printf_float+0x178>
 8007760:	2306      	movs	r3, #6
 8007762:	6063      	str	r3, [r4, #4]
 8007764:	9b05      	ldr	r3, [sp, #20]
 8007766:	6861      	ldr	r1, [r4, #4]
 8007768:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800776c:	2300      	movs	r3, #0
 800776e:	9303      	str	r3, [sp, #12]
 8007770:	ab0a      	add	r3, sp, #40	; 0x28
 8007772:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007776:	ab09      	add	r3, sp, #36	; 0x24
 8007778:	ec49 8b10 	vmov	d0, r8, r9
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	6022      	str	r2, [r4, #0]
 8007780:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007784:	4628      	mov	r0, r5
 8007786:	f7ff fece 	bl	8007526 <__cvt>
 800778a:	9b06      	ldr	r3, [sp, #24]
 800778c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800778e:	2b47      	cmp	r3, #71	; 0x47
 8007790:	4680      	mov	r8, r0
 8007792:	d108      	bne.n	80077a6 <_printf_float+0x13e>
 8007794:	1cc8      	adds	r0, r1, #3
 8007796:	db02      	blt.n	800779e <_printf_float+0x136>
 8007798:	6863      	ldr	r3, [r4, #4]
 800779a:	4299      	cmp	r1, r3
 800779c:	dd41      	ble.n	8007822 <_printf_float+0x1ba>
 800779e:	f1ab 0302 	sub.w	r3, fp, #2
 80077a2:	fa5f fb83 	uxtb.w	fp, r3
 80077a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077aa:	d820      	bhi.n	80077ee <_printf_float+0x186>
 80077ac:	3901      	subs	r1, #1
 80077ae:	465a      	mov	r2, fp
 80077b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077b4:	9109      	str	r1, [sp, #36]	; 0x24
 80077b6:	f7ff ff18 	bl	80075ea <__exponent>
 80077ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077bc:	1813      	adds	r3, r2, r0
 80077be:	2a01      	cmp	r2, #1
 80077c0:	4681      	mov	r9, r0
 80077c2:	6123      	str	r3, [r4, #16]
 80077c4:	dc02      	bgt.n	80077cc <_printf_float+0x164>
 80077c6:	6822      	ldr	r2, [r4, #0]
 80077c8:	07d2      	lsls	r2, r2, #31
 80077ca:	d501      	bpl.n	80077d0 <_printf_float+0x168>
 80077cc:	3301      	adds	r3, #1
 80077ce:	6123      	str	r3, [r4, #16]
 80077d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d09c      	beq.n	8007712 <_printf_float+0xaa>
 80077d8:	232d      	movs	r3, #45	; 0x2d
 80077da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077de:	e798      	b.n	8007712 <_printf_float+0xaa>
 80077e0:	9a06      	ldr	r2, [sp, #24]
 80077e2:	2a47      	cmp	r2, #71	; 0x47
 80077e4:	d1be      	bne.n	8007764 <_printf_float+0xfc>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1bc      	bne.n	8007764 <_printf_float+0xfc>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e7b9      	b.n	8007762 <_printf_float+0xfa>
 80077ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80077f2:	d118      	bne.n	8007826 <_printf_float+0x1be>
 80077f4:	2900      	cmp	r1, #0
 80077f6:	6863      	ldr	r3, [r4, #4]
 80077f8:	dd0b      	ble.n	8007812 <_printf_float+0x1aa>
 80077fa:	6121      	str	r1, [r4, #16]
 80077fc:	b913      	cbnz	r3, 8007804 <_printf_float+0x19c>
 80077fe:	6822      	ldr	r2, [r4, #0]
 8007800:	07d0      	lsls	r0, r2, #31
 8007802:	d502      	bpl.n	800780a <_printf_float+0x1a2>
 8007804:	3301      	adds	r3, #1
 8007806:	440b      	add	r3, r1
 8007808:	6123      	str	r3, [r4, #16]
 800780a:	65a1      	str	r1, [r4, #88]	; 0x58
 800780c:	f04f 0900 	mov.w	r9, #0
 8007810:	e7de      	b.n	80077d0 <_printf_float+0x168>
 8007812:	b913      	cbnz	r3, 800781a <_printf_float+0x1b2>
 8007814:	6822      	ldr	r2, [r4, #0]
 8007816:	07d2      	lsls	r2, r2, #31
 8007818:	d501      	bpl.n	800781e <_printf_float+0x1b6>
 800781a:	3302      	adds	r3, #2
 800781c:	e7f4      	b.n	8007808 <_printf_float+0x1a0>
 800781e:	2301      	movs	r3, #1
 8007820:	e7f2      	b.n	8007808 <_printf_float+0x1a0>
 8007822:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007828:	4299      	cmp	r1, r3
 800782a:	db05      	blt.n	8007838 <_printf_float+0x1d0>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	6121      	str	r1, [r4, #16]
 8007830:	07d8      	lsls	r0, r3, #31
 8007832:	d5ea      	bpl.n	800780a <_printf_float+0x1a2>
 8007834:	1c4b      	adds	r3, r1, #1
 8007836:	e7e7      	b.n	8007808 <_printf_float+0x1a0>
 8007838:	2900      	cmp	r1, #0
 800783a:	bfd4      	ite	le
 800783c:	f1c1 0202 	rsble	r2, r1, #2
 8007840:	2201      	movgt	r2, #1
 8007842:	4413      	add	r3, r2
 8007844:	e7e0      	b.n	8007808 <_printf_float+0x1a0>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	055a      	lsls	r2, r3, #21
 800784a:	d407      	bmi.n	800785c <_printf_float+0x1f4>
 800784c:	6923      	ldr	r3, [r4, #16]
 800784e:	4642      	mov	r2, r8
 8007850:	4631      	mov	r1, r6
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	d12c      	bne.n	80078b4 <_printf_float+0x24c>
 800785a:	e764      	b.n	8007726 <_printf_float+0xbe>
 800785c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007860:	f240 80e0 	bls.w	8007a24 <_printf_float+0x3bc>
 8007864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007868:	2200      	movs	r2, #0
 800786a:	2300      	movs	r3, #0
 800786c:	f7f9 f92c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007870:	2800      	cmp	r0, #0
 8007872:	d034      	beq.n	80078de <_printf_float+0x276>
 8007874:	4a37      	ldr	r2, [pc, #220]	; (8007954 <_printf_float+0x2ec>)
 8007876:	2301      	movs	r3, #1
 8007878:	4631      	mov	r1, r6
 800787a:	4628      	mov	r0, r5
 800787c:	47b8      	blx	r7
 800787e:	3001      	adds	r0, #1
 8007880:	f43f af51 	beq.w	8007726 <_printf_float+0xbe>
 8007884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007888:	429a      	cmp	r2, r3
 800788a:	db02      	blt.n	8007892 <_printf_float+0x22a>
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	07d8      	lsls	r0, r3, #31
 8007890:	d510      	bpl.n	80078b4 <_printf_float+0x24c>
 8007892:	ee18 3a10 	vmov	r3, s16
 8007896:	4652      	mov	r2, sl
 8007898:	4631      	mov	r1, r6
 800789a:	4628      	mov	r0, r5
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	f43f af41 	beq.w	8007726 <_printf_float+0xbe>
 80078a4:	f04f 0800 	mov.w	r8, #0
 80078a8:	f104 091a 	add.w	r9, r4, #26
 80078ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ae:	3b01      	subs	r3, #1
 80078b0:	4543      	cmp	r3, r8
 80078b2:	dc09      	bgt.n	80078c8 <_printf_float+0x260>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	079b      	lsls	r3, r3, #30
 80078b8:	f100 8107 	bmi.w	8007aca <_printf_float+0x462>
 80078bc:	68e0      	ldr	r0, [r4, #12]
 80078be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078c0:	4298      	cmp	r0, r3
 80078c2:	bfb8      	it	lt
 80078c4:	4618      	movlt	r0, r3
 80078c6:	e730      	b.n	800772a <_printf_float+0xc2>
 80078c8:	2301      	movs	r3, #1
 80078ca:	464a      	mov	r2, r9
 80078cc:	4631      	mov	r1, r6
 80078ce:	4628      	mov	r0, r5
 80078d0:	47b8      	blx	r7
 80078d2:	3001      	adds	r0, #1
 80078d4:	f43f af27 	beq.w	8007726 <_printf_float+0xbe>
 80078d8:	f108 0801 	add.w	r8, r8, #1
 80078dc:	e7e6      	b.n	80078ac <_printf_float+0x244>
 80078de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dc39      	bgt.n	8007958 <_printf_float+0x2f0>
 80078e4:	4a1b      	ldr	r2, [pc, #108]	; (8007954 <_printf_float+0x2ec>)
 80078e6:	2301      	movs	r3, #1
 80078e8:	4631      	mov	r1, r6
 80078ea:	4628      	mov	r0, r5
 80078ec:	47b8      	blx	r7
 80078ee:	3001      	adds	r0, #1
 80078f0:	f43f af19 	beq.w	8007726 <_printf_float+0xbe>
 80078f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80078f8:	4313      	orrs	r3, r2
 80078fa:	d102      	bne.n	8007902 <_printf_float+0x29a>
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	07d9      	lsls	r1, r3, #31
 8007900:	d5d8      	bpl.n	80078b4 <_printf_float+0x24c>
 8007902:	ee18 3a10 	vmov	r3, s16
 8007906:	4652      	mov	r2, sl
 8007908:	4631      	mov	r1, r6
 800790a:	4628      	mov	r0, r5
 800790c:	47b8      	blx	r7
 800790e:	3001      	adds	r0, #1
 8007910:	f43f af09 	beq.w	8007726 <_printf_float+0xbe>
 8007914:	f04f 0900 	mov.w	r9, #0
 8007918:	f104 0a1a 	add.w	sl, r4, #26
 800791c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800791e:	425b      	negs	r3, r3
 8007920:	454b      	cmp	r3, r9
 8007922:	dc01      	bgt.n	8007928 <_printf_float+0x2c0>
 8007924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007926:	e792      	b.n	800784e <_printf_float+0x1e6>
 8007928:	2301      	movs	r3, #1
 800792a:	4652      	mov	r2, sl
 800792c:	4631      	mov	r1, r6
 800792e:	4628      	mov	r0, r5
 8007930:	47b8      	blx	r7
 8007932:	3001      	adds	r0, #1
 8007934:	f43f aef7 	beq.w	8007726 <_printf_float+0xbe>
 8007938:	f109 0901 	add.w	r9, r9, #1
 800793c:	e7ee      	b.n	800791c <_printf_float+0x2b4>
 800793e:	bf00      	nop
 8007940:	7fefffff 	.word	0x7fefffff
 8007944:	0800ae38 	.word	0x0800ae38
 8007948:	0800ae3c 	.word	0x0800ae3c
 800794c:	0800ae40 	.word	0x0800ae40
 8007950:	0800ae44 	.word	0x0800ae44
 8007954:	0800ae48 	.word	0x0800ae48
 8007958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800795a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800795c:	429a      	cmp	r2, r3
 800795e:	bfa8      	it	ge
 8007960:	461a      	movge	r2, r3
 8007962:	2a00      	cmp	r2, #0
 8007964:	4691      	mov	r9, r2
 8007966:	dc37      	bgt.n	80079d8 <_printf_float+0x370>
 8007968:	f04f 0b00 	mov.w	fp, #0
 800796c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007970:	f104 021a 	add.w	r2, r4, #26
 8007974:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007976:	9305      	str	r3, [sp, #20]
 8007978:	eba3 0309 	sub.w	r3, r3, r9
 800797c:	455b      	cmp	r3, fp
 800797e:	dc33      	bgt.n	80079e8 <_printf_float+0x380>
 8007980:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007984:	429a      	cmp	r2, r3
 8007986:	db3b      	blt.n	8007a00 <_printf_float+0x398>
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	07da      	lsls	r2, r3, #31
 800798c:	d438      	bmi.n	8007a00 <_printf_float+0x398>
 800798e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007992:	eba2 0903 	sub.w	r9, r2, r3
 8007996:	9b05      	ldr	r3, [sp, #20]
 8007998:	1ad2      	subs	r2, r2, r3
 800799a:	4591      	cmp	r9, r2
 800799c:	bfa8      	it	ge
 800799e:	4691      	movge	r9, r2
 80079a0:	f1b9 0f00 	cmp.w	r9, #0
 80079a4:	dc35      	bgt.n	8007a12 <_printf_float+0x3aa>
 80079a6:	f04f 0800 	mov.w	r8, #0
 80079aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079ae:	f104 0a1a 	add.w	sl, r4, #26
 80079b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079b6:	1a9b      	subs	r3, r3, r2
 80079b8:	eba3 0309 	sub.w	r3, r3, r9
 80079bc:	4543      	cmp	r3, r8
 80079be:	f77f af79 	ble.w	80078b4 <_printf_float+0x24c>
 80079c2:	2301      	movs	r3, #1
 80079c4:	4652      	mov	r2, sl
 80079c6:	4631      	mov	r1, r6
 80079c8:	4628      	mov	r0, r5
 80079ca:	47b8      	blx	r7
 80079cc:	3001      	adds	r0, #1
 80079ce:	f43f aeaa 	beq.w	8007726 <_printf_float+0xbe>
 80079d2:	f108 0801 	add.w	r8, r8, #1
 80079d6:	e7ec      	b.n	80079b2 <_printf_float+0x34a>
 80079d8:	4613      	mov	r3, r2
 80079da:	4631      	mov	r1, r6
 80079dc:	4642      	mov	r2, r8
 80079de:	4628      	mov	r0, r5
 80079e0:	47b8      	blx	r7
 80079e2:	3001      	adds	r0, #1
 80079e4:	d1c0      	bne.n	8007968 <_printf_float+0x300>
 80079e6:	e69e      	b.n	8007726 <_printf_float+0xbe>
 80079e8:	2301      	movs	r3, #1
 80079ea:	4631      	mov	r1, r6
 80079ec:	4628      	mov	r0, r5
 80079ee:	9205      	str	r2, [sp, #20]
 80079f0:	47b8      	blx	r7
 80079f2:	3001      	adds	r0, #1
 80079f4:	f43f ae97 	beq.w	8007726 <_printf_float+0xbe>
 80079f8:	9a05      	ldr	r2, [sp, #20]
 80079fa:	f10b 0b01 	add.w	fp, fp, #1
 80079fe:	e7b9      	b.n	8007974 <_printf_float+0x30c>
 8007a00:	ee18 3a10 	vmov	r3, s16
 8007a04:	4652      	mov	r2, sl
 8007a06:	4631      	mov	r1, r6
 8007a08:	4628      	mov	r0, r5
 8007a0a:	47b8      	blx	r7
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	d1be      	bne.n	800798e <_printf_float+0x326>
 8007a10:	e689      	b.n	8007726 <_printf_float+0xbe>
 8007a12:	9a05      	ldr	r2, [sp, #20]
 8007a14:	464b      	mov	r3, r9
 8007a16:	4442      	add	r2, r8
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	47b8      	blx	r7
 8007a1e:	3001      	adds	r0, #1
 8007a20:	d1c1      	bne.n	80079a6 <_printf_float+0x33e>
 8007a22:	e680      	b.n	8007726 <_printf_float+0xbe>
 8007a24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a26:	2a01      	cmp	r2, #1
 8007a28:	dc01      	bgt.n	8007a2e <_printf_float+0x3c6>
 8007a2a:	07db      	lsls	r3, r3, #31
 8007a2c:	d53a      	bpl.n	8007aa4 <_printf_float+0x43c>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4642      	mov	r2, r8
 8007a32:	4631      	mov	r1, r6
 8007a34:	4628      	mov	r0, r5
 8007a36:	47b8      	blx	r7
 8007a38:	3001      	adds	r0, #1
 8007a3a:	f43f ae74 	beq.w	8007726 <_printf_float+0xbe>
 8007a3e:	ee18 3a10 	vmov	r3, s16
 8007a42:	4652      	mov	r2, sl
 8007a44:	4631      	mov	r1, r6
 8007a46:	4628      	mov	r0, r5
 8007a48:	47b8      	blx	r7
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	f43f ae6b 	beq.w	8007726 <_printf_float+0xbe>
 8007a50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a54:	2200      	movs	r2, #0
 8007a56:	2300      	movs	r3, #0
 8007a58:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007a5c:	f7f9 f834 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a60:	b9d8      	cbnz	r0, 8007a9a <_printf_float+0x432>
 8007a62:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007a66:	f108 0201 	add.w	r2, r8, #1
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	47b8      	blx	r7
 8007a70:	3001      	adds	r0, #1
 8007a72:	d10e      	bne.n	8007a92 <_printf_float+0x42a>
 8007a74:	e657      	b.n	8007726 <_printf_float+0xbe>
 8007a76:	2301      	movs	r3, #1
 8007a78:	4652      	mov	r2, sl
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	47b8      	blx	r7
 8007a80:	3001      	adds	r0, #1
 8007a82:	f43f ae50 	beq.w	8007726 <_printf_float+0xbe>
 8007a86:	f108 0801 	add.w	r8, r8, #1
 8007a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	4543      	cmp	r3, r8
 8007a90:	dcf1      	bgt.n	8007a76 <_printf_float+0x40e>
 8007a92:	464b      	mov	r3, r9
 8007a94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a98:	e6da      	b.n	8007850 <_printf_float+0x1e8>
 8007a9a:	f04f 0800 	mov.w	r8, #0
 8007a9e:	f104 0a1a 	add.w	sl, r4, #26
 8007aa2:	e7f2      	b.n	8007a8a <_printf_float+0x422>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	4642      	mov	r2, r8
 8007aa8:	e7df      	b.n	8007a6a <_printf_float+0x402>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	464a      	mov	r2, r9
 8007aae:	4631      	mov	r1, r6
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	47b8      	blx	r7
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	f43f ae36 	beq.w	8007726 <_printf_float+0xbe>
 8007aba:	f108 0801 	add.w	r8, r8, #1
 8007abe:	68e3      	ldr	r3, [r4, #12]
 8007ac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ac2:	1a5b      	subs	r3, r3, r1
 8007ac4:	4543      	cmp	r3, r8
 8007ac6:	dcf0      	bgt.n	8007aaa <_printf_float+0x442>
 8007ac8:	e6f8      	b.n	80078bc <_printf_float+0x254>
 8007aca:	f04f 0800 	mov.w	r8, #0
 8007ace:	f104 0919 	add.w	r9, r4, #25
 8007ad2:	e7f4      	b.n	8007abe <_printf_float+0x456>

08007ad4 <_printf_common>:
 8007ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad8:	4616      	mov	r6, r2
 8007ada:	4699      	mov	r9, r3
 8007adc:	688a      	ldr	r2, [r1, #8]
 8007ade:	690b      	ldr	r3, [r1, #16]
 8007ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	bfb8      	it	lt
 8007ae8:	4613      	movlt	r3, r2
 8007aea:	6033      	str	r3, [r6, #0]
 8007aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007af0:	4607      	mov	r7, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	b10a      	cbz	r2, 8007afa <_printf_common+0x26>
 8007af6:	3301      	adds	r3, #1
 8007af8:	6033      	str	r3, [r6, #0]
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	0699      	lsls	r1, r3, #26
 8007afe:	bf42      	ittt	mi
 8007b00:	6833      	ldrmi	r3, [r6, #0]
 8007b02:	3302      	addmi	r3, #2
 8007b04:	6033      	strmi	r3, [r6, #0]
 8007b06:	6825      	ldr	r5, [r4, #0]
 8007b08:	f015 0506 	ands.w	r5, r5, #6
 8007b0c:	d106      	bne.n	8007b1c <_printf_common+0x48>
 8007b0e:	f104 0a19 	add.w	sl, r4, #25
 8007b12:	68e3      	ldr	r3, [r4, #12]
 8007b14:	6832      	ldr	r2, [r6, #0]
 8007b16:	1a9b      	subs	r3, r3, r2
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	dc26      	bgt.n	8007b6a <_printf_common+0x96>
 8007b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b20:	1e13      	subs	r3, r2, #0
 8007b22:	6822      	ldr	r2, [r4, #0]
 8007b24:	bf18      	it	ne
 8007b26:	2301      	movne	r3, #1
 8007b28:	0692      	lsls	r2, r2, #26
 8007b2a:	d42b      	bmi.n	8007b84 <_printf_common+0xb0>
 8007b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b30:	4649      	mov	r1, r9
 8007b32:	4638      	mov	r0, r7
 8007b34:	47c0      	blx	r8
 8007b36:	3001      	adds	r0, #1
 8007b38:	d01e      	beq.n	8007b78 <_printf_common+0xa4>
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	6922      	ldr	r2, [r4, #16]
 8007b3e:	f003 0306 	and.w	r3, r3, #6
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	bf02      	ittt	eq
 8007b46:	68e5      	ldreq	r5, [r4, #12]
 8007b48:	6833      	ldreq	r3, [r6, #0]
 8007b4a:	1aed      	subeq	r5, r5, r3
 8007b4c:	68a3      	ldr	r3, [r4, #8]
 8007b4e:	bf0c      	ite	eq
 8007b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b54:	2500      	movne	r5, #0
 8007b56:	4293      	cmp	r3, r2
 8007b58:	bfc4      	itt	gt
 8007b5a:	1a9b      	subgt	r3, r3, r2
 8007b5c:	18ed      	addgt	r5, r5, r3
 8007b5e:	2600      	movs	r6, #0
 8007b60:	341a      	adds	r4, #26
 8007b62:	42b5      	cmp	r5, r6
 8007b64:	d11a      	bne.n	8007b9c <_printf_common+0xc8>
 8007b66:	2000      	movs	r0, #0
 8007b68:	e008      	b.n	8007b7c <_printf_common+0xa8>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4652      	mov	r2, sl
 8007b6e:	4649      	mov	r1, r9
 8007b70:	4638      	mov	r0, r7
 8007b72:	47c0      	blx	r8
 8007b74:	3001      	adds	r0, #1
 8007b76:	d103      	bne.n	8007b80 <_printf_common+0xac>
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b80:	3501      	adds	r5, #1
 8007b82:	e7c6      	b.n	8007b12 <_printf_common+0x3e>
 8007b84:	18e1      	adds	r1, r4, r3
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	2030      	movs	r0, #48	; 0x30
 8007b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b8e:	4422      	add	r2, r4
 8007b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b98:	3302      	adds	r3, #2
 8007b9a:	e7c7      	b.n	8007b2c <_printf_common+0x58>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	4622      	mov	r2, r4
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	47c0      	blx	r8
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d0e6      	beq.n	8007b78 <_printf_common+0xa4>
 8007baa:	3601      	adds	r6, #1
 8007bac:	e7d9      	b.n	8007b62 <_printf_common+0x8e>
	...

08007bb0 <_printf_i>:
 8007bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb4:	7e0f      	ldrb	r7, [r1, #24]
 8007bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bb8:	2f78      	cmp	r7, #120	; 0x78
 8007bba:	4691      	mov	r9, r2
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	469a      	mov	sl, r3
 8007bc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bc6:	d807      	bhi.n	8007bd8 <_printf_i+0x28>
 8007bc8:	2f62      	cmp	r7, #98	; 0x62
 8007bca:	d80a      	bhi.n	8007be2 <_printf_i+0x32>
 8007bcc:	2f00      	cmp	r7, #0
 8007bce:	f000 80d4 	beq.w	8007d7a <_printf_i+0x1ca>
 8007bd2:	2f58      	cmp	r7, #88	; 0x58
 8007bd4:	f000 80c0 	beq.w	8007d58 <_printf_i+0x1a8>
 8007bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007be0:	e03a      	b.n	8007c58 <_printf_i+0xa8>
 8007be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007be6:	2b15      	cmp	r3, #21
 8007be8:	d8f6      	bhi.n	8007bd8 <_printf_i+0x28>
 8007bea:	a101      	add	r1, pc, #4	; (adr r1, 8007bf0 <_printf_i+0x40>)
 8007bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bf0:	08007c49 	.word	0x08007c49
 8007bf4:	08007c5d 	.word	0x08007c5d
 8007bf8:	08007bd9 	.word	0x08007bd9
 8007bfc:	08007bd9 	.word	0x08007bd9
 8007c00:	08007bd9 	.word	0x08007bd9
 8007c04:	08007bd9 	.word	0x08007bd9
 8007c08:	08007c5d 	.word	0x08007c5d
 8007c0c:	08007bd9 	.word	0x08007bd9
 8007c10:	08007bd9 	.word	0x08007bd9
 8007c14:	08007bd9 	.word	0x08007bd9
 8007c18:	08007bd9 	.word	0x08007bd9
 8007c1c:	08007d61 	.word	0x08007d61
 8007c20:	08007c89 	.word	0x08007c89
 8007c24:	08007d1b 	.word	0x08007d1b
 8007c28:	08007bd9 	.word	0x08007bd9
 8007c2c:	08007bd9 	.word	0x08007bd9
 8007c30:	08007d83 	.word	0x08007d83
 8007c34:	08007bd9 	.word	0x08007bd9
 8007c38:	08007c89 	.word	0x08007c89
 8007c3c:	08007bd9 	.word	0x08007bd9
 8007c40:	08007bd9 	.word	0x08007bd9
 8007c44:	08007d23 	.word	0x08007d23
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	1d1a      	adds	r2, r3, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	602a      	str	r2, [r5, #0]
 8007c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e09f      	b.n	8007d9c <_printf_i+0x1ec>
 8007c5c:	6820      	ldr	r0, [r4, #0]
 8007c5e:	682b      	ldr	r3, [r5, #0]
 8007c60:	0607      	lsls	r7, r0, #24
 8007c62:	f103 0104 	add.w	r1, r3, #4
 8007c66:	6029      	str	r1, [r5, #0]
 8007c68:	d501      	bpl.n	8007c6e <_printf_i+0xbe>
 8007c6a:	681e      	ldr	r6, [r3, #0]
 8007c6c:	e003      	b.n	8007c76 <_printf_i+0xc6>
 8007c6e:	0646      	lsls	r6, r0, #25
 8007c70:	d5fb      	bpl.n	8007c6a <_printf_i+0xba>
 8007c72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c76:	2e00      	cmp	r6, #0
 8007c78:	da03      	bge.n	8007c82 <_printf_i+0xd2>
 8007c7a:	232d      	movs	r3, #45	; 0x2d
 8007c7c:	4276      	negs	r6, r6
 8007c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c82:	485a      	ldr	r0, [pc, #360]	; (8007dec <_printf_i+0x23c>)
 8007c84:	230a      	movs	r3, #10
 8007c86:	e012      	b.n	8007cae <_printf_i+0xfe>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	6820      	ldr	r0, [r4, #0]
 8007c8c:	1d19      	adds	r1, r3, #4
 8007c8e:	6029      	str	r1, [r5, #0]
 8007c90:	0605      	lsls	r5, r0, #24
 8007c92:	d501      	bpl.n	8007c98 <_printf_i+0xe8>
 8007c94:	681e      	ldr	r6, [r3, #0]
 8007c96:	e002      	b.n	8007c9e <_printf_i+0xee>
 8007c98:	0641      	lsls	r1, r0, #25
 8007c9a:	d5fb      	bpl.n	8007c94 <_printf_i+0xe4>
 8007c9c:	881e      	ldrh	r6, [r3, #0]
 8007c9e:	4853      	ldr	r0, [pc, #332]	; (8007dec <_printf_i+0x23c>)
 8007ca0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ca2:	bf0c      	ite	eq
 8007ca4:	2308      	moveq	r3, #8
 8007ca6:	230a      	movne	r3, #10
 8007ca8:	2100      	movs	r1, #0
 8007caa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cae:	6865      	ldr	r5, [r4, #4]
 8007cb0:	60a5      	str	r5, [r4, #8]
 8007cb2:	2d00      	cmp	r5, #0
 8007cb4:	bfa2      	ittt	ge
 8007cb6:	6821      	ldrge	r1, [r4, #0]
 8007cb8:	f021 0104 	bicge.w	r1, r1, #4
 8007cbc:	6021      	strge	r1, [r4, #0]
 8007cbe:	b90e      	cbnz	r6, 8007cc4 <_printf_i+0x114>
 8007cc0:	2d00      	cmp	r5, #0
 8007cc2:	d04b      	beq.n	8007d5c <_printf_i+0x1ac>
 8007cc4:	4615      	mov	r5, r2
 8007cc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cca:	fb03 6711 	mls	r7, r3, r1, r6
 8007cce:	5dc7      	ldrb	r7, [r0, r7]
 8007cd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cd4:	4637      	mov	r7, r6
 8007cd6:	42bb      	cmp	r3, r7
 8007cd8:	460e      	mov	r6, r1
 8007cda:	d9f4      	bls.n	8007cc6 <_printf_i+0x116>
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d10b      	bne.n	8007cf8 <_printf_i+0x148>
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	07de      	lsls	r6, r3, #31
 8007ce4:	d508      	bpl.n	8007cf8 <_printf_i+0x148>
 8007ce6:	6923      	ldr	r3, [r4, #16]
 8007ce8:	6861      	ldr	r1, [r4, #4]
 8007cea:	4299      	cmp	r1, r3
 8007cec:	bfde      	ittt	le
 8007cee:	2330      	movle	r3, #48	; 0x30
 8007cf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cf8:	1b52      	subs	r2, r2, r5
 8007cfa:	6122      	str	r2, [r4, #16]
 8007cfc:	f8cd a000 	str.w	sl, [sp]
 8007d00:	464b      	mov	r3, r9
 8007d02:	aa03      	add	r2, sp, #12
 8007d04:	4621      	mov	r1, r4
 8007d06:	4640      	mov	r0, r8
 8007d08:	f7ff fee4 	bl	8007ad4 <_printf_common>
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d14a      	bne.n	8007da6 <_printf_i+0x1f6>
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
 8007d14:	b004      	add	sp, #16
 8007d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	f043 0320 	orr.w	r3, r3, #32
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	4833      	ldr	r0, [pc, #204]	; (8007df0 <_printf_i+0x240>)
 8007d24:	2778      	movs	r7, #120	; 0x78
 8007d26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	6829      	ldr	r1, [r5, #0]
 8007d2e:	061f      	lsls	r7, r3, #24
 8007d30:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d34:	d402      	bmi.n	8007d3c <_printf_i+0x18c>
 8007d36:	065f      	lsls	r7, r3, #25
 8007d38:	bf48      	it	mi
 8007d3a:	b2b6      	uxthmi	r6, r6
 8007d3c:	07df      	lsls	r7, r3, #31
 8007d3e:	bf48      	it	mi
 8007d40:	f043 0320 	orrmi.w	r3, r3, #32
 8007d44:	6029      	str	r1, [r5, #0]
 8007d46:	bf48      	it	mi
 8007d48:	6023      	strmi	r3, [r4, #0]
 8007d4a:	b91e      	cbnz	r6, 8007d54 <_printf_i+0x1a4>
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	f023 0320 	bic.w	r3, r3, #32
 8007d52:	6023      	str	r3, [r4, #0]
 8007d54:	2310      	movs	r3, #16
 8007d56:	e7a7      	b.n	8007ca8 <_printf_i+0xf8>
 8007d58:	4824      	ldr	r0, [pc, #144]	; (8007dec <_printf_i+0x23c>)
 8007d5a:	e7e4      	b.n	8007d26 <_printf_i+0x176>
 8007d5c:	4615      	mov	r5, r2
 8007d5e:	e7bd      	b.n	8007cdc <_printf_i+0x12c>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	6826      	ldr	r6, [r4, #0]
 8007d64:	6961      	ldr	r1, [r4, #20]
 8007d66:	1d18      	adds	r0, r3, #4
 8007d68:	6028      	str	r0, [r5, #0]
 8007d6a:	0635      	lsls	r5, r6, #24
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	d501      	bpl.n	8007d74 <_printf_i+0x1c4>
 8007d70:	6019      	str	r1, [r3, #0]
 8007d72:	e002      	b.n	8007d7a <_printf_i+0x1ca>
 8007d74:	0670      	lsls	r0, r6, #25
 8007d76:	d5fb      	bpl.n	8007d70 <_printf_i+0x1c0>
 8007d78:	8019      	strh	r1, [r3, #0]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	6123      	str	r3, [r4, #16]
 8007d7e:	4615      	mov	r5, r2
 8007d80:	e7bc      	b.n	8007cfc <_printf_i+0x14c>
 8007d82:	682b      	ldr	r3, [r5, #0]
 8007d84:	1d1a      	adds	r2, r3, #4
 8007d86:	602a      	str	r2, [r5, #0]
 8007d88:	681d      	ldr	r5, [r3, #0]
 8007d8a:	6862      	ldr	r2, [r4, #4]
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f7f8 fa1e 	bl	80001d0 <memchr>
 8007d94:	b108      	cbz	r0, 8007d9a <_printf_i+0x1ea>
 8007d96:	1b40      	subs	r0, r0, r5
 8007d98:	6060      	str	r0, [r4, #4]
 8007d9a:	6863      	ldr	r3, [r4, #4]
 8007d9c:	6123      	str	r3, [r4, #16]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da4:	e7aa      	b.n	8007cfc <_printf_i+0x14c>
 8007da6:	6923      	ldr	r3, [r4, #16]
 8007da8:	462a      	mov	r2, r5
 8007daa:	4649      	mov	r1, r9
 8007dac:	4640      	mov	r0, r8
 8007dae:	47d0      	blx	sl
 8007db0:	3001      	adds	r0, #1
 8007db2:	d0ad      	beq.n	8007d10 <_printf_i+0x160>
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	079b      	lsls	r3, r3, #30
 8007db8:	d413      	bmi.n	8007de2 <_printf_i+0x232>
 8007dba:	68e0      	ldr	r0, [r4, #12]
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	4298      	cmp	r0, r3
 8007dc0:	bfb8      	it	lt
 8007dc2:	4618      	movlt	r0, r3
 8007dc4:	e7a6      	b.n	8007d14 <_printf_i+0x164>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	4632      	mov	r2, r6
 8007dca:	4649      	mov	r1, r9
 8007dcc:	4640      	mov	r0, r8
 8007dce:	47d0      	blx	sl
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	d09d      	beq.n	8007d10 <_printf_i+0x160>
 8007dd4:	3501      	adds	r5, #1
 8007dd6:	68e3      	ldr	r3, [r4, #12]
 8007dd8:	9903      	ldr	r1, [sp, #12]
 8007dda:	1a5b      	subs	r3, r3, r1
 8007ddc:	42ab      	cmp	r3, r5
 8007dde:	dcf2      	bgt.n	8007dc6 <_printf_i+0x216>
 8007de0:	e7eb      	b.n	8007dba <_printf_i+0x20a>
 8007de2:	2500      	movs	r5, #0
 8007de4:	f104 0619 	add.w	r6, r4, #25
 8007de8:	e7f5      	b.n	8007dd6 <_printf_i+0x226>
 8007dea:	bf00      	nop
 8007dec:	0800ae4a 	.word	0x0800ae4a
 8007df0:	0800ae5b 	.word	0x0800ae5b

08007df4 <std>:
 8007df4:	2300      	movs	r3, #0
 8007df6:	b510      	push	{r4, lr}
 8007df8:	4604      	mov	r4, r0
 8007dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8007dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e02:	6083      	str	r3, [r0, #8]
 8007e04:	8181      	strh	r1, [r0, #12]
 8007e06:	6643      	str	r3, [r0, #100]	; 0x64
 8007e08:	81c2      	strh	r2, [r0, #14]
 8007e0a:	6183      	str	r3, [r0, #24]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	2208      	movs	r2, #8
 8007e10:	305c      	adds	r0, #92	; 0x5c
 8007e12:	f000 f926 	bl	8008062 <memset>
 8007e16:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <std+0x58>)
 8007e18:	6263      	str	r3, [r4, #36]	; 0x24
 8007e1a:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <std+0x5c>)
 8007e1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e1e:	4b0d      	ldr	r3, [pc, #52]	; (8007e54 <std+0x60>)
 8007e20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e22:	4b0d      	ldr	r3, [pc, #52]	; (8007e58 <std+0x64>)
 8007e24:	6323      	str	r3, [r4, #48]	; 0x30
 8007e26:	4b0d      	ldr	r3, [pc, #52]	; (8007e5c <std+0x68>)
 8007e28:	6224      	str	r4, [r4, #32]
 8007e2a:	429c      	cmp	r4, r3
 8007e2c:	d006      	beq.n	8007e3c <std+0x48>
 8007e2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007e32:	4294      	cmp	r4, r2
 8007e34:	d002      	beq.n	8007e3c <std+0x48>
 8007e36:	33d0      	adds	r3, #208	; 0xd0
 8007e38:	429c      	cmp	r4, r3
 8007e3a:	d105      	bne.n	8007e48 <std+0x54>
 8007e3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e44:	f000 b98a 	b.w	800815c <__retarget_lock_init_recursive>
 8007e48:	bd10      	pop	{r4, pc}
 8007e4a:	bf00      	nop
 8007e4c:	08007fdd 	.word	0x08007fdd
 8007e50:	08007fff 	.word	0x08007fff
 8007e54:	08008037 	.word	0x08008037
 8007e58:	0800805b 	.word	0x0800805b
 8007e5c:	20000394 	.word	0x20000394

08007e60 <stdio_exit_handler>:
 8007e60:	4a02      	ldr	r2, [pc, #8]	; (8007e6c <stdio_exit_handler+0xc>)
 8007e62:	4903      	ldr	r1, [pc, #12]	; (8007e70 <stdio_exit_handler+0x10>)
 8007e64:	4803      	ldr	r0, [pc, #12]	; (8007e74 <stdio_exit_handler+0x14>)
 8007e66:	f000 b869 	b.w	8007f3c <_fwalk_sglue>
 8007e6a:	bf00      	nop
 8007e6c:	2000000c 	.word	0x2000000c
 8007e70:	08009d99 	.word	0x08009d99
 8007e74:	20000018 	.word	0x20000018

08007e78 <cleanup_stdio>:
 8007e78:	6841      	ldr	r1, [r0, #4]
 8007e7a:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <cleanup_stdio+0x34>)
 8007e7c:	4299      	cmp	r1, r3
 8007e7e:	b510      	push	{r4, lr}
 8007e80:	4604      	mov	r4, r0
 8007e82:	d001      	beq.n	8007e88 <cleanup_stdio+0x10>
 8007e84:	f001 ff88 	bl	8009d98 <_fflush_r>
 8007e88:	68a1      	ldr	r1, [r4, #8]
 8007e8a:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <cleanup_stdio+0x38>)
 8007e8c:	4299      	cmp	r1, r3
 8007e8e:	d002      	beq.n	8007e96 <cleanup_stdio+0x1e>
 8007e90:	4620      	mov	r0, r4
 8007e92:	f001 ff81 	bl	8009d98 <_fflush_r>
 8007e96:	68e1      	ldr	r1, [r4, #12]
 8007e98:	4b06      	ldr	r3, [pc, #24]	; (8007eb4 <cleanup_stdio+0x3c>)
 8007e9a:	4299      	cmp	r1, r3
 8007e9c:	d004      	beq.n	8007ea8 <cleanup_stdio+0x30>
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea4:	f001 bf78 	b.w	8009d98 <_fflush_r>
 8007ea8:	bd10      	pop	{r4, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000394 	.word	0x20000394
 8007eb0:	200003fc 	.word	0x200003fc
 8007eb4:	20000464 	.word	0x20000464

08007eb8 <global_stdio_init.part.0>:
 8007eb8:	b510      	push	{r4, lr}
 8007eba:	4b0b      	ldr	r3, [pc, #44]	; (8007ee8 <global_stdio_init.part.0+0x30>)
 8007ebc:	4c0b      	ldr	r4, [pc, #44]	; (8007eec <global_stdio_init.part.0+0x34>)
 8007ebe:	4a0c      	ldr	r2, [pc, #48]	; (8007ef0 <global_stdio_init.part.0+0x38>)
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2104      	movs	r1, #4
 8007ec8:	f7ff ff94 	bl	8007df4 <std>
 8007ecc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	2109      	movs	r1, #9
 8007ed4:	f7ff ff8e 	bl	8007df4 <std>
 8007ed8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007edc:	2202      	movs	r2, #2
 8007ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee2:	2112      	movs	r1, #18
 8007ee4:	f7ff bf86 	b.w	8007df4 <std>
 8007ee8:	200004cc 	.word	0x200004cc
 8007eec:	20000394 	.word	0x20000394
 8007ef0:	08007e61 	.word	0x08007e61

08007ef4 <__sfp_lock_acquire>:
 8007ef4:	4801      	ldr	r0, [pc, #4]	; (8007efc <__sfp_lock_acquire+0x8>)
 8007ef6:	f000 b932 	b.w	800815e <__retarget_lock_acquire_recursive>
 8007efa:	bf00      	nop
 8007efc:	200004d5 	.word	0x200004d5

08007f00 <__sfp_lock_release>:
 8007f00:	4801      	ldr	r0, [pc, #4]	; (8007f08 <__sfp_lock_release+0x8>)
 8007f02:	f000 b92d 	b.w	8008160 <__retarget_lock_release_recursive>
 8007f06:	bf00      	nop
 8007f08:	200004d5 	.word	0x200004d5

08007f0c <__sinit>:
 8007f0c:	b510      	push	{r4, lr}
 8007f0e:	4604      	mov	r4, r0
 8007f10:	f7ff fff0 	bl	8007ef4 <__sfp_lock_acquire>
 8007f14:	6a23      	ldr	r3, [r4, #32]
 8007f16:	b11b      	cbz	r3, 8007f20 <__sinit+0x14>
 8007f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f1c:	f7ff bff0 	b.w	8007f00 <__sfp_lock_release>
 8007f20:	4b04      	ldr	r3, [pc, #16]	; (8007f34 <__sinit+0x28>)
 8007f22:	6223      	str	r3, [r4, #32]
 8007f24:	4b04      	ldr	r3, [pc, #16]	; (8007f38 <__sinit+0x2c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1f5      	bne.n	8007f18 <__sinit+0xc>
 8007f2c:	f7ff ffc4 	bl	8007eb8 <global_stdio_init.part.0>
 8007f30:	e7f2      	b.n	8007f18 <__sinit+0xc>
 8007f32:	bf00      	nop
 8007f34:	08007e79 	.word	0x08007e79
 8007f38:	200004cc 	.word	0x200004cc

08007f3c <_fwalk_sglue>:
 8007f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f40:	4607      	mov	r7, r0
 8007f42:	4688      	mov	r8, r1
 8007f44:	4614      	mov	r4, r2
 8007f46:	2600      	movs	r6, #0
 8007f48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f4c:	f1b9 0901 	subs.w	r9, r9, #1
 8007f50:	d505      	bpl.n	8007f5e <_fwalk_sglue+0x22>
 8007f52:	6824      	ldr	r4, [r4, #0]
 8007f54:	2c00      	cmp	r4, #0
 8007f56:	d1f7      	bne.n	8007f48 <_fwalk_sglue+0xc>
 8007f58:	4630      	mov	r0, r6
 8007f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5e:	89ab      	ldrh	r3, [r5, #12]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d907      	bls.n	8007f74 <_fwalk_sglue+0x38>
 8007f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	d003      	beq.n	8007f74 <_fwalk_sglue+0x38>
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	4638      	mov	r0, r7
 8007f70:	47c0      	blx	r8
 8007f72:	4306      	orrs	r6, r0
 8007f74:	3568      	adds	r5, #104	; 0x68
 8007f76:	e7e9      	b.n	8007f4c <_fwalk_sglue+0x10>

08007f78 <iprintf>:
 8007f78:	b40f      	push	{r0, r1, r2, r3}
 8007f7a:	b507      	push	{r0, r1, r2, lr}
 8007f7c:	4906      	ldr	r1, [pc, #24]	; (8007f98 <iprintf+0x20>)
 8007f7e:	ab04      	add	r3, sp, #16
 8007f80:	6808      	ldr	r0, [r1, #0]
 8007f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f86:	6881      	ldr	r1, [r0, #8]
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	f001 fd65 	bl	8009a58 <_vfiprintf_r>
 8007f8e:	b003      	add	sp, #12
 8007f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f94:	b004      	add	sp, #16
 8007f96:	4770      	bx	lr
 8007f98:	20000064 	.word	0x20000064

08007f9c <siprintf>:
 8007f9c:	b40e      	push	{r1, r2, r3}
 8007f9e:	b500      	push	{lr}
 8007fa0:	b09c      	sub	sp, #112	; 0x70
 8007fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8007fa4:	9002      	str	r0, [sp, #8]
 8007fa6:	9006      	str	r0, [sp, #24]
 8007fa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fac:	4809      	ldr	r0, [pc, #36]	; (8007fd4 <siprintf+0x38>)
 8007fae:	9107      	str	r1, [sp, #28]
 8007fb0:	9104      	str	r1, [sp, #16]
 8007fb2:	4909      	ldr	r1, [pc, #36]	; (8007fd8 <siprintf+0x3c>)
 8007fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb8:	9105      	str	r1, [sp, #20]
 8007fba:	6800      	ldr	r0, [r0, #0]
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	a902      	add	r1, sp, #8
 8007fc0:	f001 fc22 	bl	8009808 <_svfiprintf_r>
 8007fc4:	9b02      	ldr	r3, [sp, #8]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	b01c      	add	sp, #112	; 0x70
 8007fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fd0:	b003      	add	sp, #12
 8007fd2:	4770      	bx	lr
 8007fd4:	20000064 	.word	0x20000064
 8007fd8:	ffff0208 	.word	0xffff0208

08007fdc <__sread>:
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	460c      	mov	r4, r1
 8007fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe4:	f000 f86c 	bl	80080c0 <_read_r>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	bfab      	itete	ge
 8007fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fee:	89a3      	ldrhlt	r3, [r4, #12]
 8007ff0:	181b      	addge	r3, r3, r0
 8007ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ff6:	bfac      	ite	ge
 8007ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ffa:	81a3      	strhlt	r3, [r4, #12]
 8007ffc:	bd10      	pop	{r4, pc}

08007ffe <__swrite>:
 8007ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008002:	461f      	mov	r7, r3
 8008004:	898b      	ldrh	r3, [r1, #12]
 8008006:	05db      	lsls	r3, r3, #23
 8008008:	4605      	mov	r5, r0
 800800a:	460c      	mov	r4, r1
 800800c:	4616      	mov	r6, r2
 800800e:	d505      	bpl.n	800801c <__swrite+0x1e>
 8008010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008014:	2302      	movs	r3, #2
 8008016:	2200      	movs	r2, #0
 8008018:	f000 f840 	bl	800809c <_lseek_r>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008026:	81a3      	strh	r3, [r4, #12]
 8008028:	4632      	mov	r2, r6
 800802a:	463b      	mov	r3, r7
 800802c:	4628      	mov	r0, r5
 800802e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008032:	f000 b857 	b.w	80080e4 <_write_r>

08008036 <__sseek>:
 8008036:	b510      	push	{r4, lr}
 8008038:	460c      	mov	r4, r1
 800803a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803e:	f000 f82d 	bl	800809c <_lseek_r>
 8008042:	1c43      	adds	r3, r0, #1
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	bf15      	itete	ne
 8008048:	6560      	strne	r0, [r4, #84]	; 0x54
 800804a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800804e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008052:	81a3      	strheq	r3, [r4, #12]
 8008054:	bf18      	it	ne
 8008056:	81a3      	strhne	r3, [r4, #12]
 8008058:	bd10      	pop	{r4, pc}

0800805a <__sclose>:
 800805a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805e:	f000 b80d 	b.w	800807c <_close_r>

08008062 <memset>:
 8008062:	4402      	add	r2, r0
 8008064:	4603      	mov	r3, r0
 8008066:	4293      	cmp	r3, r2
 8008068:	d100      	bne.n	800806c <memset+0xa>
 800806a:	4770      	bx	lr
 800806c:	f803 1b01 	strb.w	r1, [r3], #1
 8008070:	e7f9      	b.n	8008066 <memset+0x4>
	...

08008074 <_localeconv_r>:
 8008074:	4800      	ldr	r0, [pc, #0]	; (8008078 <_localeconv_r+0x4>)
 8008076:	4770      	bx	lr
 8008078:	20000158 	.word	0x20000158

0800807c <_close_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	4d06      	ldr	r5, [pc, #24]	; (8008098 <_close_r+0x1c>)
 8008080:	2300      	movs	r3, #0
 8008082:	4604      	mov	r4, r0
 8008084:	4608      	mov	r0, r1
 8008086:	602b      	str	r3, [r5, #0]
 8008088:	f7fa f8fe 	bl	8002288 <_close>
 800808c:	1c43      	adds	r3, r0, #1
 800808e:	d102      	bne.n	8008096 <_close_r+0x1a>
 8008090:	682b      	ldr	r3, [r5, #0]
 8008092:	b103      	cbz	r3, 8008096 <_close_r+0x1a>
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	bd38      	pop	{r3, r4, r5, pc}
 8008098:	200004d0 	.word	0x200004d0

0800809c <_lseek_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4d07      	ldr	r5, [pc, #28]	; (80080bc <_lseek_r+0x20>)
 80080a0:	4604      	mov	r4, r0
 80080a2:	4608      	mov	r0, r1
 80080a4:	4611      	mov	r1, r2
 80080a6:	2200      	movs	r2, #0
 80080a8:	602a      	str	r2, [r5, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	f7fa f913 	bl	80022d6 <_lseek>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d102      	bne.n	80080ba <_lseek_r+0x1e>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	b103      	cbz	r3, 80080ba <_lseek_r+0x1e>
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	200004d0 	.word	0x200004d0

080080c0 <_read_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4d07      	ldr	r5, [pc, #28]	; (80080e0 <_read_r+0x20>)
 80080c4:	4604      	mov	r4, r0
 80080c6:	4608      	mov	r0, r1
 80080c8:	4611      	mov	r1, r2
 80080ca:	2200      	movs	r2, #0
 80080cc:	602a      	str	r2, [r5, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f7fa f8a4 	bl	800221c <_read>
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d102      	bne.n	80080de <_read_r+0x1e>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	b103      	cbz	r3, 80080de <_read_r+0x1e>
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	200004d0 	.word	0x200004d0

080080e4 <_write_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4d07      	ldr	r5, [pc, #28]	; (8008104 <_write_r+0x20>)
 80080e8:	4604      	mov	r4, r0
 80080ea:	4608      	mov	r0, r1
 80080ec:	4611      	mov	r1, r2
 80080ee:	2200      	movs	r2, #0
 80080f0:	602a      	str	r2, [r5, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	f7fa f8a6 	bl	8002244 <_write>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_write_r+0x1e>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_write_r+0x1e>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	200004d0 	.word	0x200004d0

08008108 <__errno>:
 8008108:	4b01      	ldr	r3, [pc, #4]	; (8008110 <__errno+0x8>)
 800810a:	6818      	ldr	r0, [r3, #0]
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20000064 	.word	0x20000064

08008114 <__libc_init_array>:
 8008114:	b570      	push	{r4, r5, r6, lr}
 8008116:	4d0d      	ldr	r5, [pc, #52]	; (800814c <__libc_init_array+0x38>)
 8008118:	4c0d      	ldr	r4, [pc, #52]	; (8008150 <__libc_init_array+0x3c>)
 800811a:	1b64      	subs	r4, r4, r5
 800811c:	10a4      	asrs	r4, r4, #2
 800811e:	2600      	movs	r6, #0
 8008120:	42a6      	cmp	r6, r4
 8008122:	d109      	bne.n	8008138 <__libc_init_array+0x24>
 8008124:	4d0b      	ldr	r5, [pc, #44]	; (8008154 <__libc_init_array+0x40>)
 8008126:	4c0c      	ldr	r4, [pc, #48]	; (8008158 <__libc_init_array+0x44>)
 8008128:	f002 f898 	bl	800a25c <_init>
 800812c:	1b64      	subs	r4, r4, r5
 800812e:	10a4      	asrs	r4, r4, #2
 8008130:	2600      	movs	r6, #0
 8008132:	42a6      	cmp	r6, r4
 8008134:	d105      	bne.n	8008142 <__libc_init_array+0x2e>
 8008136:	bd70      	pop	{r4, r5, r6, pc}
 8008138:	f855 3b04 	ldr.w	r3, [r5], #4
 800813c:	4798      	blx	r3
 800813e:	3601      	adds	r6, #1
 8008140:	e7ee      	b.n	8008120 <__libc_init_array+0xc>
 8008142:	f855 3b04 	ldr.w	r3, [r5], #4
 8008146:	4798      	blx	r3
 8008148:	3601      	adds	r6, #1
 800814a:	e7f2      	b.n	8008132 <__libc_init_array+0x1e>
 800814c:	0800b1b4 	.word	0x0800b1b4
 8008150:	0800b1b4 	.word	0x0800b1b4
 8008154:	0800b1b4 	.word	0x0800b1b4
 8008158:	0800b1b8 	.word	0x0800b1b8

0800815c <__retarget_lock_init_recursive>:
 800815c:	4770      	bx	lr

0800815e <__retarget_lock_acquire_recursive>:
 800815e:	4770      	bx	lr

08008160 <__retarget_lock_release_recursive>:
 8008160:	4770      	bx	lr

08008162 <quorem>:
 8008162:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008166:	6903      	ldr	r3, [r0, #16]
 8008168:	690c      	ldr	r4, [r1, #16]
 800816a:	42a3      	cmp	r3, r4
 800816c:	4607      	mov	r7, r0
 800816e:	db7e      	blt.n	800826e <quorem+0x10c>
 8008170:	3c01      	subs	r4, #1
 8008172:	f101 0814 	add.w	r8, r1, #20
 8008176:	f100 0514 	add.w	r5, r0, #20
 800817a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008184:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008188:	3301      	adds	r3, #1
 800818a:	429a      	cmp	r2, r3
 800818c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008190:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008194:	fbb2 f6f3 	udiv	r6, r2, r3
 8008198:	d331      	bcc.n	80081fe <quorem+0x9c>
 800819a:	f04f 0e00 	mov.w	lr, #0
 800819e:	4640      	mov	r0, r8
 80081a0:	46ac      	mov	ip, r5
 80081a2:	46f2      	mov	sl, lr
 80081a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80081a8:	b293      	uxth	r3, r2
 80081aa:	fb06 e303 	mla	r3, r6, r3, lr
 80081ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081b2:	0c1a      	lsrs	r2, r3, #16
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	ebaa 0303 	sub.w	r3, sl, r3
 80081ba:	f8dc a000 	ldr.w	sl, [ip]
 80081be:	fa13 f38a 	uxtah	r3, r3, sl
 80081c2:	fb06 220e 	mla	r2, r6, lr, r2
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	9b00      	ldr	r3, [sp, #0]
 80081ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081ce:	b292      	uxth	r2, r2
 80081d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80081dc:	4581      	cmp	r9, r0
 80081de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081e2:	f84c 3b04 	str.w	r3, [ip], #4
 80081e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081ea:	d2db      	bcs.n	80081a4 <quorem+0x42>
 80081ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80081f0:	b92b      	cbnz	r3, 80081fe <quorem+0x9c>
 80081f2:	9b01      	ldr	r3, [sp, #4]
 80081f4:	3b04      	subs	r3, #4
 80081f6:	429d      	cmp	r5, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	d32c      	bcc.n	8008256 <quorem+0xf4>
 80081fc:	613c      	str	r4, [r7, #16]
 80081fe:	4638      	mov	r0, r7
 8008200:	f001 f9a8 	bl	8009554 <__mcmp>
 8008204:	2800      	cmp	r0, #0
 8008206:	db22      	blt.n	800824e <quorem+0xec>
 8008208:	3601      	adds	r6, #1
 800820a:	4629      	mov	r1, r5
 800820c:	2000      	movs	r0, #0
 800820e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008212:	f8d1 c000 	ldr.w	ip, [r1]
 8008216:	b293      	uxth	r3, r2
 8008218:	1ac3      	subs	r3, r0, r3
 800821a:	0c12      	lsrs	r2, r2, #16
 800821c:	fa13 f38c 	uxtah	r3, r3, ip
 8008220:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008228:	b29b      	uxth	r3, r3
 800822a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800822e:	45c1      	cmp	r9, r8
 8008230:	f841 3b04 	str.w	r3, [r1], #4
 8008234:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008238:	d2e9      	bcs.n	800820e <quorem+0xac>
 800823a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800823e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008242:	b922      	cbnz	r2, 800824e <quorem+0xec>
 8008244:	3b04      	subs	r3, #4
 8008246:	429d      	cmp	r5, r3
 8008248:	461a      	mov	r2, r3
 800824a:	d30a      	bcc.n	8008262 <quorem+0x100>
 800824c:	613c      	str	r4, [r7, #16]
 800824e:	4630      	mov	r0, r6
 8008250:	b003      	add	sp, #12
 8008252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008256:	6812      	ldr	r2, [r2, #0]
 8008258:	3b04      	subs	r3, #4
 800825a:	2a00      	cmp	r2, #0
 800825c:	d1ce      	bne.n	80081fc <quorem+0x9a>
 800825e:	3c01      	subs	r4, #1
 8008260:	e7c9      	b.n	80081f6 <quorem+0x94>
 8008262:	6812      	ldr	r2, [r2, #0]
 8008264:	3b04      	subs	r3, #4
 8008266:	2a00      	cmp	r2, #0
 8008268:	d1f0      	bne.n	800824c <quorem+0xea>
 800826a:	3c01      	subs	r4, #1
 800826c:	e7eb      	b.n	8008246 <quorem+0xe4>
 800826e:	2000      	movs	r0, #0
 8008270:	e7ee      	b.n	8008250 <quorem+0xee>
 8008272:	0000      	movs	r0, r0
 8008274:	0000      	movs	r0, r0
	...

08008278 <_dtoa_r>:
 8008278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	ed2d 8b04 	vpush	{d8-d9}
 8008280:	69c5      	ldr	r5, [r0, #28]
 8008282:	b093      	sub	sp, #76	; 0x4c
 8008284:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008288:	ec57 6b10 	vmov	r6, r7, d0
 800828c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008290:	9107      	str	r1, [sp, #28]
 8008292:	4604      	mov	r4, r0
 8008294:	920a      	str	r2, [sp, #40]	; 0x28
 8008296:	930d      	str	r3, [sp, #52]	; 0x34
 8008298:	b975      	cbnz	r5, 80082b8 <_dtoa_r+0x40>
 800829a:	2010      	movs	r0, #16
 800829c:	f000 fe2a 	bl	8008ef4 <malloc>
 80082a0:	4602      	mov	r2, r0
 80082a2:	61e0      	str	r0, [r4, #28]
 80082a4:	b920      	cbnz	r0, 80082b0 <_dtoa_r+0x38>
 80082a6:	4bae      	ldr	r3, [pc, #696]	; (8008560 <_dtoa_r+0x2e8>)
 80082a8:	21ef      	movs	r1, #239	; 0xef
 80082aa:	48ae      	ldr	r0, [pc, #696]	; (8008564 <_dtoa_r+0x2ec>)
 80082ac:	f001 fe6a 	bl	8009f84 <__assert_func>
 80082b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082b4:	6005      	str	r5, [r0, #0]
 80082b6:	60c5      	str	r5, [r0, #12]
 80082b8:	69e3      	ldr	r3, [r4, #28]
 80082ba:	6819      	ldr	r1, [r3, #0]
 80082bc:	b151      	cbz	r1, 80082d4 <_dtoa_r+0x5c>
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	604a      	str	r2, [r1, #4]
 80082c2:	2301      	movs	r3, #1
 80082c4:	4093      	lsls	r3, r2
 80082c6:	608b      	str	r3, [r1, #8]
 80082c8:	4620      	mov	r0, r4
 80082ca:	f000 ff07 	bl	80090dc <_Bfree>
 80082ce:	69e3      	ldr	r3, [r4, #28]
 80082d0:	2200      	movs	r2, #0
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	1e3b      	subs	r3, r7, #0
 80082d6:	bfbb      	ittet	lt
 80082d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80082dc:	9303      	strlt	r3, [sp, #12]
 80082de:	2300      	movge	r3, #0
 80082e0:	2201      	movlt	r2, #1
 80082e2:	bfac      	ite	ge
 80082e4:	f8c8 3000 	strge.w	r3, [r8]
 80082e8:	f8c8 2000 	strlt.w	r2, [r8]
 80082ec:	4b9e      	ldr	r3, [pc, #632]	; (8008568 <_dtoa_r+0x2f0>)
 80082ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80082f2:	ea33 0308 	bics.w	r3, r3, r8
 80082f6:	d11b      	bne.n	8008330 <_dtoa_r+0xb8>
 80082f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008304:	4333      	orrs	r3, r6
 8008306:	f000 8593 	beq.w	8008e30 <_dtoa_r+0xbb8>
 800830a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800830c:	b963      	cbnz	r3, 8008328 <_dtoa_r+0xb0>
 800830e:	4b97      	ldr	r3, [pc, #604]	; (800856c <_dtoa_r+0x2f4>)
 8008310:	e027      	b.n	8008362 <_dtoa_r+0xea>
 8008312:	4b97      	ldr	r3, [pc, #604]	; (8008570 <_dtoa_r+0x2f8>)
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	3308      	adds	r3, #8
 8008318:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	9800      	ldr	r0, [sp, #0]
 800831e:	b013      	add	sp, #76	; 0x4c
 8008320:	ecbd 8b04 	vpop	{d8-d9}
 8008324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008328:	4b90      	ldr	r3, [pc, #576]	; (800856c <_dtoa_r+0x2f4>)
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	3303      	adds	r3, #3
 800832e:	e7f3      	b.n	8008318 <_dtoa_r+0xa0>
 8008330:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008334:	2200      	movs	r2, #0
 8008336:	ec51 0b17 	vmov	r0, r1, d7
 800833a:	eeb0 8a47 	vmov.f32	s16, s14
 800833e:	eef0 8a67 	vmov.f32	s17, s15
 8008342:	2300      	movs	r3, #0
 8008344:	f7f8 fbc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008348:	4681      	mov	r9, r0
 800834a:	b160      	cbz	r0, 8008366 <_dtoa_r+0xee>
 800834c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800834e:	2301      	movs	r3, #1
 8008350:	6013      	str	r3, [r2, #0]
 8008352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 8568 	beq.w	8008e2a <_dtoa_r+0xbb2>
 800835a:	4b86      	ldr	r3, [pc, #536]	; (8008574 <_dtoa_r+0x2fc>)
 800835c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800835e:	6013      	str	r3, [r2, #0]
 8008360:	3b01      	subs	r3, #1
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	e7da      	b.n	800831c <_dtoa_r+0xa4>
 8008366:	aa10      	add	r2, sp, #64	; 0x40
 8008368:	a911      	add	r1, sp, #68	; 0x44
 800836a:	4620      	mov	r0, r4
 800836c:	eeb0 0a48 	vmov.f32	s0, s16
 8008370:	eef0 0a68 	vmov.f32	s1, s17
 8008374:	f001 f994 	bl	80096a0 <__d2b>
 8008378:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800837c:	4682      	mov	sl, r0
 800837e:	2d00      	cmp	r5, #0
 8008380:	d07f      	beq.n	8008482 <_dtoa_r+0x20a>
 8008382:	ee18 3a90 	vmov	r3, s17
 8008386:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800838a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800838e:	ec51 0b18 	vmov	r0, r1, d8
 8008392:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008396:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800839a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800839e:	4619      	mov	r1, r3
 80083a0:	2200      	movs	r2, #0
 80083a2:	4b75      	ldr	r3, [pc, #468]	; (8008578 <_dtoa_r+0x300>)
 80083a4:	f7f7 ff70 	bl	8000288 <__aeabi_dsub>
 80083a8:	a367      	add	r3, pc, #412	; (adr r3, 8008548 <_dtoa_r+0x2d0>)
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	f7f8 f923 	bl	80005f8 <__aeabi_dmul>
 80083b2:	a367      	add	r3, pc, #412	; (adr r3, 8008550 <_dtoa_r+0x2d8>)
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	f7f7 ff68 	bl	800028c <__adddf3>
 80083bc:	4606      	mov	r6, r0
 80083be:	4628      	mov	r0, r5
 80083c0:	460f      	mov	r7, r1
 80083c2:	f7f8 f8af 	bl	8000524 <__aeabi_i2d>
 80083c6:	a364      	add	r3, pc, #400	; (adr r3, 8008558 <_dtoa_r+0x2e0>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f7f8 f914 	bl	80005f8 <__aeabi_dmul>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	f7f7 ff58 	bl	800028c <__adddf3>
 80083dc:	4606      	mov	r6, r0
 80083de:	460f      	mov	r7, r1
 80083e0:	f7f8 fbba 	bl	8000b58 <__aeabi_d2iz>
 80083e4:	2200      	movs	r2, #0
 80083e6:	4683      	mov	fp, r0
 80083e8:	2300      	movs	r3, #0
 80083ea:	4630      	mov	r0, r6
 80083ec:	4639      	mov	r1, r7
 80083ee:	f7f8 fb75 	bl	8000adc <__aeabi_dcmplt>
 80083f2:	b148      	cbz	r0, 8008408 <_dtoa_r+0x190>
 80083f4:	4658      	mov	r0, fp
 80083f6:	f7f8 f895 	bl	8000524 <__aeabi_i2d>
 80083fa:	4632      	mov	r2, r6
 80083fc:	463b      	mov	r3, r7
 80083fe:	f7f8 fb63 	bl	8000ac8 <__aeabi_dcmpeq>
 8008402:	b908      	cbnz	r0, 8008408 <_dtoa_r+0x190>
 8008404:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008408:	f1bb 0f16 	cmp.w	fp, #22
 800840c:	d857      	bhi.n	80084be <_dtoa_r+0x246>
 800840e:	4b5b      	ldr	r3, [pc, #364]	; (800857c <_dtoa_r+0x304>)
 8008410:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	ec51 0b18 	vmov	r0, r1, d8
 800841c:	f7f8 fb5e 	bl	8000adc <__aeabi_dcmplt>
 8008420:	2800      	cmp	r0, #0
 8008422:	d04e      	beq.n	80084c2 <_dtoa_r+0x24a>
 8008424:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008428:	2300      	movs	r3, #0
 800842a:	930c      	str	r3, [sp, #48]	; 0x30
 800842c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800842e:	1b5b      	subs	r3, r3, r5
 8008430:	1e5a      	subs	r2, r3, #1
 8008432:	bf45      	ittet	mi
 8008434:	f1c3 0301 	rsbmi	r3, r3, #1
 8008438:	9305      	strmi	r3, [sp, #20]
 800843a:	2300      	movpl	r3, #0
 800843c:	2300      	movmi	r3, #0
 800843e:	9206      	str	r2, [sp, #24]
 8008440:	bf54      	ite	pl
 8008442:	9305      	strpl	r3, [sp, #20]
 8008444:	9306      	strmi	r3, [sp, #24]
 8008446:	f1bb 0f00 	cmp.w	fp, #0
 800844a:	db3c      	blt.n	80084c6 <_dtoa_r+0x24e>
 800844c:	9b06      	ldr	r3, [sp, #24]
 800844e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008452:	445b      	add	r3, fp
 8008454:	9306      	str	r3, [sp, #24]
 8008456:	2300      	movs	r3, #0
 8008458:	9308      	str	r3, [sp, #32]
 800845a:	9b07      	ldr	r3, [sp, #28]
 800845c:	2b09      	cmp	r3, #9
 800845e:	d868      	bhi.n	8008532 <_dtoa_r+0x2ba>
 8008460:	2b05      	cmp	r3, #5
 8008462:	bfc4      	itt	gt
 8008464:	3b04      	subgt	r3, #4
 8008466:	9307      	strgt	r3, [sp, #28]
 8008468:	9b07      	ldr	r3, [sp, #28]
 800846a:	f1a3 0302 	sub.w	r3, r3, #2
 800846e:	bfcc      	ite	gt
 8008470:	2500      	movgt	r5, #0
 8008472:	2501      	movle	r5, #1
 8008474:	2b03      	cmp	r3, #3
 8008476:	f200 8085 	bhi.w	8008584 <_dtoa_r+0x30c>
 800847a:	e8df f003 	tbb	[pc, r3]
 800847e:	3b2e      	.short	0x3b2e
 8008480:	5839      	.short	0x5839
 8008482:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008486:	441d      	add	r5, r3
 8008488:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800848c:	2b20      	cmp	r3, #32
 800848e:	bfc1      	itttt	gt
 8008490:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008494:	fa08 f803 	lslgt.w	r8, r8, r3
 8008498:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800849c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80084a0:	bfd6      	itet	le
 80084a2:	f1c3 0320 	rsble	r3, r3, #32
 80084a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80084aa:	fa06 f003 	lslle.w	r0, r6, r3
 80084ae:	f7f8 f829 	bl	8000504 <__aeabi_ui2d>
 80084b2:	2201      	movs	r2, #1
 80084b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80084b8:	3d01      	subs	r5, #1
 80084ba:	920e      	str	r2, [sp, #56]	; 0x38
 80084bc:	e76f      	b.n	800839e <_dtoa_r+0x126>
 80084be:	2301      	movs	r3, #1
 80084c0:	e7b3      	b.n	800842a <_dtoa_r+0x1b2>
 80084c2:	900c      	str	r0, [sp, #48]	; 0x30
 80084c4:	e7b2      	b.n	800842c <_dtoa_r+0x1b4>
 80084c6:	9b05      	ldr	r3, [sp, #20]
 80084c8:	eba3 030b 	sub.w	r3, r3, fp
 80084cc:	9305      	str	r3, [sp, #20]
 80084ce:	f1cb 0300 	rsb	r3, fp, #0
 80084d2:	9308      	str	r3, [sp, #32]
 80084d4:	2300      	movs	r3, #0
 80084d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80084d8:	e7bf      	b.n	800845a <_dtoa_r+0x1e2>
 80084da:	2300      	movs	r3, #0
 80084dc:	9309      	str	r3, [sp, #36]	; 0x24
 80084de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	dc52      	bgt.n	800858a <_dtoa_r+0x312>
 80084e4:	2301      	movs	r3, #1
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	9304      	str	r3, [sp, #16]
 80084ea:	461a      	mov	r2, r3
 80084ec:	920a      	str	r2, [sp, #40]	; 0x28
 80084ee:	e00b      	b.n	8008508 <_dtoa_r+0x290>
 80084f0:	2301      	movs	r3, #1
 80084f2:	e7f3      	b.n	80084dc <_dtoa_r+0x264>
 80084f4:	2300      	movs	r3, #0
 80084f6:	9309      	str	r3, [sp, #36]	; 0x24
 80084f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084fa:	445b      	add	r3, fp
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	3301      	adds	r3, #1
 8008500:	2b01      	cmp	r3, #1
 8008502:	9304      	str	r3, [sp, #16]
 8008504:	bfb8      	it	lt
 8008506:	2301      	movlt	r3, #1
 8008508:	69e0      	ldr	r0, [r4, #28]
 800850a:	2100      	movs	r1, #0
 800850c:	2204      	movs	r2, #4
 800850e:	f102 0614 	add.w	r6, r2, #20
 8008512:	429e      	cmp	r6, r3
 8008514:	d93d      	bls.n	8008592 <_dtoa_r+0x31a>
 8008516:	6041      	str	r1, [r0, #4]
 8008518:	4620      	mov	r0, r4
 800851a:	f000 fd9f 	bl	800905c <_Balloc>
 800851e:	9000      	str	r0, [sp, #0]
 8008520:	2800      	cmp	r0, #0
 8008522:	d139      	bne.n	8008598 <_dtoa_r+0x320>
 8008524:	4b16      	ldr	r3, [pc, #88]	; (8008580 <_dtoa_r+0x308>)
 8008526:	4602      	mov	r2, r0
 8008528:	f240 11af 	movw	r1, #431	; 0x1af
 800852c:	e6bd      	b.n	80082aa <_dtoa_r+0x32>
 800852e:	2301      	movs	r3, #1
 8008530:	e7e1      	b.n	80084f6 <_dtoa_r+0x27e>
 8008532:	2501      	movs	r5, #1
 8008534:	2300      	movs	r3, #0
 8008536:	9307      	str	r3, [sp, #28]
 8008538:	9509      	str	r5, [sp, #36]	; 0x24
 800853a:	f04f 33ff 	mov.w	r3, #4294967295
 800853e:	9301      	str	r3, [sp, #4]
 8008540:	9304      	str	r3, [sp, #16]
 8008542:	2200      	movs	r2, #0
 8008544:	2312      	movs	r3, #18
 8008546:	e7d1      	b.n	80084ec <_dtoa_r+0x274>
 8008548:	636f4361 	.word	0x636f4361
 800854c:	3fd287a7 	.word	0x3fd287a7
 8008550:	8b60c8b3 	.word	0x8b60c8b3
 8008554:	3fc68a28 	.word	0x3fc68a28
 8008558:	509f79fb 	.word	0x509f79fb
 800855c:	3fd34413 	.word	0x3fd34413
 8008560:	0800ae79 	.word	0x0800ae79
 8008564:	0800ae90 	.word	0x0800ae90
 8008568:	7ff00000 	.word	0x7ff00000
 800856c:	0800ae75 	.word	0x0800ae75
 8008570:	0800ae6c 	.word	0x0800ae6c
 8008574:	0800ae49 	.word	0x0800ae49
 8008578:	3ff80000 	.word	0x3ff80000
 800857c:	0800af80 	.word	0x0800af80
 8008580:	0800aee8 	.word	0x0800aee8
 8008584:	2301      	movs	r3, #1
 8008586:	9309      	str	r3, [sp, #36]	; 0x24
 8008588:	e7d7      	b.n	800853a <_dtoa_r+0x2c2>
 800858a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	9304      	str	r3, [sp, #16]
 8008590:	e7ba      	b.n	8008508 <_dtoa_r+0x290>
 8008592:	3101      	adds	r1, #1
 8008594:	0052      	lsls	r2, r2, #1
 8008596:	e7ba      	b.n	800850e <_dtoa_r+0x296>
 8008598:	69e3      	ldr	r3, [r4, #28]
 800859a:	9a00      	ldr	r2, [sp, #0]
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	9b04      	ldr	r3, [sp, #16]
 80085a0:	2b0e      	cmp	r3, #14
 80085a2:	f200 80a8 	bhi.w	80086f6 <_dtoa_r+0x47e>
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	f000 80a5 	beq.w	80086f6 <_dtoa_r+0x47e>
 80085ac:	f1bb 0f00 	cmp.w	fp, #0
 80085b0:	dd38      	ble.n	8008624 <_dtoa_r+0x3ac>
 80085b2:	4bc0      	ldr	r3, [pc, #768]	; (80088b4 <_dtoa_r+0x63c>)
 80085b4:	f00b 020f 	and.w	r2, fp, #15
 80085b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80085c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80085c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80085c8:	d019      	beq.n	80085fe <_dtoa_r+0x386>
 80085ca:	4bbb      	ldr	r3, [pc, #748]	; (80088b8 <_dtoa_r+0x640>)
 80085cc:	ec51 0b18 	vmov	r0, r1, d8
 80085d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085d4:	f7f8 f93a 	bl	800084c <__aeabi_ddiv>
 80085d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085dc:	f008 080f 	and.w	r8, r8, #15
 80085e0:	2503      	movs	r5, #3
 80085e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80088b8 <_dtoa_r+0x640>
 80085e6:	f1b8 0f00 	cmp.w	r8, #0
 80085ea:	d10a      	bne.n	8008602 <_dtoa_r+0x38a>
 80085ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085f0:	4632      	mov	r2, r6
 80085f2:	463b      	mov	r3, r7
 80085f4:	f7f8 f92a 	bl	800084c <__aeabi_ddiv>
 80085f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085fc:	e02b      	b.n	8008656 <_dtoa_r+0x3de>
 80085fe:	2502      	movs	r5, #2
 8008600:	e7ef      	b.n	80085e2 <_dtoa_r+0x36a>
 8008602:	f018 0f01 	tst.w	r8, #1
 8008606:	d008      	beq.n	800861a <_dtoa_r+0x3a2>
 8008608:	4630      	mov	r0, r6
 800860a:	4639      	mov	r1, r7
 800860c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008610:	f7f7 fff2 	bl	80005f8 <__aeabi_dmul>
 8008614:	3501      	adds	r5, #1
 8008616:	4606      	mov	r6, r0
 8008618:	460f      	mov	r7, r1
 800861a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800861e:	f109 0908 	add.w	r9, r9, #8
 8008622:	e7e0      	b.n	80085e6 <_dtoa_r+0x36e>
 8008624:	f000 809f 	beq.w	8008766 <_dtoa_r+0x4ee>
 8008628:	f1cb 0600 	rsb	r6, fp, #0
 800862c:	4ba1      	ldr	r3, [pc, #644]	; (80088b4 <_dtoa_r+0x63c>)
 800862e:	4fa2      	ldr	r7, [pc, #648]	; (80088b8 <_dtoa_r+0x640>)
 8008630:	f006 020f 	and.w	r2, r6, #15
 8008634:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	ec51 0b18 	vmov	r0, r1, d8
 8008640:	f7f7 ffda 	bl	80005f8 <__aeabi_dmul>
 8008644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008648:	1136      	asrs	r6, r6, #4
 800864a:	2300      	movs	r3, #0
 800864c:	2502      	movs	r5, #2
 800864e:	2e00      	cmp	r6, #0
 8008650:	d17e      	bne.n	8008750 <_dtoa_r+0x4d8>
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1d0      	bne.n	80085f8 <_dtoa_r+0x380>
 8008656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008658:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 8084 	beq.w	800876a <_dtoa_r+0x4f2>
 8008662:	4b96      	ldr	r3, [pc, #600]	; (80088bc <_dtoa_r+0x644>)
 8008664:	2200      	movs	r2, #0
 8008666:	4640      	mov	r0, r8
 8008668:	4649      	mov	r1, r9
 800866a:	f7f8 fa37 	bl	8000adc <__aeabi_dcmplt>
 800866e:	2800      	cmp	r0, #0
 8008670:	d07b      	beq.n	800876a <_dtoa_r+0x4f2>
 8008672:	9b04      	ldr	r3, [sp, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d078      	beq.n	800876a <_dtoa_r+0x4f2>
 8008678:	9b01      	ldr	r3, [sp, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	dd39      	ble.n	80086f2 <_dtoa_r+0x47a>
 800867e:	4b90      	ldr	r3, [pc, #576]	; (80088c0 <_dtoa_r+0x648>)
 8008680:	2200      	movs	r2, #0
 8008682:	4640      	mov	r0, r8
 8008684:	4649      	mov	r1, r9
 8008686:	f7f7 ffb7 	bl	80005f8 <__aeabi_dmul>
 800868a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800868e:	9e01      	ldr	r6, [sp, #4]
 8008690:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008694:	3501      	adds	r5, #1
 8008696:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800869a:	4628      	mov	r0, r5
 800869c:	f7f7 ff42 	bl	8000524 <__aeabi_i2d>
 80086a0:	4642      	mov	r2, r8
 80086a2:	464b      	mov	r3, r9
 80086a4:	f7f7 ffa8 	bl	80005f8 <__aeabi_dmul>
 80086a8:	4b86      	ldr	r3, [pc, #536]	; (80088c4 <_dtoa_r+0x64c>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	f7f7 fdee 	bl	800028c <__adddf3>
 80086b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80086b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086b8:	9303      	str	r3, [sp, #12]
 80086ba:	2e00      	cmp	r6, #0
 80086bc:	d158      	bne.n	8008770 <_dtoa_r+0x4f8>
 80086be:	4b82      	ldr	r3, [pc, #520]	; (80088c8 <_dtoa_r+0x650>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	4640      	mov	r0, r8
 80086c4:	4649      	mov	r1, r9
 80086c6:	f7f7 fddf 	bl	8000288 <__aeabi_dsub>
 80086ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086ce:	4680      	mov	r8, r0
 80086d0:	4689      	mov	r9, r1
 80086d2:	f7f8 fa21 	bl	8000b18 <__aeabi_dcmpgt>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	f040 8296 	bne.w	8008c08 <_dtoa_r+0x990>
 80086dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80086e0:	4640      	mov	r0, r8
 80086e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086e6:	4649      	mov	r1, r9
 80086e8:	f7f8 f9f8 	bl	8000adc <__aeabi_dcmplt>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	f040 8289 	bne.w	8008c04 <_dtoa_r+0x98c>
 80086f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80086f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f2c0 814e 	blt.w	800899a <_dtoa_r+0x722>
 80086fe:	f1bb 0f0e 	cmp.w	fp, #14
 8008702:	f300 814a 	bgt.w	800899a <_dtoa_r+0x722>
 8008706:	4b6b      	ldr	r3, [pc, #428]	; (80088b4 <_dtoa_r+0x63c>)
 8008708:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800870c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008712:	2b00      	cmp	r3, #0
 8008714:	f280 80dc 	bge.w	80088d0 <_dtoa_r+0x658>
 8008718:	9b04      	ldr	r3, [sp, #16]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f300 80d8 	bgt.w	80088d0 <_dtoa_r+0x658>
 8008720:	f040 826f 	bne.w	8008c02 <_dtoa_r+0x98a>
 8008724:	4b68      	ldr	r3, [pc, #416]	; (80088c8 <_dtoa_r+0x650>)
 8008726:	2200      	movs	r2, #0
 8008728:	4640      	mov	r0, r8
 800872a:	4649      	mov	r1, r9
 800872c:	f7f7 ff64 	bl	80005f8 <__aeabi_dmul>
 8008730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008734:	f7f8 f9e6 	bl	8000b04 <__aeabi_dcmpge>
 8008738:	9e04      	ldr	r6, [sp, #16]
 800873a:	4637      	mov	r7, r6
 800873c:	2800      	cmp	r0, #0
 800873e:	f040 8245 	bne.w	8008bcc <_dtoa_r+0x954>
 8008742:	9d00      	ldr	r5, [sp, #0]
 8008744:	2331      	movs	r3, #49	; 0x31
 8008746:	f805 3b01 	strb.w	r3, [r5], #1
 800874a:	f10b 0b01 	add.w	fp, fp, #1
 800874e:	e241      	b.n	8008bd4 <_dtoa_r+0x95c>
 8008750:	07f2      	lsls	r2, r6, #31
 8008752:	d505      	bpl.n	8008760 <_dtoa_r+0x4e8>
 8008754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008758:	f7f7 ff4e 	bl	80005f8 <__aeabi_dmul>
 800875c:	3501      	adds	r5, #1
 800875e:	2301      	movs	r3, #1
 8008760:	1076      	asrs	r6, r6, #1
 8008762:	3708      	adds	r7, #8
 8008764:	e773      	b.n	800864e <_dtoa_r+0x3d6>
 8008766:	2502      	movs	r5, #2
 8008768:	e775      	b.n	8008656 <_dtoa_r+0x3de>
 800876a:	9e04      	ldr	r6, [sp, #16]
 800876c:	465f      	mov	r7, fp
 800876e:	e792      	b.n	8008696 <_dtoa_r+0x41e>
 8008770:	9900      	ldr	r1, [sp, #0]
 8008772:	4b50      	ldr	r3, [pc, #320]	; (80088b4 <_dtoa_r+0x63c>)
 8008774:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008778:	4431      	add	r1, r6
 800877a:	9102      	str	r1, [sp, #8]
 800877c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800877e:	eeb0 9a47 	vmov.f32	s18, s14
 8008782:	eef0 9a67 	vmov.f32	s19, s15
 8008786:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800878a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800878e:	2900      	cmp	r1, #0
 8008790:	d044      	beq.n	800881c <_dtoa_r+0x5a4>
 8008792:	494e      	ldr	r1, [pc, #312]	; (80088cc <_dtoa_r+0x654>)
 8008794:	2000      	movs	r0, #0
 8008796:	f7f8 f859 	bl	800084c <__aeabi_ddiv>
 800879a:	ec53 2b19 	vmov	r2, r3, d9
 800879e:	f7f7 fd73 	bl	8000288 <__aeabi_dsub>
 80087a2:	9d00      	ldr	r5, [sp, #0]
 80087a4:	ec41 0b19 	vmov	d9, r0, r1
 80087a8:	4649      	mov	r1, r9
 80087aa:	4640      	mov	r0, r8
 80087ac:	f7f8 f9d4 	bl	8000b58 <__aeabi_d2iz>
 80087b0:	4606      	mov	r6, r0
 80087b2:	f7f7 feb7 	bl	8000524 <__aeabi_i2d>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4640      	mov	r0, r8
 80087bc:	4649      	mov	r1, r9
 80087be:	f7f7 fd63 	bl	8000288 <__aeabi_dsub>
 80087c2:	3630      	adds	r6, #48	; 0x30
 80087c4:	f805 6b01 	strb.w	r6, [r5], #1
 80087c8:	ec53 2b19 	vmov	r2, r3, d9
 80087cc:	4680      	mov	r8, r0
 80087ce:	4689      	mov	r9, r1
 80087d0:	f7f8 f984 	bl	8000adc <__aeabi_dcmplt>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d164      	bne.n	80088a2 <_dtoa_r+0x62a>
 80087d8:	4642      	mov	r2, r8
 80087da:	464b      	mov	r3, r9
 80087dc:	4937      	ldr	r1, [pc, #220]	; (80088bc <_dtoa_r+0x644>)
 80087de:	2000      	movs	r0, #0
 80087e0:	f7f7 fd52 	bl	8000288 <__aeabi_dsub>
 80087e4:	ec53 2b19 	vmov	r2, r3, d9
 80087e8:	f7f8 f978 	bl	8000adc <__aeabi_dcmplt>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	f040 80b6 	bne.w	800895e <_dtoa_r+0x6e6>
 80087f2:	9b02      	ldr	r3, [sp, #8]
 80087f4:	429d      	cmp	r5, r3
 80087f6:	f43f af7c 	beq.w	80086f2 <_dtoa_r+0x47a>
 80087fa:	4b31      	ldr	r3, [pc, #196]	; (80088c0 <_dtoa_r+0x648>)
 80087fc:	ec51 0b19 	vmov	r0, r1, d9
 8008800:	2200      	movs	r2, #0
 8008802:	f7f7 fef9 	bl	80005f8 <__aeabi_dmul>
 8008806:	4b2e      	ldr	r3, [pc, #184]	; (80088c0 <_dtoa_r+0x648>)
 8008808:	ec41 0b19 	vmov	d9, r0, r1
 800880c:	2200      	movs	r2, #0
 800880e:	4640      	mov	r0, r8
 8008810:	4649      	mov	r1, r9
 8008812:	f7f7 fef1 	bl	80005f8 <__aeabi_dmul>
 8008816:	4680      	mov	r8, r0
 8008818:	4689      	mov	r9, r1
 800881a:	e7c5      	b.n	80087a8 <_dtoa_r+0x530>
 800881c:	ec51 0b17 	vmov	r0, r1, d7
 8008820:	f7f7 feea 	bl	80005f8 <__aeabi_dmul>
 8008824:	9b02      	ldr	r3, [sp, #8]
 8008826:	9d00      	ldr	r5, [sp, #0]
 8008828:	930f      	str	r3, [sp, #60]	; 0x3c
 800882a:	ec41 0b19 	vmov	d9, r0, r1
 800882e:	4649      	mov	r1, r9
 8008830:	4640      	mov	r0, r8
 8008832:	f7f8 f991 	bl	8000b58 <__aeabi_d2iz>
 8008836:	4606      	mov	r6, r0
 8008838:	f7f7 fe74 	bl	8000524 <__aeabi_i2d>
 800883c:	3630      	adds	r6, #48	; 0x30
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4640      	mov	r0, r8
 8008844:	4649      	mov	r1, r9
 8008846:	f7f7 fd1f 	bl	8000288 <__aeabi_dsub>
 800884a:	f805 6b01 	strb.w	r6, [r5], #1
 800884e:	9b02      	ldr	r3, [sp, #8]
 8008850:	429d      	cmp	r5, r3
 8008852:	4680      	mov	r8, r0
 8008854:	4689      	mov	r9, r1
 8008856:	f04f 0200 	mov.w	r2, #0
 800885a:	d124      	bne.n	80088a6 <_dtoa_r+0x62e>
 800885c:	4b1b      	ldr	r3, [pc, #108]	; (80088cc <_dtoa_r+0x654>)
 800885e:	ec51 0b19 	vmov	r0, r1, d9
 8008862:	f7f7 fd13 	bl	800028c <__adddf3>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	4640      	mov	r0, r8
 800886c:	4649      	mov	r1, r9
 800886e:	f7f8 f953 	bl	8000b18 <__aeabi_dcmpgt>
 8008872:	2800      	cmp	r0, #0
 8008874:	d173      	bne.n	800895e <_dtoa_r+0x6e6>
 8008876:	ec53 2b19 	vmov	r2, r3, d9
 800887a:	4914      	ldr	r1, [pc, #80]	; (80088cc <_dtoa_r+0x654>)
 800887c:	2000      	movs	r0, #0
 800887e:	f7f7 fd03 	bl	8000288 <__aeabi_dsub>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4640      	mov	r0, r8
 8008888:	4649      	mov	r1, r9
 800888a:	f7f8 f927 	bl	8000adc <__aeabi_dcmplt>
 800888e:	2800      	cmp	r0, #0
 8008890:	f43f af2f 	beq.w	80086f2 <_dtoa_r+0x47a>
 8008894:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008896:	1e6b      	subs	r3, r5, #1
 8008898:	930f      	str	r3, [sp, #60]	; 0x3c
 800889a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800889e:	2b30      	cmp	r3, #48	; 0x30
 80088a0:	d0f8      	beq.n	8008894 <_dtoa_r+0x61c>
 80088a2:	46bb      	mov	fp, r7
 80088a4:	e04a      	b.n	800893c <_dtoa_r+0x6c4>
 80088a6:	4b06      	ldr	r3, [pc, #24]	; (80088c0 <_dtoa_r+0x648>)
 80088a8:	f7f7 fea6 	bl	80005f8 <__aeabi_dmul>
 80088ac:	4680      	mov	r8, r0
 80088ae:	4689      	mov	r9, r1
 80088b0:	e7bd      	b.n	800882e <_dtoa_r+0x5b6>
 80088b2:	bf00      	nop
 80088b4:	0800af80 	.word	0x0800af80
 80088b8:	0800af58 	.word	0x0800af58
 80088bc:	3ff00000 	.word	0x3ff00000
 80088c0:	40240000 	.word	0x40240000
 80088c4:	401c0000 	.word	0x401c0000
 80088c8:	40140000 	.word	0x40140000
 80088cc:	3fe00000 	.word	0x3fe00000
 80088d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80088d4:	9d00      	ldr	r5, [sp, #0]
 80088d6:	4642      	mov	r2, r8
 80088d8:	464b      	mov	r3, r9
 80088da:	4630      	mov	r0, r6
 80088dc:	4639      	mov	r1, r7
 80088de:	f7f7 ffb5 	bl	800084c <__aeabi_ddiv>
 80088e2:	f7f8 f939 	bl	8000b58 <__aeabi_d2iz>
 80088e6:	9001      	str	r0, [sp, #4]
 80088e8:	f7f7 fe1c 	bl	8000524 <__aeabi_i2d>
 80088ec:	4642      	mov	r2, r8
 80088ee:	464b      	mov	r3, r9
 80088f0:	f7f7 fe82 	bl	80005f8 <__aeabi_dmul>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4630      	mov	r0, r6
 80088fa:	4639      	mov	r1, r7
 80088fc:	f7f7 fcc4 	bl	8000288 <__aeabi_dsub>
 8008900:	9e01      	ldr	r6, [sp, #4]
 8008902:	9f04      	ldr	r7, [sp, #16]
 8008904:	3630      	adds	r6, #48	; 0x30
 8008906:	f805 6b01 	strb.w	r6, [r5], #1
 800890a:	9e00      	ldr	r6, [sp, #0]
 800890c:	1bae      	subs	r6, r5, r6
 800890e:	42b7      	cmp	r7, r6
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	d134      	bne.n	8008980 <_dtoa_r+0x708>
 8008916:	f7f7 fcb9 	bl	800028c <__adddf3>
 800891a:	4642      	mov	r2, r8
 800891c:	464b      	mov	r3, r9
 800891e:	4606      	mov	r6, r0
 8008920:	460f      	mov	r7, r1
 8008922:	f7f8 f8f9 	bl	8000b18 <__aeabi_dcmpgt>
 8008926:	b9c8      	cbnz	r0, 800895c <_dtoa_r+0x6e4>
 8008928:	4642      	mov	r2, r8
 800892a:	464b      	mov	r3, r9
 800892c:	4630      	mov	r0, r6
 800892e:	4639      	mov	r1, r7
 8008930:	f7f8 f8ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8008934:	b110      	cbz	r0, 800893c <_dtoa_r+0x6c4>
 8008936:	9b01      	ldr	r3, [sp, #4]
 8008938:	07db      	lsls	r3, r3, #31
 800893a:	d40f      	bmi.n	800895c <_dtoa_r+0x6e4>
 800893c:	4651      	mov	r1, sl
 800893e:	4620      	mov	r0, r4
 8008940:	f000 fbcc 	bl	80090dc <_Bfree>
 8008944:	2300      	movs	r3, #0
 8008946:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008948:	702b      	strb	r3, [r5, #0]
 800894a:	f10b 0301 	add.w	r3, fp, #1
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008952:	2b00      	cmp	r3, #0
 8008954:	f43f ace2 	beq.w	800831c <_dtoa_r+0xa4>
 8008958:	601d      	str	r5, [r3, #0]
 800895a:	e4df      	b.n	800831c <_dtoa_r+0xa4>
 800895c:	465f      	mov	r7, fp
 800895e:	462b      	mov	r3, r5
 8008960:	461d      	mov	r5, r3
 8008962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008966:	2a39      	cmp	r2, #57	; 0x39
 8008968:	d106      	bne.n	8008978 <_dtoa_r+0x700>
 800896a:	9a00      	ldr	r2, [sp, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d1f7      	bne.n	8008960 <_dtoa_r+0x6e8>
 8008970:	9900      	ldr	r1, [sp, #0]
 8008972:	2230      	movs	r2, #48	; 0x30
 8008974:	3701      	adds	r7, #1
 8008976:	700a      	strb	r2, [r1, #0]
 8008978:	781a      	ldrb	r2, [r3, #0]
 800897a:	3201      	adds	r2, #1
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	e790      	b.n	80088a2 <_dtoa_r+0x62a>
 8008980:	4ba3      	ldr	r3, [pc, #652]	; (8008c10 <_dtoa_r+0x998>)
 8008982:	2200      	movs	r2, #0
 8008984:	f7f7 fe38 	bl	80005f8 <__aeabi_dmul>
 8008988:	2200      	movs	r2, #0
 800898a:	2300      	movs	r3, #0
 800898c:	4606      	mov	r6, r0
 800898e:	460f      	mov	r7, r1
 8008990:	f7f8 f89a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008994:	2800      	cmp	r0, #0
 8008996:	d09e      	beq.n	80088d6 <_dtoa_r+0x65e>
 8008998:	e7d0      	b.n	800893c <_dtoa_r+0x6c4>
 800899a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800899c:	2a00      	cmp	r2, #0
 800899e:	f000 80ca 	beq.w	8008b36 <_dtoa_r+0x8be>
 80089a2:	9a07      	ldr	r2, [sp, #28]
 80089a4:	2a01      	cmp	r2, #1
 80089a6:	f300 80ad 	bgt.w	8008b04 <_dtoa_r+0x88c>
 80089aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	f000 80a5 	beq.w	8008afc <_dtoa_r+0x884>
 80089b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089b6:	9e08      	ldr	r6, [sp, #32]
 80089b8:	9d05      	ldr	r5, [sp, #20]
 80089ba:	9a05      	ldr	r2, [sp, #20]
 80089bc:	441a      	add	r2, r3
 80089be:	9205      	str	r2, [sp, #20]
 80089c0:	9a06      	ldr	r2, [sp, #24]
 80089c2:	2101      	movs	r1, #1
 80089c4:	441a      	add	r2, r3
 80089c6:	4620      	mov	r0, r4
 80089c8:	9206      	str	r2, [sp, #24]
 80089ca:	f000 fc3d 	bl	8009248 <__i2b>
 80089ce:	4607      	mov	r7, r0
 80089d0:	b165      	cbz	r5, 80089ec <_dtoa_r+0x774>
 80089d2:	9b06      	ldr	r3, [sp, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	dd09      	ble.n	80089ec <_dtoa_r+0x774>
 80089d8:	42ab      	cmp	r3, r5
 80089da:	9a05      	ldr	r2, [sp, #20]
 80089dc:	bfa8      	it	ge
 80089de:	462b      	movge	r3, r5
 80089e0:	1ad2      	subs	r2, r2, r3
 80089e2:	9205      	str	r2, [sp, #20]
 80089e4:	9a06      	ldr	r2, [sp, #24]
 80089e6:	1aed      	subs	r5, r5, r3
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	9306      	str	r3, [sp, #24]
 80089ec:	9b08      	ldr	r3, [sp, #32]
 80089ee:	b1f3      	cbz	r3, 8008a2e <_dtoa_r+0x7b6>
 80089f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 80a3 	beq.w	8008b3e <_dtoa_r+0x8c6>
 80089f8:	2e00      	cmp	r6, #0
 80089fa:	dd10      	ble.n	8008a1e <_dtoa_r+0x7a6>
 80089fc:	4639      	mov	r1, r7
 80089fe:	4632      	mov	r2, r6
 8008a00:	4620      	mov	r0, r4
 8008a02:	f000 fce1 	bl	80093c8 <__pow5mult>
 8008a06:	4652      	mov	r2, sl
 8008a08:	4601      	mov	r1, r0
 8008a0a:	4607      	mov	r7, r0
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f000 fc31 	bl	8009274 <__multiply>
 8008a12:	4651      	mov	r1, sl
 8008a14:	4680      	mov	r8, r0
 8008a16:	4620      	mov	r0, r4
 8008a18:	f000 fb60 	bl	80090dc <_Bfree>
 8008a1c:	46c2      	mov	sl, r8
 8008a1e:	9b08      	ldr	r3, [sp, #32]
 8008a20:	1b9a      	subs	r2, r3, r6
 8008a22:	d004      	beq.n	8008a2e <_dtoa_r+0x7b6>
 8008a24:	4651      	mov	r1, sl
 8008a26:	4620      	mov	r0, r4
 8008a28:	f000 fcce 	bl	80093c8 <__pow5mult>
 8008a2c:	4682      	mov	sl, r0
 8008a2e:	2101      	movs	r1, #1
 8008a30:	4620      	mov	r0, r4
 8008a32:	f000 fc09 	bl	8009248 <__i2b>
 8008a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	f340 8081 	ble.w	8008b42 <_dtoa_r+0x8ca>
 8008a40:	461a      	mov	r2, r3
 8008a42:	4601      	mov	r1, r0
 8008a44:	4620      	mov	r0, r4
 8008a46:	f000 fcbf 	bl	80093c8 <__pow5mult>
 8008a4a:	9b07      	ldr	r3, [sp, #28]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	4606      	mov	r6, r0
 8008a50:	dd7a      	ble.n	8008b48 <_dtoa_r+0x8d0>
 8008a52:	f04f 0800 	mov.w	r8, #0
 8008a56:	6933      	ldr	r3, [r6, #16]
 8008a58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a5c:	6918      	ldr	r0, [r3, #16]
 8008a5e:	f000 fba5 	bl	80091ac <__hi0bits>
 8008a62:	f1c0 0020 	rsb	r0, r0, #32
 8008a66:	9b06      	ldr	r3, [sp, #24]
 8008a68:	4418      	add	r0, r3
 8008a6a:	f010 001f 	ands.w	r0, r0, #31
 8008a6e:	f000 8094 	beq.w	8008b9a <_dtoa_r+0x922>
 8008a72:	f1c0 0320 	rsb	r3, r0, #32
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	f340 8085 	ble.w	8008b86 <_dtoa_r+0x90e>
 8008a7c:	9b05      	ldr	r3, [sp, #20]
 8008a7e:	f1c0 001c 	rsb	r0, r0, #28
 8008a82:	4403      	add	r3, r0
 8008a84:	9305      	str	r3, [sp, #20]
 8008a86:	9b06      	ldr	r3, [sp, #24]
 8008a88:	4403      	add	r3, r0
 8008a8a:	4405      	add	r5, r0
 8008a8c:	9306      	str	r3, [sp, #24]
 8008a8e:	9b05      	ldr	r3, [sp, #20]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	dd05      	ble.n	8008aa0 <_dtoa_r+0x828>
 8008a94:	4651      	mov	r1, sl
 8008a96:	461a      	mov	r2, r3
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f000 fcef 	bl	800947c <__lshift>
 8008a9e:	4682      	mov	sl, r0
 8008aa0:	9b06      	ldr	r3, [sp, #24]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dd05      	ble.n	8008ab2 <_dtoa_r+0x83a>
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f000 fce6 	bl	800947c <__lshift>
 8008ab0:	4606      	mov	r6, r0
 8008ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d072      	beq.n	8008b9e <_dtoa_r+0x926>
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4650      	mov	r0, sl
 8008abc:	f000 fd4a 	bl	8009554 <__mcmp>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	da6c      	bge.n	8008b9e <_dtoa_r+0x926>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4651      	mov	r1, sl
 8008ac8:	220a      	movs	r2, #10
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fb28 	bl	8009120 <__multadd>
 8008ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ad6:	4682      	mov	sl, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 81b0 	beq.w	8008e3e <_dtoa_r+0xbc6>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	220a      	movs	r2, #10
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f000 fb1b 	bl	8009120 <__multadd>
 8008aea:	9b01      	ldr	r3, [sp, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	4607      	mov	r7, r0
 8008af0:	f300 8096 	bgt.w	8008c20 <_dtoa_r+0x9a8>
 8008af4:	9b07      	ldr	r3, [sp, #28]
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	dc59      	bgt.n	8008bae <_dtoa_r+0x936>
 8008afa:	e091      	b.n	8008c20 <_dtoa_r+0x9a8>
 8008afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008afe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b02:	e758      	b.n	80089b6 <_dtoa_r+0x73e>
 8008b04:	9b04      	ldr	r3, [sp, #16]
 8008b06:	1e5e      	subs	r6, r3, #1
 8008b08:	9b08      	ldr	r3, [sp, #32]
 8008b0a:	42b3      	cmp	r3, r6
 8008b0c:	bfbf      	itttt	lt
 8008b0e:	9b08      	ldrlt	r3, [sp, #32]
 8008b10:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008b12:	9608      	strlt	r6, [sp, #32]
 8008b14:	1af3      	sublt	r3, r6, r3
 8008b16:	bfb4      	ite	lt
 8008b18:	18d2      	addlt	r2, r2, r3
 8008b1a:	1b9e      	subge	r6, r3, r6
 8008b1c:	9b04      	ldr	r3, [sp, #16]
 8008b1e:	bfbc      	itt	lt
 8008b20:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008b22:	2600      	movlt	r6, #0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	bfb7      	itett	lt
 8008b28:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008b2c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008b30:	1a9d      	sublt	r5, r3, r2
 8008b32:	2300      	movlt	r3, #0
 8008b34:	e741      	b.n	80089ba <_dtoa_r+0x742>
 8008b36:	9e08      	ldr	r6, [sp, #32]
 8008b38:	9d05      	ldr	r5, [sp, #20]
 8008b3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b3c:	e748      	b.n	80089d0 <_dtoa_r+0x758>
 8008b3e:	9a08      	ldr	r2, [sp, #32]
 8008b40:	e770      	b.n	8008a24 <_dtoa_r+0x7ac>
 8008b42:	9b07      	ldr	r3, [sp, #28]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	dc19      	bgt.n	8008b7c <_dtoa_r+0x904>
 8008b48:	9b02      	ldr	r3, [sp, #8]
 8008b4a:	b9bb      	cbnz	r3, 8008b7c <_dtoa_r+0x904>
 8008b4c:	9b03      	ldr	r3, [sp, #12]
 8008b4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b52:	b99b      	cbnz	r3, 8008b7c <_dtoa_r+0x904>
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b5a:	0d1b      	lsrs	r3, r3, #20
 8008b5c:	051b      	lsls	r3, r3, #20
 8008b5e:	b183      	cbz	r3, 8008b82 <_dtoa_r+0x90a>
 8008b60:	9b05      	ldr	r3, [sp, #20]
 8008b62:	3301      	adds	r3, #1
 8008b64:	9305      	str	r3, [sp, #20]
 8008b66:	9b06      	ldr	r3, [sp, #24]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	9306      	str	r3, [sp, #24]
 8008b6c:	f04f 0801 	mov.w	r8, #1
 8008b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f47f af6f 	bne.w	8008a56 <_dtoa_r+0x7de>
 8008b78:	2001      	movs	r0, #1
 8008b7a:	e774      	b.n	8008a66 <_dtoa_r+0x7ee>
 8008b7c:	f04f 0800 	mov.w	r8, #0
 8008b80:	e7f6      	b.n	8008b70 <_dtoa_r+0x8f8>
 8008b82:	4698      	mov	r8, r3
 8008b84:	e7f4      	b.n	8008b70 <_dtoa_r+0x8f8>
 8008b86:	d082      	beq.n	8008a8e <_dtoa_r+0x816>
 8008b88:	9a05      	ldr	r2, [sp, #20]
 8008b8a:	331c      	adds	r3, #28
 8008b8c:	441a      	add	r2, r3
 8008b8e:	9205      	str	r2, [sp, #20]
 8008b90:	9a06      	ldr	r2, [sp, #24]
 8008b92:	441a      	add	r2, r3
 8008b94:	441d      	add	r5, r3
 8008b96:	9206      	str	r2, [sp, #24]
 8008b98:	e779      	b.n	8008a8e <_dtoa_r+0x816>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	e7f4      	b.n	8008b88 <_dtoa_r+0x910>
 8008b9e:	9b04      	ldr	r3, [sp, #16]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	dc37      	bgt.n	8008c14 <_dtoa_r+0x99c>
 8008ba4:	9b07      	ldr	r3, [sp, #28]
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	dd34      	ble.n	8008c14 <_dtoa_r+0x99c>
 8008baa:	9b04      	ldr	r3, [sp, #16]
 8008bac:	9301      	str	r3, [sp, #4]
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	b963      	cbnz	r3, 8008bcc <_dtoa_r+0x954>
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	2205      	movs	r2, #5
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 fab2 	bl	8009120 <__multadd>
 8008bbc:	4601      	mov	r1, r0
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	4650      	mov	r0, sl
 8008bc2:	f000 fcc7 	bl	8009554 <__mcmp>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f73f adbb 	bgt.w	8008742 <_dtoa_r+0x4ca>
 8008bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bce:	9d00      	ldr	r5, [sp, #0]
 8008bd0:	ea6f 0b03 	mvn.w	fp, r3
 8008bd4:	f04f 0800 	mov.w	r8, #0
 8008bd8:	4631      	mov	r1, r6
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 fa7e 	bl	80090dc <_Bfree>
 8008be0:	2f00      	cmp	r7, #0
 8008be2:	f43f aeab 	beq.w	800893c <_dtoa_r+0x6c4>
 8008be6:	f1b8 0f00 	cmp.w	r8, #0
 8008bea:	d005      	beq.n	8008bf8 <_dtoa_r+0x980>
 8008bec:	45b8      	cmp	r8, r7
 8008bee:	d003      	beq.n	8008bf8 <_dtoa_r+0x980>
 8008bf0:	4641      	mov	r1, r8
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 fa72 	bl	80090dc <_Bfree>
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f000 fa6e 	bl	80090dc <_Bfree>
 8008c00:	e69c      	b.n	800893c <_dtoa_r+0x6c4>
 8008c02:	2600      	movs	r6, #0
 8008c04:	4637      	mov	r7, r6
 8008c06:	e7e1      	b.n	8008bcc <_dtoa_r+0x954>
 8008c08:	46bb      	mov	fp, r7
 8008c0a:	4637      	mov	r7, r6
 8008c0c:	e599      	b.n	8008742 <_dtoa_r+0x4ca>
 8008c0e:	bf00      	nop
 8008c10:	40240000 	.word	0x40240000
 8008c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 80c8 	beq.w	8008dac <_dtoa_r+0xb34>
 8008c1c:	9b04      	ldr	r3, [sp, #16]
 8008c1e:	9301      	str	r3, [sp, #4]
 8008c20:	2d00      	cmp	r5, #0
 8008c22:	dd05      	ble.n	8008c30 <_dtoa_r+0x9b8>
 8008c24:	4639      	mov	r1, r7
 8008c26:	462a      	mov	r2, r5
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 fc27 	bl	800947c <__lshift>
 8008c2e:	4607      	mov	r7, r0
 8008c30:	f1b8 0f00 	cmp.w	r8, #0
 8008c34:	d05b      	beq.n	8008cee <_dtoa_r+0xa76>
 8008c36:	6879      	ldr	r1, [r7, #4]
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f000 fa0f 	bl	800905c <_Balloc>
 8008c3e:	4605      	mov	r5, r0
 8008c40:	b928      	cbnz	r0, 8008c4e <_dtoa_r+0x9d6>
 8008c42:	4b83      	ldr	r3, [pc, #524]	; (8008e50 <_dtoa_r+0xbd8>)
 8008c44:	4602      	mov	r2, r0
 8008c46:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008c4a:	f7ff bb2e 	b.w	80082aa <_dtoa_r+0x32>
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	3202      	adds	r2, #2
 8008c52:	0092      	lsls	r2, r2, #2
 8008c54:	f107 010c 	add.w	r1, r7, #12
 8008c58:	300c      	adds	r0, #12
 8008c5a:	f001 f985 	bl	8009f68 <memcpy>
 8008c5e:	2201      	movs	r2, #1
 8008c60:	4629      	mov	r1, r5
 8008c62:	4620      	mov	r0, r4
 8008c64:	f000 fc0a 	bl	800947c <__lshift>
 8008c68:	9b00      	ldr	r3, [sp, #0]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	9304      	str	r3, [sp, #16]
 8008c6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c72:	4413      	add	r3, r2
 8008c74:	9308      	str	r3, [sp, #32]
 8008c76:	9b02      	ldr	r3, [sp, #8]
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	46b8      	mov	r8, r7
 8008c7e:	9306      	str	r3, [sp, #24]
 8008c80:	4607      	mov	r7, r0
 8008c82:	9b04      	ldr	r3, [sp, #16]
 8008c84:	4631      	mov	r1, r6
 8008c86:	3b01      	subs	r3, #1
 8008c88:	4650      	mov	r0, sl
 8008c8a:	9301      	str	r3, [sp, #4]
 8008c8c:	f7ff fa69 	bl	8008162 <quorem>
 8008c90:	4641      	mov	r1, r8
 8008c92:	9002      	str	r0, [sp, #8]
 8008c94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c98:	4650      	mov	r0, sl
 8008c9a:	f000 fc5b 	bl	8009554 <__mcmp>
 8008c9e:	463a      	mov	r2, r7
 8008ca0:	9005      	str	r0, [sp, #20]
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f000 fc71 	bl	800958c <__mdiff>
 8008caa:	68c2      	ldr	r2, [r0, #12]
 8008cac:	4605      	mov	r5, r0
 8008cae:	bb02      	cbnz	r2, 8008cf2 <_dtoa_r+0xa7a>
 8008cb0:	4601      	mov	r1, r0
 8008cb2:	4650      	mov	r0, sl
 8008cb4:	f000 fc4e 	bl	8009554 <__mcmp>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	4629      	mov	r1, r5
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8008cc0:	f000 fa0c 	bl	80090dc <_Bfree>
 8008cc4:	9b07      	ldr	r3, [sp, #28]
 8008cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cc8:	9d04      	ldr	r5, [sp, #16]
 8008cca:	ea43 0102 	orr.w	r1, r3, r2
 8008cce:	9b06      	ldr	r3, [sp, #24]
 8008cd0:	4319      	orrs	r1, r3
 8008cd2:	d110      	bne.n	8008cf6 <_dtoa_r+0xa7e>
 8008cd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008cd8:	d029      	beq.n	8008d2e <_dtoa_r+0xab6>
 8008cda:	9b05      	ldr	r3, [sp, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	dd02      	ble.n	8008ce6 <_dtoa_r+0xa6e>
 8008ce0:	9b02      	ldr	r3, [sp, #8]
 8008ce2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008ce6:	9b01      	ldr	r3, [sp, #4]
 8008ce8:	f883 9000 	strb.w	r9, [r3]
 8008cec:	e774      	b.n	8008bd8 <_dtoa_r+0x960>
 8008cee:	4638      	mov	r0, r7
 8008cf0:	e7ba      	b.n	8008c68 <_dtoa_r+0x9f0>
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	e7e1      	b.n	8008cba <_dtoa_r+0xa42>
 8008cf6:	9b05      	ldr	r3, [sp, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	db04      	blt.n	8008d06 <_dtoa_r+0xa8e>
 8008cfc:	9907      	ldr	r1, [sp, #28]
 8008cfe:	430b      	orrs	r3, r1
 8008d00:	9906      	ldr	r1, [sp, #24]
 8008d02:	430b      	orrs	r3, r1
 8008d04:	d120      	bne.n	8008d48 <_dtoa_r+0xad0>
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	dded      	ble.n	8008ce6 <_dtoa_r+0xa6e>
 8008d0a:	4651      	mov	r1, sl
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f000 fbb4 	bl	800947c <__lshift>
 8008d14:	4631      	mov	r1, r6
 8008d16:	4682      	mov	sl, r0
 8008d18:	f000 fc1c 	bl	8009554 <__mcmp>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	dc03      	bgt.n	8008d28 <_dtoa_r+0xab0>
 8008d20:	d1e1      	bne.n	8008ce6 <_dtoa_r+0xa6e>
 8008d22:	f019 0f01 	tst.w	r9, #1
 8008d26:	d0de      	beq.n	8008ce6 <_dtoa_r+0xa6e>
 8008d28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d2c:	d1d8      	bne.n	8008ce0 <_dtoa_r+0xa68>
 8008d2e:	9a01      	ldr	r2, [sp, #4]
 8008d30:	2339      	movs	r3, #57	; 0x39
 8008d32:	7013      	strb	r3, [r2, #0]
 8008d34:	462b      	mov	r3, r5
 8008d36:	461d      	mov	r5, r3
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d3e:	2a39      	cmp	r2, #57	; 0x39
 8008d40:	d06c      	beq.n	8008e1c <_dtoa_r+0xba4>
 8008d42:	3201      	adds	r2, #1
 8008d44:	701a      	strb	r2, [r3, #0]
 8008d46:	e747      	b.n	8008bd8 <_dtoa_r+0x960>
 8008d48:	2a00      	cmp	r2, #0
 8008d4a:	dd07      	ble.n	8008d5c <_dtoa_r+0xae4>
 8008d4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d50:	d0ed      	beq.n	8008d2e <_dtoa_r+0xab6>
 8008d52:	9a01      	ldr	r2, [sp, #4]
 8008d54:	f109 0301 	add.w	r3, r9, #1
 8008d58:	7013      	strb	r3, [r2, #0]
 8008d5a:	e73d      	b.n	8008bd8 <_dtoa_r+0x960>
 8008d5c:	9b04      	ldr	r3, [sp, #16]
 8008d5e:	9a08      	ldr	r2, [sp, #32]
 8008d60:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d043      	beq.n	8008df0 <_dtoa_r+0xb78>
 8008d68:	4651      	mov	r1, sl
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	220a      	movs	r2, #10
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f000 f9d6 	bl	8009120 <__multadd>
 8008d74:	45b8      	cmp	r8, r7
 8008d76:	4682      	mov	sl, r0
 8008d78:	f04f 0300 	mov.w	r3, #0
 8008d7c:	f04f 020a 	mov.w	r2, #10
 8008d80:	4641      	mov	r1, r8
 8008d82:	4620      	mov	r0, r4
 8008d84:	d107      	bne.n	8008d96 <_dtoa_r+0xb1e>
 8008d86:	f000 f9cb 	bl	8009120 <__multadd>
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	4607      	mov	r7, r0
 8008d8e:	9b04      	ldr	r3, [sp, #16]
 8008d90:	3301      	adds	r3, #1
 8008d92:	9304      	str	r3, [sp, #16]
 8008d94:	e775      	b.n	8008c82 <_dtoa_r+0xa0a>
 8008d96:	f000 f9c3 	bl	8009120 <__multadd>
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	2300      	movs	r3, #0
 8008da0:	220a      	movs	r2, #10
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 f9bc 	bl	8009120 <__multadd>
 8008da8:	4607      	mov	r7, r0
 8008daa:	e7f0      	b.n	8008d8e <_dtoa_r+0xb16>
 8008dac:	9b04      	ldr	r3, [sp, #16]
 8008dae:	9301      	str	r3, [sp, #4]
 8008db0:	9d00      	ldr	r5, [sp, #0]
 8008db2:	4631      	mov	r1, r6
 8008db4:	4650      	mov	r0, sl
 8008db6:	f7ff f9d4 	bl	8008162 <quorem>
 8008dba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008dbe:	9b00      	ldr	r3, [sp, #0]
 8008dc0:	f805 9b01 	strb.w	r9, [r5], #1
 8008dc4:	1aea      	subs	r2, r5, r3
 8008dc6:	9b01      	ldr	r3, [sp, #4]
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	dd07      	ble.n	8008ddc <_dtoa_r+0xb64>
 8008dcc:	4651      	mov	r1, sl
 8008dce:	2300      	movs	r3, #0
 8008dd0:	220a      	movs	r2, #10
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 f9a4 	bl	8009120 <__multadd>
 8008dd8:	4682      	mov	sl, r0
 8008dda:	e7ea      	b.n	8008db2 <_dtoa_r+0xb3a>
 8008ddc:	9b01      	ldr	r3, [sp, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	bfc8      	it	gt
 8008de2:	461d      	movgt	r5, r3
 8008de4:	9b00      	ldr	r3, [sp, #0]
 8008de6:	bfd8      	it	le
 8008de8:	2501      	movle	r5, #1
 8008dea:	441d      	add	r5, r3
 8008dec:	f04f 0800 	mov.w	r8, #0
 8008df0:	4651      	mov	r1, sl
 8008df2:	2201      	movs	r2, #1
 8008df4:	4620      	mov	r0, r4
 8008df6:	f000 fb41 	bl	800947c <__lshift>
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4682      	mov	sl, r0
 8008dfe:	f000 fba9 	bl	8009554 <__mcmp>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	dc96      	bgt.n	8008d34 <_dtoa_r+0xabc>
 8008e06:	d102      	bne.n	8008e0e <_dtoa_r+0xb96>
 8008e08:	f019 0f01 	tst.w	r9, #1
 8008e0c:	d192      	bne.n	8008d34 <_dtoa_r+0xabc>
 8008e0e:	462b      	mov	r3, r5
 8008e10:	461d      	mov	r5, r3
 8008e12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e16:	2a30      	cmp	r2, #48	; 0x30
 8008e18:	d0fa      	beq.n	8008e10 <_dtoa_r+0xb98>
 8008e1a:	e6dd      	b.n	8008bd8 <_dtoa_r+0x960>
 8008e1c:	9a00      	ldr	r2, [sp, #0]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d189      	bne.n	8008d36 <_dtoa_r+0xabe>
 8008e22:	f10b 0b01 	add.w	fp, fp, #1
 8008e26:	2331      	movs	r3, #49	; 0x31
 8008e28:	e796      	b.n	8008d58 <_dtoa_r+0xae0>
 8008e2a:	4b0a      	ldr	r3, [pc, #40]	; (8008e54 <_dtoa_r+0xbdc>)
 8008e2c:	f7ff ba99 	b.w	8008362 <_dtoa_r+0xea>
 8008e30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f47f aa6d 	bne.w	8008312 <_dtoa_r+0x9a>
 8008e38:	4b07      	ldr	r3, [pc, #28]	; (8008e58 <_dtoa_r+0xbe0>)
 8008e3a:	f7ff ba92 	b.w	8008362 <_dtoa_r+0xea>
 8008e3e:	9b01      	ldr	r3, [sp, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	dcb5      	bgt.n	8008db0 <_dtoa_r+0xb38>
 8008e44:	9b07      	ldr	r3, [sp, #28]
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	f73f aeb1 	bgt.w	8008bae <_dtoa_r+0x936>
 8008e4c:	e7b0      	b.n	8008db0 <_dtoa_r+0xb38>
 8008e4e:	bf00      	nop
 8008e50:	0800aee8 	.word	0x0800aee8
 8008e54:	0800ae48 	.word	0x0800ae48
 8008e58:	0800ae6c 	.word	0x0800ae6c

08008e5c <_free_r>:
 8008e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e5e:	2900      	cmp	r1, #0
 8008e60:	d044      	beq.n	8008eec <_free_r+0x90>
 8008e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e66:	9001      	str	r0, [sp, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e6e:	bfb8      	it	lt
 8008e70:	18e4      	addlt	r4, r4, r3
 8008e72:	f000 f8e7 	bl	8009044 <__malloc_lock>
 8008e76:	4a1e      	ldr	r2, [pc, #120]	; (8008ef0 <_free_r+0x94>)
 8008e78:	9801      	ldr	r0, [sp, #4]
 8008e7a:	6813      	ldr	r3, [r2, #0]
 8008e7c:	b933      	cbnz	r3, 8008e8c <_free_r+0x30>
 8008e7e:	6063      	str	r3, [r4, #4]
 8008e80:	6014      	str	r4, [r2, #0]
 8008e82:	b003      	add	sp, #12
 8008e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e88:	f000 b8e2 	b.w	8009050 <__malloc_unlock>
 8008e8c:	42a3      	cmp	r3, r4
 8008e8e:	d908      	bls.n	8008ea2 <_free_r+0x46>
 8008e90:	6825      	ldr	r5, [r4, #0]
 8008e92:	1961      	adds	r1, r4, r5
 8008e94:	428b      	cmp	r3, r1
 8008e96:	bf01      	itttt	eq
 8008e98:	6819      	ldreq	r1, [r3, #0]
 8008e9a:	685b      	ldreq	r3, [r3, #4]
 8008e9c:	1949      	addeq	r1, r1, r5
 8008e9e:	6021      	streq	r1, [r4, #0]
 8008ea0:	e7ed      	b.n	8008e7e <_free_r+0x22>
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	b10b      	cbz	r3, 8008eac <_free_r+0x50>
 8008ea8:	42a3      	cmp	r3, r4
 8008eaa:	d9fa      	bls.n	8008ea2 <_free_r+0x46>
 8008eac:	6811      	ldr	r1, [r2, #0]
 8008eae:	1855      	adds	r5, r2, r1
 8008eb0:	42a5      	cmp	r5, r4
 8008eb2:	d10b      	bne.n	8008ecc <_free_r+0x70>
 8008eb4:	6824      	ldr	r4, [r4, #0]
 8008eb6:	4421      	add	r1, r4
 8008eb8:	1854      	adds	r4, r2, r1
 8008eba:	42a3      	cmp	r3, r4
 8008ebc:	6011      	str	r1, [r2, #0]
 8008ebe:	d1e0      	bne.n	8008e82 <_free_r+0x26>
 8008ec0:	681c      	ldr	r4, [r3, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	6053      	str	r3, [r2, #4]
 8008ec6:	440c      	add	r4, r1
 8008ec8:	6014      	str	r4, [r2, #0]
 8008eca:	e7da      	b.n	8008e82 <_free_r+0x26>
 8008ecc:	d902      	bls.n	8008ed4 <_free_r+0x78>
 8008ece:	230c      	movs	r3, #12
 8008ed0:	6003      	str	r3, [r0, #0]
 8008ed2:	e7d6      	b.n	8008e82 <_free_r+0x26>
 8008ed4:	6825      	ldr	r5, [r4, #0]
 8008ed6:	1961      	adds	r1, r4, r5
 8008ed8:	428b      	cmp	r3, r1
 8008eda:	bf04      	itt	eq
 8008edc:	6819      	ldreq	r1, [r3, #0]
 8008ede:	685b      	ldreq	r3, [r3, #4]
 8008ee0:	6063      	str	r3, [r4, #4]
 8008ee2:	bf04      	itt	eq
 8008ee4:	1949      	addeq	r1, r1, r5
 8008ee6:	6021      	streq	r1, [r4, #0]
 8008ee8:	6054      	str	r4, [r2, #4]
 8008eea:	e7ca      	b.n	8008e82 <_free_r+0x26>
 8008eec:	b003      	add	sp, #12
 8008eee:	bd30      	pop	{r4, r5, pc}
 8008ef0:	200004d8 	.word	0x200004d8

08008ef4 <malloc>:
 8008ef4:	4b02      	ldr	r3, [pc, #8]	; (8008f00 <malloc+0xc>)
 8008ef6:	4601      	mov	r1, r0
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	f000 b823 	b.w	8008f44 <_malloc_r>
 8008efe:	bf00      	nop
 8008f00:	20000064 	.word	0x20000064

08008f04 <sbrk_aligned>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	4e0e      	ldr	r6, [pc, #56]	; (8008f40 <sbrk_aligned+0x3c>)
 8008f08:	460c      	mov	r4, r1
 8008f0a:	6831      	ldr	r1, [r6, #0]
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	b911      	cbnz	r1, 8008f16 <sbrk_aligned+0x12>
 8008f10:	f001 f81a 	bl	8009f48 <_sbrk_r>
 8008f14:	6030      	str	r0, [r6, #0]
 8008f16:	4621      	mov	r1, r4
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f001 f815 	bl	8009f48 <_sbrk_r>
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	d00a      	beq.n	8008f38 <sbrk_aligned+0x34>
 8008f22:	1cc4      	adds	r4, r0, #3
 8008f24:	f024 0403 	bic.w	r4, r4, #3
 8008f28:	42a0      	cmp	r0, r4
 8008f2a:	d007      	beq.n	8008f3c <sbrk_aligned+0x38>
 8008f2c:	1a21      	subs	r1, r4, r0
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f001 f80a 	bl	8009f48 <_sbrk_r>
 8008f34:	3001      	adds	r0, #1
 8008f36:	d101      	bne.n	8008f3c <sbrk_aligned+0x38>
 8008f38:	f04f 34ff 	mov.w	r4, #4294967295
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	200004dc 	.word	0x200004dc

08008f44 <_malloc_r>:
 8008f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f48:	1ccd      	adds	r5, r1, #3
 8008f4a:	f025 0503 	bic.w	r5, r5, #3
 8008f4e:	3508      	adds	r5, #8
 8008f50:	2d0c      	cmp	r5, #12
 8008f52:	bf38      	it	cc
 8008f54:	250c      	movcc	r5, #12
 8008f56:	2d00      	cmp	r5, #0
 8008f58:	4607      	mov	r7, r0
 8008f5a:	db01      	blt.n	8008f60 <_malloc_r+0x1c>
 8008f5c:	42a9      	cmp	r1, r5
 8008f5e:	d905      	bls.n	8008f6c <_malloc_r+0x28>
 8008f60:	230c      	movs	r3, #12
 8008f62:	603b      	str	r3, [r7, #0]
 8008f64:	2600      	movs	r6, #0
 8008f66:	4630      	mov	r0, r6
 8008f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009040 <_malloc_r+0xfc>
 8008f70:	f000 f868 	bl	8009044 <__malloc_lock>
 8008f74:	f8d8 3000 	ldr.w	r3, [r8]
 8008f78:	461c      	mov	r4, r3
 8008f7a:	bb5c      	cbnz	r4, 8008fd4 <_malloc_r+0x90>
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4638      	mov	r0, r7
 8008f80:	f7ff ffc0 	bl	8008f04 <sbrk_aligned>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	4604      	mov	r4, r0
 8008f88:	d155      	bne.n	8009036 <_malloc_r+0xf2>
 8008f8a:	f8d8 4000 	ldr.w	r4, [r8]
 8008f8e:	4626      	mov	r6, r4
 8008f90:	2e00      	cmp	r6, #0
 8008f92:	d145      	bne.n	8009020 <_malloc_r+0xdc>
 8008f94:	2c00      	cmp	r4, #0
 8008f96:	d048      	beq.n	800902a <_malloc_r+0xe6>
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	eb04 0903 	add.w	r9, r4, r3
 8008fa2:	f000 ffd1 	bl	8009f48 <_sbrk_r>
 8008fa6:	4581      	cmp	r9, r0
 8008fa8:	d13f      	bne.n	800902a <_malloc_r+0xe6>
 8008faa:	6821      	ldr	r1, [r4, #0]
 8008fac:	1a6d      	subs	r5, r5, r1
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	f7ff ffa7 	bl	8008f04 <sbrk_aligned>
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	d037      	beq.n	800902a <_malloc_r+0xe6>
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	442b      	add	r3, r5
 8008fbe:	6023      	str	r3, [r4, #0]
 8008fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d038      	beq.n	800903a <_malloc_r+0xf6>
 8008fc8:	685a      	ldr	r2, [r3, #4]
 8008fca:	42a2      	cmp	r2, r4
 8008fcc:	d12b      	bne.n	8009026 <_malloc_r+0xe2>
 8008fce:	2200      	movs	r2, #0
 8008fd0:	605a      	str	r2, [r3, #4]
 8008fd2:	e00f      	b.n	8008ff4 <_malloc_r+0xb0>
 8008fd4:	6822      	ldr	r2, [r4, #0]
 8008fd6:	1b52      	subs	r2, r2, r5
 8008fd8:	d41f      	bmi.n	800901a <_malloc_r+0xd6>
 8008fda:	2a0b      	cmp	r2, #11
 8008fdc:	d917      	bls.n	800900e <_malloc_r+0xca>
 8008fde:	1961      	adds	r1, r4, r5
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	6025      	str	r5, [r4, #0]
 8008fe4:	bf18      	it	ne
 8008fe6:	6059      	strne	r1, [r3, #4]
 8008fe8:	6863      	ldr	r3, [r4, #4]
 8008fea:	bf08      	it	eq
 8008fec:	f8c8 1000 	streq.w	r1, [r8]
 8008ff0:	5162      	str	r2, [r4, r5]
 8008ff2:	604b      	str	r3, [r1, #4]
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	f104 060b 	add.w	r6, r4, #11
 8008ffa:	f000 f829 	bl	8009050 <__malloc_unlock>
 8008ffe:	f026 0607 	bic.w	r6, r6, #7
 8009002:	1d23      	adds	r3, r4, #4
 8009004:	1af2      	subs	r2, r6, r3
 8009006:	d0ae      	beq.n	8008f66 <_malloc_r+0x22>
 8009008:	1b9b      	subs	r3, r3, r6
 800900a:	50a3      	str	r3, [r4, r2]
 800900c:	e7ab      	b.n	8008f66 <_malloc_r+0x22>
 800900e:	42a3      	cmp	r3, r4
 8009010:	6862      	ldr	r2, [r4, #4]
 8009012:	d1dd      	bne.n	8008fd0 <_malloc_r+0x8c>
 8009014:	f8c8 2000 	str.w	r2, [r8]
 8009018:	e7ec      	b.n	8008ff4 <_malloc_r+0xb0>
 800901a:	4623      	mov	r3, r4
 800901c:	6864      	ldr	r4, [r4, #4]
 800901e:	e7ac      	b.n	8008f7a <_malloc_r+0x36>
 8009020:	4634      	mov	r4, r6
 8009022:	6876      	ldr	r6, [r6, #4]
 8009024:	e7b4      	b.n	8008f90 <_malloc_r+0x4c>
 8009026:	4613      	mov	r3, r2
 8009028:	e7cc      	b.n	8008fc4 <_malloc_r+0x80>
 800902a:	230c      	movs	r3, #12
 800902c:	603b      	str	r3, [r7, #0]
 800902e:	4638      	mov	r0, r7
 8009030:	f000 f80e 	bl	8009050 <__malloc_unlock>
 8009034:	e797      	b.n	8008f66 <_malloc_r+0x22>
 8009036:	6025      	str	r5, [r4, #0]
 8009038:	e7dc      	b.n	8008ff4 <_malloc_r+0xb0>
 800903a:	605b      	str	r3, [r3, #4]
 800903c:	deff      	udf	#255	; 0xff
 800903e:	bf00      	nop
 8009040:	200004d8 	.word	0x200004d8

08009044 <__malloc_lock>:
 8009044:	4801      	ldr	r0, [pc, #4]	; (800904c <__malloc_lock+0x8>)
 8009046:	f7ff b88a 	b.w	800815e <__retarget_lock_acquire_recursive>
 800904a:	bf00      	nop
 800904c:	200004d4 	.word	0x200004d4

08009050 <__malloc_unlock>:
 8009050:	4801      	ldr	r0, [pc, #4]	; (8009058 <__malloc_unlock+0x8>)
 8009052:	f7ff b885 	b.w	8008160 <__retarget_lock_release_recursive>
 8009056:	bf00      	nop
 8009058:	200004d4 	.word	0x200004d4

0800905c <_Balloc>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	69c6      	ldr	r6, [r0, #28]
 8009060:	4604      	mov	r4, r0
 8009062:	460d      	mov	r5, r1
 8009064:	b976      	cbnz	r6, 8009084 <_Balloc+0x28>
 8009066:	2010      	movs	r0, #16
 8009068:	f7ff ff44 	bl	8008ef4 <malloc>
 800906c:	4602      	mov	r2, r0
 800906e:	61e0      	str	r0, [r4, #28]
 8009070:	b920      	cbnz	r0, 800907c <_Balloc+0x20>
 8009072:	4b18      	ldr	r3, [pc, #96]	; (80090d4 <_Balloc+0x78>)
 8009074:	4818      	ldr	r0, [pc, #96]	; (80090d8 <_Balloc+0x7c>)
 8009076:	216b      	movs	r1, #107	; 0x6b
 8009078:	f000 ff84 	bl	8009f84 <__assert_func>
 800907c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009080:	6006      	str	r6, [r0, #0]
 8009082:	60c6      	str	r6, [r0, #12]
 8009084:	69e6      	ldr	r6, [r4, #28]
 8009086:	68f3      	ldr	r3, [r6, #12]
 8009088:	b183      	cbz	r3, 80090ac <_Balloc+0x50>
 800908a:	69e3      	ldr	r3, [r4, #28]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009092:	b9b8      	cbnz	r0, 80090c4 <_Balloc+0x68>
 8009094:	2101      	movs	r1, #1
 8009096:	fa01 f605 	lsl.w	r6, r1, r5
 800909a:	1d72      	adds	r2, r6, #5
 800909c:	0092      	lsls	r2, r2, #2
 800909e:	4620      	mov	r0, r4
 80090a0:	f000 ff8e 	bl	8009fc0 <_calloc_r>
 80090a4:	b160      	cbz	r0, 80090c0 <_Balloc+0x64>
 80090a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090aa:	e00e      	b.n	80090ca <_Balloc+0x6e>
 80090ac:	2221      	movs	r2, #33	; 0x21
 80090ae:	2104      	movs	r1, #4
 80090b0:	4620      	mov	r0, r4
 80090b2:	f000 ff85 	bl	8009fc0 <_calloc_r>
 80090b6:	69e3      	ldr	r3, [r4, #28]
 80090b8:	60f0      	str	r0, [r6, #12]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e4      	bne.n	800908a <_Balloc+0x2e>
 80090c0:	2000      	movs	r0, #0
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	6802      	ldr	r2, [r0, #0]
 80090c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090ca:	2300      	movs	r3, #0
 80090cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090d0:	e7f7      	b.n	80090c2 <_Balloc+0x66>
 80090d2:	bf00      	nop
 80090d4:	0800ae79 	.word	0x0800ae79
 80090d8:	0800aef9 	.word	0x0800aef9

080090dc <_Bfree>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	69c6      	ldr	r6, [r0, #28]
 80090e0:	4605      	mov	r5, r0
 80090e2:	460c      	mov	r4, r1
 80090e4:	b976      	cbnz	r6, 8009104 <_Bfree+0x28>
 80090e6:	2010      	movs	r0, #16
 80090e8:	f7ff ff04 	bl	8008ef4 <malloc>
 80090ec:	4602      	mov	r2, r0
 80090ee:	61e8      	str	r0, [r5, #28]
 80090f0:	b920      	cbnz	r0, 80090fc <_Bfree+0x20>
 80090f2:	4b09      	ldr	r3, [pc, #36]	; (8009118 <_Bfree+0x3c>)
 80090f4:	4809      	ldr	r0, [pc, #36]	; (800911c <_Bfree+0x40>)
 80090f6:	218f      	movs	r1, #143	; 0x8f
 80090f8:	f000 ff44 	bl	8009f84 <__assert_func>
 80090fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009100:	6006      	str	r6, [r0, #0]
 8009102:	60c6      	str	r6, [r0, #12]
 8009104:	b13c      	cbz	r4, 8009116 <_Bfree+0x3a>
 8009106:	69eb      	ldr	r3, [r5, #28]
 8009108:	6862      	ldr	r2, [r4, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009110:	6021      	str	r1, [r4, #0]
 8009112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	0800ae79 	.word	0x0800ae79
 800911c:	0800aef9 	.word	0x0800aef9

08009120 <__multadd>:
 8009120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009124:	690d      	ldr	r5, [r1, #16]
 8009126:	4607      	mov	r7, r0
 8009128:	460c      	mov	r4, r1
 800912a:	461e      	mov	r6, r3
 800912c:	f101 0c14 	add.w	ip, r1, #20
 8009130:	2000      	movs	r0, #0
 8009132:	f8dc 3000 	ldr.w	r3, [ip]
 8009136:	b299      	uxth	r1, r3
 8009138:	fb02 6101 	mla	r1, r2, r1, r6
 800913c:	0c1e      	lsrs	r6, r3, #16
 800913e:	0c0b      	lsrs	r3, r1, #16
 8009140:	fb02 3306 	mla	r3, r2, r6, r3
 8009144:	b289      	uxth	r1, r1
 8009146:	3001      	adds	r0, #1
 8009148:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800914c:	4285      	cmp	r5, r0
 800914e:	f84c 1b04 	str.w	r1, [ip], #4
 8009152:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009156:	dcec      	bgt.n	8009132 <__multadd+0x12>
 8009158:	b30e      	cbz	r6, 800919e <__multadd+0x7e>
 800915a:	68a3      	ldr	r3, [r4, #8]
 800915c:	42ab      	cmp	r3, r5
 800915e:	dc19      	bgt.n	8009194 <__multadd+0x74>
 8009160:	6861      	ldr	r1, [r4, #4]
 8009162:	4638      	mov	r0, r7
 8009164:	3101      	adds	r1, #1
 8009166:	f7ff ff79 	bl	800905c <_Balloc>
 800916a:	4680      	mov	r8, r0
 800916c:	b928      	cbnz	r0, 800917a <__multadd+0x5a>
 800916e:	4602      	mov	r2, r0
 8009170:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <__multadd+0x84>)
 8009172:	480d      	ldr	r0, [pc, #52]	; (80091a8 <__multadd+0x88>)
 8009174:	21ba      	movs	r1, #186	; 0xba
 8009176:	f000 ff05 	bl	8009f84 <__assert_func>
 800917a:	6922      	ldr	r2, [r4, #16]
 800917c:	3202      	adds	r2, #2
 800917e:	f104 010c 	add.w	r1, r4, #12
 8009182:	0092      	lsls	r2, r2, #2
 8009184:	300c      	adds	r0, #12
 8009186:	f000 feef 	bl	8009f68 <memcpy>
 800918a:	4621      	mov	r1, r4
 800918c:	4638      	mov	r0, r7
 800918e:	f7ff ffa5 	bl	80090dc <_Bfree>
 8009192:	4644      	mov	r4, r8
 8009194:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009198:	3501      	adds	r5, #1
 800919a:	615e      	str	r6, [r3, #20]
 800919c:	6125      	str	r5, [r4, #16]
 800919e:	4620      	mov	r0, r4
 80091a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a4:	0800aee8 	.word	0x0800aee8
 80091a8:	0800aef9 	.word	0x0800aef9

080091ac <__hi0bits>:
 80091ac:	0c03      	lsrs	r3, r0, #16
 80091ae:	041b      	lsls	r3, r3, #16
 80091b0:	b9d3      	cbnz	r3, 80091e8 <__hi0bits+0x3c>
 80091b2:	0400      	lsls	r0, r0, #16
 80091b4:	2310      	movs	r3, #16
 80091b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091ba:	bf04      	itt	eq
 80091bc:	0200      	lsleq	r0, r0, #8
 80091be:	3308      	addeq	r3, #8
 80091c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091c4:	bf04      	itt	eq
 80091c6:	0100      	lsleq	r0, r0, #4
 80091c8:	3304      	addeq	r3, #4
 80091ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091ce:	bf04      	itt	eq
 80091d0:	0080      	lsleq	r0, r0, #2
 80091d2:	3302      	addeq	r3, #2
 80091d4:	2800      	cmp	r0, #0
 80091d6:	db05      	blt.n	80091e4 <__hi0bits+0x38>
 80091d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091dc:	f103 0301 	add.w	r3, r3, #1
 80091e0:	bf08      	it	eq
 80091e2:	2320      	moveq	r3, #32
 80091e4:	4618      	mov	r0, r3
 80091e6:	4770      	bx	lr
 80091e8:	2300      	movs	r3, #0
 80091ea:	e7e4      	b.n	80091b6 <__hi0bits+0xa>

080091ec <__lo0bits>:
 80091ec:	6803      	ldr	r3, [r0, #0]
 80091ee:	f013 0207 	ands.w	r2, r3, #7
 80091f2:	d00c      	beq.n	800920e <__lo0bits+0x22>
 80091f4:	07d9      	lsls	r1, r3, #31
 80091f6:	d422      	bmi.n	800923e <__lo0bits+0x52>
 80091f8:	079a      	lsls	r2, r3, #30
 80091fa:	bf49      	itett	mi
 80091fc:	085b      	lsrmi	r3, r3, #1
 80091fe:	089b      	lsrpl	r3, r3, #2
 8009200:	6003      	strmi	r3, [r0, #0]
 8009202:	2201      	movmi	r2, #1
 8009204:	bf5c      	itt	pl
 8009206:	6003      	strpl	r3, [r0, #0]
 8009208:	2202      	movpl	r2, #2
 800920a:	4610      	mov	r0, r2
 800920c:	4770      	bx	lr
 800920e:	b299      	uxth	r1, r3
 8009210:	b909      	cbnz	r1, 8009216 <__lo0bits+0x2a>
 8009212:	0c1b      	lsrs	r3, r3, #16
 8009214:	2210      	movs	r2, #16
 8009216:	b2d9      	uxtb	r1, r3
 8009218:	b909      	cbnz	r1, 800921e <__lo0bits+0x32>
 800921a:	3208      	adds	r2, #8
 800921c:	0a1b      	lsrs	r3, r3, #8
 800921e:	0719      	lsls	r1, r3, #28
 8009220:	bf04      	itt	eq
 8009222:	091b      	lsreq	r3, r3, #4
 8009224:	3204      	addeq	r2, #4
 8009226:	0799      	lsls	r1, r3, #30
 8009228:	bf04      	itt	eq
 800922a:	089b      	lsreq	r3, r3, #2
 800922c:	3202      	addeq	r2, #2
 800922e:	07d9      	lsls	r1, r3, #31
 8009230:	d403      	bmi.n	800923a <__lo0bits+0x4e>
 8009232:	085b      	lsrs	r3, r3, #1
 8009234:	f102 0201 	add.w	r2, r2, #1
 8009238:	d003      	beq.n	8009242 <__lo0bits+0x56>
 800923a:	6003      	str	r3, [r0, #0]
 800923c:	e7e5      	b.n	800920a <__lo0bits+0x1e>
 800923e:	2200      	movs	r2, #0
 8009240:	e7e3      	b.n	800920a <__lo0bits+0x1e>
 8009242:	2220      	movs	r2, #32
 8009244:	e7e1      	b.n	800920a <__lo0bits+0x1e>
	...

08009248 <__i2b>:
 8009248:	b510      	push	{r4, lr}
 800924a:	460c      	mov	r4, r1
 800924c:	2101      	movs	r1, #1
 800924e:	f7ff ff05 	bl	800905c <_Balloc>
 8009252:	4602      	mov	r2, r0
 8009254:	b928      	cbnz	r0, 8009262 <__i2b+0x1a>
 8009256:	4b05      	ldr	r3, [pc, #20]	; (800926c <__i2b+0x24>)
 8009258:	4805      	ldr	r0, [pc, #20]	; (8009270 <__i2b+0x28>)
 800925a:	f240 1145 	movw	r1, #325	; 0x145
 800925e:	f000 fe91 	bl	8009f84 <__assert_func>
 8009262:	2301      	movs	r3, #1
 8009264:	6144      	str	r4, [r0, #20]
 8009266:	6103      	str	r3, [r0, #16]
 8009268:	bd10      	pop	{r4, pc}
 800926a:	bf00      	nop
 800926c:	0800aee8 	.word	0x0800aee8
 8009270:	0800aef9 	.word	0x0800aef9

08009274 <__multiply>:
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	4691      	mov	r9, r2
 800927a:	690a      	ldr	r2, [r1, #16]
 800927c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009280:	429a      	cmp	r2, r3
 8009282:	bfb8      	it	lt
 8009284:	460b      	movlt	r3, r1
 8009286:	460c      	mov	r4, r1
 8009288:	bfbc      	itt	lt
 800928a:	464c      	movlt	r4, r9
 800928c:	4699      	movlt	r9, r3
 800928e:	6927      	ldr	r7, [r4, #16]
 8009290:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009294:	68a3      	ldr	r3, [r4, #8]
 8009296:	6861      	ldr	r1, [r4, #4]
 8009298:	eb07 060a 	add.w	r6, r7, sl
 800929c:	42b3      	cmp	r3, r6
 800929e:	b085      	sub	sp, #20
 80092a0:	bfb8      	it	lt
 80092a2:	3101      	addlt	r1, #1
 80092a4:	f7ff feda 	bl	800905c <_Balloc>
 80092a8:	b930      	cbnz	r0, 80092b8 <__multiply+0x44>
 80092aa:	4602      	mov	r2, r0
 80092ac:	4b44      	ldr	r3, [pc, #272]	; (80093c0 <__multiply+0x14c>)
 80092ae:	4845      	ldr	r0, [pc, #276]	; (80093c4 <__multiply+0x150>)
 80092b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80092b4:	f000 fe66 	bl	8009f84 <__assert_func>
 80092b8:	f100 0514 	add.w	r5, r0, #20
 80092bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092c0:	462b      	mov	r3, r5
 80092c2:	2200      	movs	r2, #0
 80092c4:	4543      	cmp	r3, r8
 80092c6:	d321      	bcc.n	800930c <__multiply+0x98>
 80092c8:	f104 0314 	add.w	r3, r4, #20
 80092cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092d0:	f109 0314 	add.w	r3, r9, #20
 80092d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092d8:	9202      	str	r2, [sp, #8]
 80092da:	1b3a      	subs	r2, r7, r4
 80092dc:	3a15      	subs	r2, #21
 80092de:	f022 0203 	bic.w	r2, r2, #3
 80092e2:	3204      	adds	r2, #4
 80092e4:	f104 0115 	add.w	r1, r4, #21
 80092e8:	428f      	cmp	r7, r1
 80092ea:	bf38      	it	cc
 80092ec:	2204      	movcc	r2, #4
 80092ee:	9201      	str	r2, [sp, #4]
 80092f0:	9a02      	ldr	r2, [sp, #8]
 80092f2:	9303      	str	r3, [sp, #12]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d80c      	bhi.n	8009312 <__multiply+0x9e>
 80092f8:	2e00      	cmp	r6, #0
 80092fa:	dd03      	ble.n	8009304 <__multiply+0x90>
 80092fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009300:	2b00      	cmp	r3, #0
 8009302:	d05b      	beq.n	80093bc <__multiply+0x148>
 8009304:	6106      	str	r6, [r0, #16]
 8009306:	b005      	add	sp, #20
 8009308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930c:	f843 2b04 	str.w	r2, [r3], #4
 8009310:	e7d8      	b.n	80092c4 <__multiply+0x50>
 8009312:	f8b3 a000 	ldrh.w	sl, [r3]
 8009316:	f1ba 0f00 	cmp.w	sl, #0
 800931a:	d024      	beq.n	8009366 <__multiply+0xf2>
 800931c:	f104 0e14 	add.w	lr, r4, #20
 8009320:	46a9      	mov	r9, r5
 8009322:	f04f 0c00 	mov.w	ip, #0
 8009326:	f85e 2b04 	ldr.w	r2, [lr], #4
 800932a:	f8d9 1000 	ldr.w	r1, [r9]
 800932e:	fa1f fb82 	uxth.w	fp, r2
 8009332:	b289      	uxth	r1, r1
 8009334:	fb0a 110b 	mla	r1, sl, fp, r1
 8009338:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800933c:	f8d9 2000 	ldr.w	r2, [r9]
 8009340:	4461      	add	r1, ip
 8009342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009346:	fb0a c20b 	mla	r2, sl, fp, ip
 800934a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800934e:	b289      	uxth	r1, r1
 8009350:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009354:	4577      	cmp	r7, lr
 8009356:	f849 1b04 	str.w	r1, [r9], #4
 800935a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800935e:	d8e2      	bhi.n	8009326 <__multiply+0xb2>
 8009360:	9a01      	ldr	r2, [sp, #4]
 8009362:	f845 c002 	str.w	ip, [r5, r2]
 8009366:	9a03      	ldr	r2, [sp, #12]
 8009368:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800936c:	3304      	adds	r3, #4
 800936e:	f1b9 0f00 	cmp.w	r9, #0
 8009372:	d021      	beq.n	80093b8 <__multiply+0x144>
 8009374:	6829      	ldr	r1, [r5, #0]
 8009376:	f104 0c14 	add.w	ip, r4, #20
 800937a:	46ae      	mov	lr, r5
 800937c:	f04f 0a00 	mov.w	sl, #0
 8009380:	f8bc b000 	ldrh.w	fp, [ip]
 8009384:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009388:	fb09 220b 	mla	r2, r9, fp, r2
 800938c:	4452      	add	r2, sl
 800938e:	b289      	uxth	r1, r1
 8009390:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009394:	f84e 1b04 	str.w	r1, [lr], #4
 8009398:	f85c 1b04 	ldr.w	r1, [ip], #4
 800939c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093a0:	f8be 1000 	ldrh.w	r1, [lr]
 80093a4:	fb09 110a 	mla	r1, r9, sl, r1
 80093a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80093ac:	4567      	cmp	r7, ip
 80093ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093b2:	d8e5      	bhi.n	8009380 <__multiply+0x10c>
 80093b4:	9a01      	ldr	r2, [sp, #4]
 80093b6:	50a9      	str	r1, [r5, r2]
 80093b8:	3504      	adds	r5, #4
 80093ba:	e799      	b.n	80092f0 <__multiply+0x7c>
 80093bc:	3e01      	subs	r6, #1
 80093be:	e79b      	b.n	80092f8 <__multiply+0x84>
 80093c0:	0800aee8 	.word	0x0800aee8
 80093c4:	0800aef9 	.word	0x0800aef9

080093c8 <__pow5mult>:
 80093c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093cc:	4615      	mov	r5, r2
 80093ce:	f012 0203 	ands.w	r2, r2, #3
 80093d2:	4606      	mov	r6, r0
 80093d4:	460f      	mov	r7, r1
 80093d6:	d007      	beq.n	80093e8 <__pow5mult+0x20>
 80093d8:	4c25      	ldr	r4, [pc, #148]	; (8009470 <__pow5mult+0xa8>)
 80093da:	3a01      	subs	r2, #1
 80093dc:	2300      	movs	r3, #0
 80093de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093e2:	f7ff fe9d 	bl	8009120 <__multadd>
 80093e6:	4607      	mov	r7, r0
 80093e8:	10ad      	asrs	r5, r5, #2
 80093ea:	d03d      	beq.n	8009468 <__pow5mult+0xa0>
 80093ec:	69f4      	ldr	r4, [r6, #28]
 80093ee:	b97c      	cbnz	r4, 8009410 <__pow5mult+0x48>
 80093f0:	2010      	movs	r0, #16
 80093f2:	f7ff fd7f 	bl	8008ef4 <malloc>
 80093f6:	4602      	mov	r2, r0
 80093f8:	61f0      	str	r0, [r6, #28]
 80093fa:	b928      	cbnz	r0, 8009408 <__pow5mult+0x40>
 80093fc:	4b1d      	ldr	r3, [pc, #116]	; (8009474 <__pow5mult+0xac>)
 80093fe:	481e      	ldr	r0, [pc, #120]	; (8009478 <__pow5mult+0xb0>)
 8009400:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009404:	f000 fdbe 	bl	8009f84 <__assert_func>
 8009408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800940c:	6004      	str	r4, [r0, #0]
 800940e:	60c4      	str	r4, [r0, #12]
 8009410:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009418:	b94c      	cbnz	r4, 800942e <__pow5mult+0x66>
 800941a:	f240 2171 	movw	r1, #625	; 0x271
 800941e:	4630      	mov	r0, r6
 8009420:	f7ff ff12 	bl	8009248 <__i2b>
 8009424:	2300      	movs	r3, #0
 8009426:	f8c8 0008 	str.w	r0, [r8, #8]
 800942a:	4604      	mov	r4, r0
 800942c:	6003      	str	r3, [r0, #0]
 800942e:	f04f 0900 	mov.w	r9, #0
 8009432:	07eb      	lsls	r3, r5, #31
 8009434:	d50a      	bpl.n	800944c <__pow5mult+0x84>
 8009436:	4639      	mov	r1, r7
 8009438:	4622      	mov	r2, r4
 800943a:	4630      	mov	r0, r6
 800943c:	f7ff ff1a 	bl	8009274 <__multiply>
 8009440:	4639      	mov	r1, r7
 8009442:	4680      	mov	r8, r0
 8009444:	4630      	mov	r0, r6
 8009446:	f7ff fe49 	bl	80090dc <_Bfree>
 800944a:	4647      	mov	r7, r8
 800944c:	106d      	asrs	r5, r5, #1
 800944e:	d00b      	beq.n	8009468 <__pow5mult+0xa0>
 8009450:	6820      	ldr	r0, [r4, #0]
 8009452:	b938      	cbnz	r0, 8009464 <__pow5mult+0x9c>
 8009454:	4622      	mov	r2, r4
 8009456:	4621      	mov	r1, r4
 8009458:	4630      	mov	r0, r6
 800945a:	f7ff ff0b 	bl	8009274 <__multiply>
 800945e:	6020      	str	r0, [r4, #0]
 8009460:	f8c0 9000 	str.w	r9, [r0]
 8009464:	4604      	mov	r4, r0
 8009466:	e7e4      	b.n	8009432 <__pow5mult+0x6a>
 8009468:	4638      	mov	r0, r7
 800946a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946e:	bf00      	nop
 8009470:	0800b048 	.word	0x0800b048
 8009474:	0800ae79 	.word	0x0800ae79
 8009478:	0800aef9 	.word	0x0800aef9

0800947c <__lshift>:
 800947c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009480:	460c      	mov	r4, r1
 8009482:	6849      	ldr	r1, [r1, #4]
 8009484:	6923      	ldr	r3, [r4, #16]
 8009486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800948a:	68a3      	ldr	r3, [r4, #8]
 800948c:	4607      	mov	r7, r0
 800948e:	4691      	mov	r9, r2
 8009490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009494:	f108 0601 	add.w	r6, r8, #1
 8009498:	42b3      	cmp	r3, r6
 800949a:	db0b      	blt.n	80094b4 <__lshift+0x38>
 800949c:	4638      	mov	r0, r7
 800949e:	f7ff fddd 	bl	800905c <_Balloc>
 80094a2:	4605      	mov	r5, r0
 80094a4:	b948      	cbnz	r0, 80094ba <__lshift+0x3e>
 80094a6:	4602      	mov	r2, r0
 80094a8:	4b28      	ldr	r3, [pc, #160]	; (800954c <__lshift+0xd0>)
 80094aa:	4829      	ldr	r0, [pc, #164]	; (8009550 <__lshift+0xd4>)
 80094ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80094b0:	f000 fd68 	bl	8009f84 <__assert_func>
 80094b4:	3101      	adds	r1, #1
 80094b6:	005b      	lsls	r3, r3, #1
 80094b8:	e7ee      	b.n	8009498 <__lshift+0x1c>
 80094ba:	2300      	movs	r3, #0
 80094bc:	f100 0114 	add.w	r1, r0, #20
 80094c0:	f100 0210 	add.w	r2, r0, #16
 80094c4:	4618      	mov	r0, r3
 80094c6:	4553      	cmp	r3, sl
 80094c8:	db33      	blt.n	8009532 <__lshift+0xb6>
 80094ca:	6920      	ldr	r0, [r4, #16]
 80094cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094d0:	f104 0314 	add.w	r3, r4, #20
 80094d4:	f019 091f 	ands.w	r9, r9, #31
 80094d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094e0:	d02b      	beq.n	800953a <__lshift+0xbe>
 80094e2:	f1c9 0e20 	rsb	lr, r9, #32
 80094e6:	468a      	mov	sl, r1
 80094e8:	2200      	movs	r2, #0
 80094ea:	6818      	ldr	r0, [r3, #0]
 80094ec:	fa00 f009 	lsl.w	r0, r0, r9
 80094f0:	4310      	orrs	r0, r2
 80094f2:	f84a 0b04 	str.w	r0, [sl], #4
 80094f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094fa:	459c      	cmp	ip, r3
 80094fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009500:	d8f3      	bhi.n	80094ea <__lshift+0x6e>
 8009502:	ebac 0304 	sub.w	r3, ip, r4
 8009506:	3b15      	subs	r3, #21
 8009508:	f023 0303 	bic.w	r3, r3, #3
 800950c:	3304      	adds	r3, #4
 800950e:	f104 0015 	add.w	r0, r4, #21
 8009512:	4584      	cmp	ip, r0
 8009514:	bf38      	it	cc
 8009516:	2304      	movcc	r3, #4
 8009518:	50ca      	str	r2, [r1, r3]
 800951a:	b10a      	cbz	r2, 8009520 <__lshift+0xa4>
 800951c:	f108 0602 	add.w	r6, r8, #2
 8009520:	3e01      	subs	r6, #1
 8009522:	4638      	mov	r0, r7
 8009524:	612e      	str	r6, [r5, #16]
 8009526:	4621      	mov	r1, r4
 8009528:	f7ff fdd8 	bl	80090dc <_Bfree>
 800952c:	4628      	mov	r0, r5
 800952e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009532:	f842 0f04 	str.w	r0, [r2, #4]!
 8009536:	3301      	adds	r3, #1
 8009538:	e7c5      	b.n	80094c6 <__lshift+0x4a>
 800953a:	3904      	subs	r1, #4
 800953c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009540:	f841 2f04 	str.w	r2, [r1, #4]!
 8009544:	459c      	cmp	ip, r3
 8009546:	d8f9      	bhi.n	800953c <__lshift+0xc0>
 8009548:	e7ea      	b.n	8009520 <__lshift+0xa4>
 800954a:	bf00      	nop
 800954c:	0800aee8 	.word	0x0800aee8
 8009550:	0800aef9 	.word	0x0800aef9

08009554 <__mcmp>:
 8009554:	b530      	push	{r4, r5, lr}
 8009556:	6902      	ldr	r2, [r0, #16]
 8009558:	690c      	ldr	r4, [r1, #16]
 800955a:	1b12      	subs	r2, r2, r4
 800955c:	d10e      	bne.n	800957c <__mcmp+0x28>
 800955e:	f100 0314 	add.w	r3, r0, #20
 8009562:	3114      	adds	r1, #20
 8009564:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009568:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800956c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009570:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009574:	42a5      	cmp	r5, r4
 8009576:	d003      	beq.n	8009580 <__mcmp+0x2c>
 8009578:	d305      	bcc.n	8009586 <__mcmp+0x32>
 800957a:	2201      	movs	r2, #1
 800957c:	4610      	mov	r0, r2
 800957e:	bd30      	pop	{r4, r5, pc}
 8009580:	4283      	cmp	r3, r0
 8009582:	d3f3      	bcc.n	800956c <__mcmp+0x18>
 8009584:	e7fa      	b.n	800957c <__mcmp+0x28>
 8009586:	f04f 32ff 	mov.w	r2, #4294967295
 800958a:	e7f7      	b.n	800957c <__mcmp+0x28>

0800958c <__mdiff>:
 800958c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	460c      	mov	r4, r1
 8009592:	4606      	mov	r6, r0
 8009594:	4611      	mov	r1, r2
 8009596:	4620      	mov	r0, r4
 8009598:	4690      	mov	r8, r2
 800959a:	f7ff ffdb 	bl	8009554 <__mcmp>
 800959e:	1e05      	subs	r5, r0, #0
 80095a0:	d110      	bne.n	80095c4 <__mdiff+0x38>
 80095a2:	4629      	mov	r1, r5
 80095a4:	4630      	mov	r0, r6
 80095a6:	f7ff fd59 	bl	800905c <_Balloc>
 80095aa:	b930      	cbnz	r0, 80095ba <__mdiff+0x2e>
 80095ac:	4b3a      	ldr	r3, [pc, #232]	; (8009698 <__mdiff+0x10c>)
 80095ae:	4602      	mov	r2, r0
 80095b0:	f240 2137 	movw	r1, #567	; 0x237
 80095b4:	4839      	ldr	r0, [pc, #228]	; (800969c <__mdiff+0x110>)
 80095b6:	f000 fce5 	bl	8009f84 <__assert_func>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c4:	bfa4      	itt	ge
 80095c6:	4643      	movge	r3, r8
 80095c8:	46a0      	movge	r8, r4
 80095ca:	4630      	mov	r0, r6
 80095cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095d0:	bfa6      	itte	ge
 80095d2:	461c      	movge	r4, r3
 80095d4:	2500      	movge	r5, #0
 80095d6:	2501      	movlt	r5, #1
 80095d8:	f7ff fd40 	bl	800905c <_Balloc>
 80095dc:	b920      	cbnz	r0, 80095e8 <__mdiff+0x5c>
 80095de:	4b2e      	ldr	r3, [pc, #184]	; (8009698 <__mdiff+0x10c>)
 80095e0:	4602      	mov	r2, r0
 80095e2:	f240 2145 	movw	r1, #581	; 0x245
 80095e6:	e7e5      	b.n	80095b4 <__mdiff+0x28>
 80095e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095ec:	6926      	ldr	r6, [r4, #16]
 80095ee:	60c5      	str	r5, [r0, #12]
 80095f0:	f104 0914 	add.w	r9, r4, #20
 80095f4:	f108 0514 	add.w	r5, r8, #20
 80095f8:	f100 0e14 	add.w	lr, r0, #20
 80095fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009600:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009604:	f108 0210 	add.w	r2, r8, #16
 8009608:	46f2      	mov	sl, lr
 800960a:	2100      	movs	r1, #0
 800960c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009610:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009614:	fa11 f88b 	uxtah	r8, r1, fp
 8009618:	b299      	uxth	r1, r3
 800961a:	0c1b      	lsrs	r3, r3, #16
 800961c:	eba8 0801 	sub.w	r8, r8, r1
 8009620:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009624:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009628:	fa1f f888 	uxth.w	r8, r8
 800962c:	1419      	asrs	r1, r3, #16
 800962e:	454e      	cmp	r6, r9
 8009630:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009634:	f84a 3b04 	str.w	r3, [sl], #4
 8009638:	d8e8      	bhi.n	800960c <__mdiff+0x80>
 800963a:	1b33      	subs	r3, r6, r4
 800963c:	3b15      	subs	r3, #21
 800963e:	f023 0303 	bic.w	r3, r3, #3
 8009642:	3304      	adds	r3, #4
 8009644:	3415      	adds	r4, #21
 8009646:	42a6      	cmp	r6, r4
 8009648:	bf38      	it	cc
 800964a:	2304      	movcc	r3, #4
 800964c:	441d      	add	r5, r3
 800964e:	4473      	add	r3, lr
 8009650:	469e      	mov	lr, r3
 8009652:	462e      	mov	r6, r5
 8009654:	4566      	cmp	r6, ip
 8009656:	d30e      	bcc.n	8009676 <__mdiff+0xea>
 8009658:	f10c 0203 	add.w	r2, ip, #3
 800965c:	1b52      	subs	r2, r2, r5
 800965e:	f022 0203 	bic.w	r2, r2, #3
 8009662:	3d03      	subs	r5, #3
 8009664:	45ac      	cmp	ip, r5
 8009666:	bf38      	it	cc
 8009668:	2200      	movcc	r2, #0
 800966a:	4413      	add	r3, r2
 800966c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009670:	b17a      	cbz	r2, 8009692 <__mdiff+0x106>
 8009672:	6107      	str	r7, [r0, #16]
 8009674:	e7a4      	b.n	80095c0 <__mdiff+0x34>
 8009676:	f856 8b04 	ldr.w	r8, [r6], #4
 800967a:	fa11 f288 	uxtah	r2, r1, r8
 800967e:	1414      	asrs	r4, r2, #16
 8009680:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009684:	b292      	uxth	r2, r2
 8009686:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800968a:	f84e 2b04 	str.w	r2, [lr], #4
 800968e:	1421      	asrs	r1, r4, #16
 8009690:	e7e0      	b.n	8009654 <__mdiff+0xc8>
 8009692:	3f01      	subs	r7, #1
 8009694:	e7ea      	b.n	800966c <__mdiff+0xe0>
 8009696:	bf00      	nop
 8009698:	0800aee8 	.word	0x0800aee8
 800969c:	0800aef9 	.word	0x0800aef9

080096a0 <__d2b>:
 80096a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096a4:	460f      	mov	r7, r1
 80096a6:	2101      	movs	r1, #1
 80096a8:	ec59 8b10 	vmov	r8, r9, d0
 80096ac:	4616      	mov	r6, r2
 80096ae:	f7ff fcd5 	bl	800905c <_Balloc>
 80096b2:	4604      	mov	r4, r0
 80096b4:	b930      	cbnz	r0, 80096c4 <__d2b+0x24>
 80096b6:	4602      	mov	r2, r0
 80096b8:	4b24      	ldr	r3, [pc, #144]	; (800974c <__d2b+0xac>)
 80096ba:	4825      	ldr	r0, [pc, #148]	; (8009750 <__d2b+0xb0>)
 80096bc:	f240 310f 	movw	r1, #783	; 0x30f
 80096c0:	f000 fc60 	bl	8009f84 <__assert_func>
 80096c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80096c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096cc:	bb2d      	cbnz	r5, 800971a <__d2b+0x7a>
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	f1b8 0300 	subs.w	r3, r8, #0
 80096d4:	d026      	beq.n	8009724 <__d2b+0x84>
 80096d6:	4668      	mov	r0, sp
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	f7ff fd87 	bl	80091ec <__lo0bits>
 80096de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80096e2:	b1e8      	cbz	r0, 8009720 <__d2b+0x80>
 80096e4:	f1c0 0320 	rsb	r3, r0, #32
 80096e8:	fa02 f303 	lsl.w	r3, r2, r3
 80096ec:	430b      	orrs	r3, r1
 80096ee:	40c2      	lsrs	r2, r0
 80096f0:	6163      	str	r3, [r4, #20]
 80096f2:	9201      	str	r2, [sp, #4]
 80096f4:	9b01      	ldr	r3, [sp, #4]
 80096f6:	61a3      	str	r3, [r4, #24]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	bf14      	ite	ne
 80096fc:	2202      	movne	r2, #2
 80096fe:	2201      	moveq	r2, #1
 8009700:	6122      	str	r2, [r4, #16]
 8009702:	b1bd      	cbz	r5, 8009734 <__d2b+0x94>
 8009704:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009708:	4405      	add	r5, r0
 800970a:	603d      	str	r5, [r7, #0]
 800970c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009710:	6030      	str	r0, [r6, #0]
 8009712:	4620      	mov	r0, r4
 8009714:	b003      	add	sp, #12
 8009716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800971a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800971e:	e7d6      	b.n	80096ce <__d2b+0x2e>
 8009720:	6161      	str	r1, [r4, #20]
 8009722:	e7e7      	b.n	80096f4 <__d2b+0x54>
 8009724:	a801      	add	r0, sp, #4
 8009726:	f7ff fd61 	bl	80091ec <__lo0bits>
 800972a:	9b01      	ldr	r3, [sp, #4]
 800972c:	6163      	str	r3, [r4, #20]
 800972e:	3020      	adds	r0, #32
 8009730:	2201      	movs	r2, #1
 8009732:	e7e5      	b.n	8009700 <__d2b+0x60>
 8009734:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009738:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800973c:	6038      	str	r0, [r7, #0]
 800973e:	6918      	ldr	r0, [r3, #16]
 8009740:	f7ff fd34 	bl	80091ac <__hi0bits>
 8009744:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009748:	e7e2      	b.n	8009710 <__d2b+0x70>
 800974a:	bf00      	nop
 800974c:	0800aee8 	.word	0x0800aee8
 8009750:	0800aef9 	.word	0x0800aef9

08009754 <__ssputs_r>:
 8009754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009758:	688e      	ldr	r6, [r1, #8]
 800975a:	461f      	mov	r7, r3
 800975c:	42be      	cmp	r6, r7
 800975e:	680b      	ldr	r3, [r1, #0]
 8009760:	4682      	mov	sl, r0
 8009762:	460c      	mov	r4, r1
 8009764:	4690      	mov	r8, r2
 8009766:	d82c      	bhi.n	80097c2 <__ssputs_r+0x6e>
 8009768:	898a      	ldrh	r2, [r1, #12]
 800976a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800976e:	d026      	beq.n	80097be <__ssputs_r+0x6a>
 8009770:	6965      	ldr	r5, [r4, #20]
 8009772:	6909      	ldr	r1, [r1, #16]
 8009774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009778:	eba3 0901 	sub.w	r9, r3, r1
 800977c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009780:	1c7b      	adds	r3, r7, #1
 8009782:	444b      	add	r3, r9
 8009784:	106d      	asrs	r5, r5, #1
 8009786:	429d      	cmp	r5, r3
 8009788:	bf38      	it	cc
 800978a:	461d      	movcc	r5, r3
 800978c:	0553      	lsls	r3, r2, #21
 800978e:	d527      	bpl.n	80097e0 <__ssputs_r+0x8c>
 8009790:	4629      	mov	r1, r5
 8009792:	f7ff fbd7 	bl	8008f44 <_malloc_r>
 8009796:	4606      	mov	r6, r0
 8009798:	b360      	cbz	r0, 80097f4 <__ssputs_r+0xa0>
 800979a:	6921      	ldr	r1, [r4, #16]
 800979c:	464a      	mov	r2, r9
 800979e:	f000 fbe3 	bl	8009f68 <memcpy>
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ac:	81a3      	strh	r3, [r4, #12]
 80097ae:	6126      	str	r6, [r4, #16]
 80097b0:	6165      	str	r5, [r4, #20]
 80097b2:	444e      	add	r6, r9
 80097b4:	eba5 0509 	sub.w	r5, r5, r9
 80097b8:	6026      	str	r6, [r4, #0]
 80097ba:	60a5      	str	r5, [r4, #8]
 80097bc:	463e      	mov	r6, r7
 80097be:	42be      	cmp	r6, r7
 80097c0:	d900      	bls.n	80097c4 <__ssputs_r+0x70>
 80097c2:	463e      	mov	r6, r7
 80097c4:	6820      	ldr	r0, [r4, #0]
 80097c6:	4632      	mov	r2, r6
 80097c8:	4641      	mov	r1, r8
 80097ca:	f000 fba3 	bl	8009f14 <memmove>
 80097ce:	68a3      	ldr	r3, [r4, #8]
 80097d0:	1b9b      	subs	r3, r3, r6
 80097d2:	60a3      	str	r3, [r4, #8]
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	4433      	add	r3, r6
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	2000      	movs	r0, #0
 80097dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e0:	462a      	mov	r2, r5
 80097e2:	f000 fc15 	bl	800a010 <_realloc_r>
 80097e6:	4606      	mov	r6, r0
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d1e0      	bne.n	80097ae <__ssputs_r+0x5a>
 80097ec:	6921      	ldr	r1, [r4, #16]
 80097ee:	4650      	mov	r0, sl
 80097f0:	f7ff fb34 	bl	8008e5c <_free_r>
 80097f4:	230c      	movs	r3, #12
 80097f6:	f8ca 3000 	str.w	r3, [sl]
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009800:	81a3      	strh	r3, [r4, #12]
 8009802:	f04f 30ff 	mov.w	r0, #4294967295
 8009806:	e7e9      	b.n	80097dc <__ssputs_r+0x88>

08009808 <_svfiprintf_r>:
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	4698      	mov	r8, r3
 800980e:	898b      	ldrh	r3, [r1, #12]
 8009810:	061b      	lsls	r3, r3, #24
 8009812:	b09d      	sub	sp, #116	; 0x74
 8009814:	4607      	mov	r7, r0
 8009816:	460d      	mov	r5, r1
 8009818:	4614      	mov	r4, r2
 800981a:	d50e      	bpl.n	800983a <_svfiprintf_r+0x32>
 800981c:	690b      	ldr	r3, [r1, #16]
 800981e:	b963      	cbnz	r3, 800983a <_svfiprintf_r+0x32>
 8009820:	2140      	movs	r1, #64	; 0x40
 8009822:	f7ff fb8f 	bl	8008f44 <_malloc_r>
 8009826:	6028      	str	r0, [r5, #0]
 8009828:	6128      	str	r0, [r5, #16]
 800982a:	b920      	cbnz	r0, 8009836 <_svfiprintf_r+0x2e>
 800982c:	230c      	movs	r3, #12
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	f04f 30ff 	mov.w	r0, #4294967295
 8009834:	e0d0      	b.n	80099d8 <_svfiprintf_r+0x1d0>
 8009836:	2340      	movs	r3, #64	; 0x40
 8009838:	616b      	str	r3, [r5, #20]
 800983a:	2300      	movs	r3, #0
 800983c:	9309      	str	r3, [sp, #36]	; 0x24
 800983e:	2320      	movs	r3, #32
 8009840:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009844:	f8cd 800c 	str.w	r8, [sp, #12]
 8009848:	2330      	movs	r3, #48	; 0x30
 800984a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80099f0 <_svfiprintf_r+0x1e8>
 800984e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009852:	f04f 0901 	mov.w	r9, #1
 8009856:	4623      	mov	r3, r4
 8009858:	469a      	mov	sl, r3
 800985a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800985e:	b10a      	cbz	r2, 8009864 <_svfiprintf_r+0x5c>
 8009860:	2a25      	cmp	r2, #37	; 0x25
 8009862:	d1f9      	bne.n	8009858 <_svfiprintf_r+0x50>
 8009864:	ebba 0b04 	subs.w	fp, sl, r4
 8009868:	d00b      	beq.n	8009882 <_svfiprintf_r+0x7a>
 800986a:	465b      	mov	r3, fp
 800986c:	4622      	mov	r2, r4
 800986e:	4629      	mov	r1, r5
 8009870:	4638      	mov	r0, r7
 8009872:	f7ff ff6f 	bl	8009754 <__ssputs_r>
 8009876:	3001      	adds	r0, #1
 8009878:	f000 80a9 	beq.w	80099ce <_svfiprintf_r+0x1c6>
 800987c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800987e:	445a      	add	r2, fp
 8009880:	9209      	str	r2, [sp, #36]	; 0x24
 8009882:	f89a 3000 	ldrb.w	r3, [sl]
 8009886:	2b00      	cmp	r3, #0
 8009888:	f000 80a1 	beq.w	80099ce <_svfiprintf_r+0x1c6>
 800988c:	2300      	movs	r3, #0
 800988e:	f04f 32ff 	mov.w	r2, #4294967295
 8009892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009896:	f10a 0a01 	add.w	sl, sl, #1
 800989a:	9304      	str	r3, [sp, #16]
 800989c:	9307      	str	r3, [sp, #28]
 800989e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098a2:	931a      	str	r3, [sp, #104]	; 0x68
 80098a4:	4654      	mov	r4, sl
 80098a6:	2205      	movs	r2, #5
 80098a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ac:	4850      	ldr	r0, [pc, #320]	; (80099f0 <_svfiprintf_r+0x1e8>)
 80098ae:	f7f6 fc8f 	bl	80001d0 <memchr>
 80098b2:	9a04      	ldr	r2, [sp, #16]
 80098b4:	b9d8      	cbnz	r0, 80098ee <_svfiprintf_r+0xe6>
 80098b6:	06d0      	lsls	r0, r2, #27
 80098b8:	bf44      	itt	mi
 80098ba:	2320      	movmi	r3, #32
 80098bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c0:	0711      	lsls	r1, r2, #28
 80098c2:	bf44      	itt	mi
 80098c4:	232b      	movmi	r3, #43	; 0x2b
 80098c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ca:	f89a 3000 	ldrb.w	r3, [sl]
 80098ce:	2b2a      	cmp	r3, #42	; 0x2a
 80098d0:	d015      	beq.n	80098fe <_svfiprintf_r+0xf6>
 80098d2:	9a07      	ldr	r2, [sp, #28]
 80098d4:	4654      	mov	r4, sl
 80098d6:	2000      	movs	r0, #0
 80098d8:	f04f 0c0a 	mov.w	ip, #10
 80098dc:	4621      	mov	r1, r4
 80098de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098e2:	3b30      	subs	r3, #48	; 0x30
 80098e4:	2b09      	cmp	r3, #9
 80098e6:	d94d      	bls.n	8009984 <_svfiprintf_r+0x17c>
 80098e8:	b1b0      	cbz	r0, 8009918 <_svfiprintf_r+0x110>
 80098ea:	9207      	str	r2, [sp, #28]
 80098ec:	e014      	b.n	8009918 <_svfiprintf_r+0x110>
 80098ee:	eba0 0308 	sub.w	r3, r0, r8
 80098f2:	fa09 f303 	lsl.w	r3, r9, r3
 80098f6:	4313      	orrs	r3, r2
 80098f8:	9304      	str	r3, [sp, #16]
 80098fa:	46a2      	mov	sl, r4
 80098fc:	e7d2      	b.n	80098a4 <_svfiprintf_r+0x9c>
 80098fe:	9b03      	ldr	r3, [sp, #12]
 8009900:	1d19      	adds	r1, r3, #4
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	9103      	str	r1, [sp, #12]
 8009906:	2b00      	cmp	r3, #0
 8009908:	bfbb      	ittet	lt
 800990a:	425b      	neglt	r3, r3
 800990c:	f042 0202 	orrlt.w	r2, r2, #2
 8009910:	9307      	strge	r3, [sp, #28]
 8009912:	9307      	strlt	r3, [sp, #28]
 8009914:	bfb8      	it	lt
 8009916:	9204      	strlt	r2, [sp, #16]
 8009918:	7823      	ldrb	r3, [r4, #0]
 800991a:	2b2e      	cmp	r3, #46	; 0x2e
 800991c:	d10c      	bne.n	8009938 <_svfiprintf_r+0x130>
 800991e:	7863      	ldrb	r3, [r4, #1]
 8009920:	2b2a      	cmp	r3, #42	; 0x2a
 8009922:	d134      	bne.n	800998e <_svfiprintf_r+0x186>
 8009924:	9b03      	ldr	r3, [sp, #12]
 8009926:	1d1a      	adds	r2, r3, #4
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	9203      	str	r2, [sp, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	bfb8      	it	lt
 8009930:	f04f 33ff 	movlt.w	r3, #4294967295
 8009934:	3402      	adds	r4, #2
 8009936:	9305      	str	r3, [sp, #20]
 8009938:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009a00 <_svfiprintf_r+0x1f8>
 800993c:	7821      	ldrb	r1, [r4, #0]
 800993e:	2203      	movs	r2, #3
 8009940:	4650      	mov	r0, sl
 8009942:	f7f6 fc45 	bl	80001d0 <memchr>
 8009946:	b138      	cbz	r0, 8009958 <_svfiprintf_r+0x150>
 8009948:	9b04      	ldr	r3, [sp, #16]
 800994a:	eba0 000a 	sub.w	r0, r0, sl
 800994e:	2240      	movs	r2, #64	; 0x40
 8009950:	4082      	lsls	r2, r0
 8009952:	4313      	orrs	r3, r2
 8009954:	3401      	adds	r4, #1
 8009956:	9304      	str	r3, [sp, #16]
 8009958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995c:	4825      	ldr	r0, [pc, #148]	; (80099f4 <_svfiprintf_r+0x1ec>)
 800995e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009962:	2206      	movs	r2, #6
 8009964:	f7f6 fc34 	bl	80001d0 <memchr>
 8009968:	2800      	cmp	r0, #0
 800996a:	d038      	beq.n	80099de <_svfiprintf_r+0x1d6>
 800996c:	4b22      	ldr	r3, [pc, #136]	; (80099f8 <_svfiprintf_r+0x1f0>)
 800996e:	bb1b      	cbnz	r3, 80099b8 <_svfiprintf_r+0x1b0>
 8009970:	9b03      	ldr	r3, [sp, #12]
 8009972:	3307      	adds	r3, #7
 8009974:	f023 0307 	bic.w	r3, r3, #7
 8009978:	3308      	adds	r3, #8
 800997a:	9303      	str	r3, [sp, #12]
 800997c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800997e:	4433      	add	r3, r6
 8009980:	9309      	str	r3, [sp, #36]	; 0x24
 8009982:	e768      	b.n	8009856 <_svfiprintf_r+0x4e>
 8009984:	fb0c 3202 	mla	r2, ip, r2, r3
 8009988:	460c      	mov	r4, r1
 800998a:	2001      	movs	r0, #1
 800998c:	e7a6      	b.n	80098dc <_svfiprintf_r+0xd4>
 800998e:	2300      	movs	r3, #0
 8009990:	3401      	adds	r4, #1
 8009992:	9305      	str	r3, [sp, #20]
 8009994:	4619      	mov	r1, r3
 8009996:	f04f 0c0a 	mov.w	ip, #10
 800999a:	4620      	mov	r0, r4
 800999c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099a0:	3a30      	subs	r2, #48	; 0x30
 80099a2:	2a09      	cmp	r2, #9
 80099a4:	d903      	bls.n	80099ae <_svfiprintf_r+0x1a6>
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0c6      	beq.n	8009938 <_svfiprintf_r+0x130>
 80099aa:	9105      	str	r1, [sp, #20]
 80099ac:	e7c4      	b.n	8009938 <_svfiprintf_r+0x130>
 80099ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80099b2:	4604      	mov	r4, r0
 80099b4:	2301      	movs	r3, #1
 80099b6:	e7f0      	b.n	800999a <_svfiprintf_r+0x192>
 80099b8:	ab03      	add	r3, sp, #12
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	462a      	mov	r2, r5
 80099be:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <_svfiprintf_r+0x1f4>)
 80099c0:	a904      	add	r1, sp, #16
 80099c2:	4638      	mov	r0, r7
 80099c4:	f7fd fe50 	bl	8007668 <_printf_float>
 80099c8:	1c42      	adds	r2, r0, #1
 80099ca:	4606      	mov	r6, r0
 80099cc:	d1d6      	bne.n	800997c <_svfiprintf_r+0x174>
 80099ce:	89ab      	ldrh	r3, [r5, #12]
 80099d0:	065b      	lsls	r3, r3, #25
 80099d2:	f53f af2d 	bmi.w	8009830 <_svfiprintf_r+0x28>
 80099d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099d8:	b01d      	add	sp, #116	; 0x74
 80099da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099de:	ab03      	add	r3, sp, #12
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	462a      	mov	r2, r5
 80099e4:	4b05      	ldr	r3, [pc, #20]	; (80099fc <_svfiprintf_r+0x1f4>)
 80099e6:	a904      	add	r1, sp, #16
 80099e8:	4638      	mov	r0, r7
 80099ea:	f7fe f8e1 	bl	8007bb0 <_printf_i>
 80099ee:	e7eb      	b.n	80099c8 <_svfiprintf_r+0x1c0>
 80099f0:	0800b054 	.word	0x0800b054
 80099f4:	0800b05e 	.word	0x0800b05e
 80099f8:	08007669 	.word	0x08007669
 80099fc:	08009755 	.word	0x08009755
 8009a00:	0800b05a 	.word	0x0800b05a

08009a04 <__sfputc_r>:
 8009a04:	6893      	ldr	r3, [r2, #8]
 8009a06:	3b01      	subs	r3, #1
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	b410      	push	{r4}
 8009a0c:	6093      	str	r3, [r2, #8]
 8009a0e:	da08      	bge.n	8009a22 <__sfputc_r+0x1e>
 8009a10:	6994      	ldr	r4, [r2, #24]
 8009a12:	42a3      	cmp	r3, r4
 8009a14:	db01      	blt.n	8009a1a <__sfputc_r+0x16>
 8009a16:	290a      	cmp	r1, #10
 8009a18:	d103      	bne.n	8009a22 <__sfputc_r+0x1e>
 8009a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a1e:	f000 b9e3 	b.w	8009de8 <__swbuf_r>
 8009a22:	6813      	ldr	r3, [r2, #0]
 8009a24:	1c58      	adds	r0, r3, #1
 8009a26:	6010      	str	r0, [r2, #0]
 8009a28:	7019      	strb	r1, [r3, #0]
 8009a2a:	4608      	mov	r0, r1
 8009a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <__sfputs_r>:
 8009a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a34:	4606      	mov	r6, r0
 8009a36:	460f      	mov	r7, r1
 8009a38:	4614      	mov	r4, r2
 8009a3a:	18d5      	adds	r5, r2, r3
 8009a3c:	42ac      	cmp	r4, r5
 8009a3e:	d101      	bne.n	8009a44 <__sfputs_r+0x12>
 8009a40:	2000      	movs	r0, #0
 8009a42:	e007      	b.n	8009a54 <__sfputs_r+0x22>
 8009a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a48:	463a      	mov	r2, r7
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f7ff ffda 	bl	8009a04 <__sfputc_r>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d1f3      	bne.n	8009a3c <__sfputs_r+0xa>
 8009a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a58 <_vfiprintf_r>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	460d      	mov	r5, r1
 8009a5e:	b09d      	sub	sp, #116	; 0x74
 8009a60:	4614      	mov	r4, r2
 8009a62:	4698      	mov	r8, r3
 8009a64:	4606      	mov	r6, r0
 8009a66:	b118      	cbz	r0, 8009a70 <_vfiprintf_r+0x18>
 8009a68:	6a03      	ldr	r3, [r0, #32]
 8009a6a:	b90b      	cbnz	r3, 8009a70 <_vfiprintf_r+0x18>
 8009a6c:	f7fe fa4e 	bl	8007f0c <__sinit>
 8009a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a72:	07d9      	lsls	r1, r3, #31
 8009a74:	d405      	bmi.n	8009a82 <_vfiprintf_r+0x2a>
 8009a76:	89ab      	ldrh	r3, [r5, #12]
 8009a78:	059a      	lsls	r2, r3, #22
 8009a7a:	d402      	bmi.n	8009a82 <_vfiprintf_r+0x2a>
 8009a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a7e:	f7fe fb6e 	bl	800815e <__retarget_lock_acquire_recursive>
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	071b      	lsls	r3, r3, #28
 8009a86:	d501      	bpl.n	8009a8c <_vfiprintf_r+0x34>
 8009a88:	692b      	ldr	r3, [r5, #16]
 8009a8a:	b99b      	cbnz	r3, 8009ab4 <_vfiprintf_r+0x5c>
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f000 f9e8 	bl	8009e64 <__swsetup_r>
 8009a94:	b170      	cbz	r0, 8009ab4 <_vfiprintf_r+0x5c>
 8009a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a98:	07dc      	lsls	r4, r3, #31
 8009a9a:	d504      	bpl.n	8009aa6 <_vfiprintf_r+0x4e>
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	b01d      	add	sp, #116	; 0x74
 8009aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa6:	89ab      	ldrh	r3, [r5, #12]
 8009aa8:	0598      	lsls	r0, r3, #22
 8009aaa:	d4f7      	bmi.n	8009a9c <_vfiprintf_r+0x44>
 8009aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aae:	f7fe fb57 	bl	8008160 <__retarget_lock_release_recursive>
 8009ab2:	e7f3      	b.n	8009a9c <_vfiprintf_r+0x44>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab8:	2320      	movs	r3, #32
 8009aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ac2:	2330      	movs	r3, #48	; 0x30
 8009ac4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009c78 <_vfiprintf_r+0x220>
 8009ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009acc:	f04f 0901 	mov.w	r9, #1
 8009ad0:	4623      	mov	r3, r4
 8009ad2:	469a      	mov	sl, r3
 8009ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ad8:	b10a      	cbz	r2, 8009ade <_vfiprintf_r+0x86>
 8009ada:	2a25      	cmp	r2, #37	; 0x25
 8009adc:	d1f9      	bne.n	8009ad2 <_vfiprintf_r+0x7a>
 8009ade:	ebba 0b04 	subs.w	fp, sl, r4
 8009ae2:	d00b      	beq.n	8009afc <_vfiprintf_r+0xa4>
 8009ae4:	465b      	mov	r3, fp
 8009ae6:	4622      	mov	r2, r4
 8009ae8:	4629      	mov	r1, r5
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7ff ffa1 	bl	8009a32 <__sfputs_r>
 8009af0:	3001      	adds	r0, #1
 8009af2:	f000 80a9 	beq.w	8009c48 <_vfiprintf_r+0x1f0>
 8009af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009af8:	445a      	add	r2, fp
 8009afa:	9209      	str	r2, [sp, #36]	; 0x24
 8009afc:	f89a 3000 	ldrb.w	r3, [sl]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 80a1 	beq.w	8009c48 <_vfiprintf_r+0x1f0>
 8009b06:	2300      	movs	r3, #0
 8009b08:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b10:	f10a 0a01 	add.w	sl, sl, #1
 8009b14:	9304      	str	r3, [sp, #16]
 8009b16:	9307      	str	r3, [sp, #28]
 8009b18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8009b1e:	4654      	mov	r4, sl
 8009b20:	2205      	movs	r2, #5
 8009b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b26:	4854      	ldr	r0, [pc, #336]	; (8009c78 <_vfiprintf_r+0x220>)
 8009b28:	f7f6 fb52 	bl	80001d0 <memchr>
 8009b2c:	9a04      	ldr	r2, [sp, #16]
 8009b2e:	b9d8      	cbnz	r0, 8009b68 <_vfiprintf_r+0x110>
 8009b30:	06d1      	lsls	r1, r2, #27
 8009b32:	bf44      	itt	mi
 8009b34:	2320      	movmi	r3, #32
 8009b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b3a:	0713      	lsls	r3, r2, #28
 8009b3c:	bf44      	itt	mi
 8009b3e:	232b      	movmi	r3, #43	; 0x2b
 8009b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b44:	f89a 3000 	ldrb.w	r3, [sl]
 8009b48:	2b2a      	cmp	r3, #42	; 0x2a
 8009b4a:	d015      	beq.n	8009b78 <_vfiprintf_r+0x120>
 8009b4c:	9a07      	ldr	r2, [sp, #28]
 8009b4e:	4654      	mov	r4, sl
 8009b50:	2000      	movs	r0, #0
 8009b52:	f04f 0c0a 	mov.w	ip, #10
 8009b56:	4621      	mov	r1, r4
 8009b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b5c:	3b30      	subs	r3, #48	; 0x30
 8009b5e:	2b09      	cmp	r3, #9
 8009b60:	d94d      	bls.n	8009bfe <_vfiprintf_r+0x1a6>
 8009b62:	b1b0      	cbz	r0, 8009b92 <_vfiprintf_r+0x13a>
 8009b64:	9207      	str	r2, [sp, #28]
 8009b66:	e014      	b.n	8009b92 <_vfiprintf_r+0x13a>
 8009b68:	eba0 0308 	sub.w	r3, r0, r8
 8009b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8009b70:	4313      	orrs	r3, r2
 8009b72:	9304      	str	r3, [sp, #16]
 8009b74:	46a2      	mov	sl, r4
 8009b76:	e7d2      	b.n	8009b1e <_vfiprintf_r+0xc6>
 8009b78:	9b03      	ldr	r3, [sp, #12]
 8009b7a:	1d19      	adds	r1, r3, #4
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	9103      	str	r1, [sp, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	bfbb      	ittet	lt
 8009b84:	425b      	neglt	r3, r3
 8009b86:	f042 0202 	orrlt.w	r2, r2, #2
 8009b8a:	9307      	strge	r3, [sp, #28]
 8009b8c:	9307      	strlt	r3, [sp, #28]
 8009b8e:	bfb8      	it	lt
 8009b90:	9204      	strlt	r2, [sp, #16]
 8009b92:	7823      	ldrb	r3, [r4, #0]
 8009b94:	2b2e      	cmp	r3, #46	; 0x2e
 8009b96:	d10c      	bne.n	8009bb2 <_vfiprintf_r+0x15a>
 8009b98:	7863      	ldrb	r3, [r4, #1]
 8009b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b9c:	d134      	bne.n	8009c08 <_vfiprintf_r+0x1b0>
 8009b9e:	9b03      	ldr	r3, [sp, #12]
 8009ba0:	1d1a      	adds	r2, r3, #4
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	9203      	str	r2, [sp, #12]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	bfb8      	it	lt
 8009baa:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bae:	3402      	adds	r4, #2
 8009bb0:	9305      	str	r3, [sp, #20]
 8009bb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009c88 <_vfiprintf_r+0x230>
 8009bb6:	7821      	ldrb	r1, [r4, #0]
 8009bb8:	2203      	movs	r2, #3
 8009bba:	4650      	mov	r0, sl
 8009bbc:	f7f6 fb08 	bl	80001d0 <memchr>
 8009bc0:	b138      	cbz	r0, 8009bd2 <_vfiprintf_r+0x17a>
 8009bc2:	9b04      	ldr	r3, [sp, #16]
 8009bc4:	eba0 000a 	sub.w	r0, r0, sl
 8009bc8:	2240      	movs	r2, #64	; 0x40
 8009bca:	4082      	lsls	r2, r0
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	3401      	adds	r4, #1
 8009bd0:	9304      	str	r3, [sp, #16]
 8009bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd6:	4829      	ldr	r0, [pc, #164]	; (8009c7c <_vfiprintf_r+0x224>)
 8009bd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bdc:	2206      	movs	r2, #6
 8009bde:	f7f6 faf7 	bl	80001d0 <memchr>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d03f      	beq.n	8009c66 <_vfiprintf_r+0x20e>
 8009be6:	4b26      	ldr	r3, [pc, #152]	; (8009c80 <_vfiprintf_r+0x228>)
 8009be8:	bb1b      	cbnz	r3, 8009c32 <_vfiprintf_r+0x1da>
 8009bea:	9b03      	ldr	r3, [sp, #12]
 8009bec:	3307      	adds	r3, #7
 8009bee:	f023 0307 	bic.w	r3, r3, #7
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	9303      	str	r3, [sp, #12]
 8009bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf8:	443b      	add	r3, r7
 8009bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8009bfc:	e768      	b.n	8009ad0 <_vfiprintf_r+0x78>
 8009bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c02:	460c      	mov	r4, r1
 8009c04:	2001      	movs	r0, #1
 8009c06:	e7a6      	b.n	8009b56 <_vfiprintf_r+0xfe>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	3401      	adds	r4, #1
 8009c0c:	9305      	str	r3, [sp, #20]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	f04f 0c0a 	mov.w	ip, #10
 8009c14:	4620      	mov	r0, r4
 8009c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c1a:	3a30      	subs	r2, #48	; 0x30
 8009c1c:	2a09      	cmp	r2, #9
 8009c1e:	d903      	bls.n	8009c28 <_vfiprintf_r+0x1d0>
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d0c6      	beq.n	8009bb2 <_vfiprintf_r+0x15a>
 8009c24:	9105      	str	r1, [sp, #20]
 8009c26:	e7c4      	b.n	8009bb2 <_vfiprintf_r+0x15a>
 8009c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e7f0      	b.n	8009c14 <_vfiprintf_r+0x1bc>
 8009c32:	ab03      	add	r3, sp, #12
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	462a      	mov	r2, r5
 8009c38:	4b12      	ldr	r3, [pc, #72]	; (8009c84 <_vfiprintf_r+0x22c>)
 8009c3a:	a904      	add	r1, sp, #16
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f7fd fd13 	bl	8007668 <_printf_float>
 8009c42:	4607      	mov	r7, r0
 8009c44:	1c78      	adds	r0, r7, #1
 8009c46:	d1d6      	bne.n	8009bf6 <_vfiprintf_r+0x19e>
 8009c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c4a:	07d9      	lsls	r1, r3, #31
 8009c4c:	d405      	bmi.n	8009c5a <_vfiprintf_r+0x202>
 8009c4e:	89ab      	ldrh	r3, [r5, #12]
 8009c50:	059a      	lsls	r2, r3, #22
 8009c52:	d402      	bmi.n	8009c5a <_vfiprintf_r+0x202>
 8009c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c56:	f7fe fa83 	bl	8008160 <__retarget_lock_release_recursive>
 8009c5a:	89ab      	ldrh	r3, [r5, #12]
 8009c5c:	065b      	lsls	r3, r3, #25
 8009c5e:	f53f af1d 	bmi.w	8009a9c <_vfiprintf_r+0x44>
 8009c62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c64:	e71c      	b.n	8009aa0 <_vfiprintf_r+0x48>
 8009c66:	ab03      	add	r3, sp, #12
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	462a      	mov	r2, r5
 8009c6c:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <_vfiprintf_r+0x22c>)
 8009c6e:	a904      	add	r1, sp, #16
 8009c70:	4630      	mov	r0, r6
 8009c72:	f7fd ff9d 	bl	8007bb0 <_printf_i>
 8009c76:	e7e4      	b.n	8009c42 <_vfiprintf_r+0x1ea>
 8009c78:	0800b054 	.word	0x0800b054
 8009c7c:	0800b05e 	.word	0x0800b05e
 8009c80:	08007669 	.word	0x08007669
 8009c84:	08009a33 	.word	0x08009a33
 8009c88:	0800b05a 	.word	0x0800b05a

08009c8c <__sflush_r>:
 8009c8c:	898a      	ldrh	r2, [r1, #12]
 8009c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c92:	4605      	mov	r5, r0
 8009c94:	0710      	lsls	r0, r2, #28
 8009c96:	460c      	mov	r4, r1
 8009c98:	d458      	bmi.n	8009d4c <__sflush_r+0xc0>
 8009c9a:	684b      	ldr	r3, [r1, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	dc05      	bgt.n	8009cac <__sflush_r+0x20>
 8009ca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	dc02      	bgt.n	8009cac <__sflush_r+0x20>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cae:	2e00      	cmp	r6, #0
 8009cb0:	d0f9      	beq.n	8009ca6 <__sflush_r+0x1a>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cb8:	682f      	ldr	r7, [r5, #0]
 8009cba:	6a21      	ldr	r1, [r4, #32]
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	d032      	beq.n	8009d26 <__sflush_r+0x9a>
 8009cc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	075a      	lsls	r2, r3, #29
 8009cc6:	d505      	bpl.n	8009cd4 <__sflush_r+0x48>
 8009cc8:	6863      	ldr	r3, [r4, #4]
 8009cca:	1ac0      	subs	r0, r0, r3
 8009ccc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cce:	b10b      	cbz	r3, 8009cd4 <__sflush_r+0x48>
 8009cd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cd2:	1ac0      	subs	r0, r0, r3
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cda:	6a21      	ldr	r1, [r4, #32]
 8009cdc:	4628      	mov	r0, r5
 8009cde:	47b0      	blx	r6
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	d106      	bne.n	8009cf4 <__sflush_r+0x68>
 8009ce6:	6829      	ldr	r1, [r5, #0]
 8009ce8:	291d      	cmp	r1, #29
 8009cea:	d82b      	bhi.n	8009d44 <__sflush_r+0xb8>
 8009cec:	4a29      	ldr	r2, [pc, #164]	; (8009d94 <__sflush_r+0x108>)
 8009cee:	410a      	asrs	r2, r1
 8009cf0:	07d6      	lsls	r6, r2, #31
 8009cf2:	d427      	bmi.n	8009d44 <__sflush_r+0xb8>
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	6062      	str	r2, [r4, #4]
 8009cf8:	04d9      	lsls	r1, r3, #19
 8009cfa:	6922      	ldr	r2, [r4, #16]
 8009cfc:	6022      	str	r2, [r4, #0]
 8009cfe:	d504      	bpl.n	8009d0a <__sflush_r+0x7e>
 8009d00:	1c42      	adds	r2, r0, #1
 8009d02:	d101      	bne.n	8009d08 <__sflush_r+0x7c>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	b903      	cbnz	r3, 8009d0a <__sflush_r+0x7e>
 8009d08:	6560      	str	r0, [r4, #84]	; 0x54
 8009d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d0c:	602f      	str	r7, [r5, #0]
 8009d0e:	2900      	cmp	r1, #0
 8009d10:	d0c9      	beq.n	8009ca6 <__sflush_r+0x1a>
 8009d12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d16:	4299      	cmp	r1, r3
 8009d18:	d002      	beq.n	8009d20 <__sflush_r+0x94>
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	f7ff f89e 	bl	8008e5c <_free_r>
 8009d20:	2000      	movs	r0, #0
 8009d22:	6360      	str	r0, [r4, #52]	; 0x34
 8009d24:	e7c0      	b.n	8009ca8 <__sflush_r+0x1c>
 8009d26:	2301      	movs	r3, #1
 8009d28:	4628      	mov	r0, r5
 8009d2a:	47b0      	blx	r6
 8009d2c:	1c41      	adds	r1, r0, #1
 8009d2e:	d1c8      	bne.n	8009cc2 <__sflush_r+0x36>
 8009d30:	682b      	ldr	r3, [r5, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0c5      	beq.n	8009cc2 <__sflush_r+0x36>
 8009d36:	2b1d      	cmp	r3, #29
 8009d38:	d001      	beq.n	8009d3e <__sflush_r+0xb2>
 8009d3a:	2b16      	cmp	r3, #22
 8009d3c:	d101      	bne.n	8009d42 <__sflush_r+0xb6>
 8009d3e:	602f      	str	r7, [r5, #0]
 8009d40:	e7b1      	b.n	8009ca6 <__sflush_r+0x1a>
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d48:	81a3      	strh	r3, [r4, #12]
 8009d4a:	e7ad      	b.n	8009ca8 <__sflush_r+0x1c>
 8009d4c:	690f      	ldr	r7, [r1, #16]
 8009d4e:	2f00      	cmp	r7, #0
 8009d50:	d0a9      	beq.n	8009ca6 <__sflush_r+0x1a>
 8009d52:	0793      	lsls	r3, r2, #30
 8009d54:	680e      	ldr	r6, [r1, #0]
 8009d56:	bf08      	it	eq
 8009d58:	694b      	ldreq	r3, [r1, #20]
 8009d5a:	600f      	str	r7, [r1, #0]
 8009d5c:	bf18      	it	ne
 8009d5e:	2300      	movne	r3, #0
 8009d60:	eba6 0807 	sub.w	r8, r6, r7
 8009d64:	608b      	str	r3, [r1, #8]
 8009d66:	f1b8 0f00 	cmp.w	r8, #0
 8009d6a:	dd9c      	ble.n	8009ca6 <__sflush_r+0x1a>
 8009d6c:	6a21      	ldr	r1, [r4, #32]
 8009d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d70:	4643      	mov	r3, r8
 8009d72:	463a      	mov	r2, r7
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b0      	blx	r6
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	dc06      	bgt.n	8009d8a <__sflush_r+0xfe>
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d82:	81a3      	strh	r3, [r4, #12]
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295
 8009d88:	e78e      	b.n	8009ca8 <__sflush_r+0x1c>
 8009d8a:	4407      	add	r7, r0
 8009d8c:	eba8 0800 	sub.w	r8, r8, r0
 8009d90:	e7e9      	b.n	8009d66 <__sflush_r+0xda>
 8009d92:	bf00      	nop
 8009d94:	dfbffffe 	.word	0xdfbffffe

08009d98 <_fflush_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	690b      	ldr	r3, [r1, #16]
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	460c      	mov	r4, r1
 8009da0:	b913      	cbnz	r3, 8009da8 <_fflush_r+0x10>
 8009da2:	2500      	movs	r5, #0
 8009da4:	4628      	mov	r0, r5
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	b118      	cbz	r0, 8009db2 <_fflush_r+0x1a>
 8009daa:	6a03      	ldr	r3, [r0, #32]
 8009dac:	b90b      	cbnz	r3, 8009db2 <_fflush_r+0x1a>
 8009dae:	f7fe f8ad 	bl	8007f0c <__sinit>
 8009db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d0f3      	beq.n	8009da2 <_fflush_r+0xa>
 8009dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dbc:	07d0      	lsls	r0, r2, #31
 8009dbe:	d404      	bmi.n	8009dca <_fflush_r+0x32>
 8009dc0:	0599      	lsls	r1, r3, #22
 8009dc2:	d402      	bmi.n	8009dca <_fflush_r+0x32>
 8009dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc6:	f7fe f9ca 	bl	800815e <__retarget_lock_acquire_recursive>
 8009dca:	4628      	mov	r0, r5
 8009dcc:	4621      	mov	r1, r4
 8009dce:	f7ff ff5d 	bl	8009c8c <__sflush_r>
 8009dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd4:	07da      	lsls	r2, r3, #31
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	d4e4      	bmi.n	8009da4 <_fflush_r+0xc>
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	059b      	lsls	r3, r3, #22
 8009dde:	d4e1      	bmi.n	8009da4 <_fflush_r+0xc>
 8009de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009de2:	f7fe f9bd 	bl	8008160 <__retarget_lock_release_recursive>
 8009de6:	e7dd      	b.n	8009da4 <_fflush_r+0xc>

08009de8 <__swbuf_r>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	460e      	mov	r6, r1
 8009dec:	4614      	mov	r4, r2
 8009dee:	4605      	mov	r5, r0
 8009df0:	b118      	cbz	r0, 8009dfa <__swbuf_r+0x12>
 8009df2:	6a03      	ldr	r3, [r0, #32]
 8009df4:	b90b      	cbnz	r3, 8009dfa <__swbuf_r+0x12>
 8009df6:	f7fe f889 	bl	8007f0c <__sinit>
 8009dfa:	69a3      	ldr	r3, [r4, #24]
 8009dfc:	60a3      	str	r3, [r4, #8]
 8009dfe:	89a3      	ldrh	r3, [r4, #12]
 8009e00:	071a      	lsls	r2, r3, #28
 8009e02:	d525      	bpl.n	8009e50 <__swbuf_r+0x68>
 8009e04:	6923      	ldr	r3, [r4, #16]
 8009e06:	b31b      	cbz	r3, 8009e50 <__swbuf_r+0x68>
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	6922      	ldr	r2, [r4, #16]
 8009e0c:	1a98      	subs	r0, r3, r2
 8009e0e:	6963      	ldr	r3, [r4, #20]
 8009e10:	b2f6      	uxtb	r6, r6
 8009e12:	4283      	cmp	r3, r0
 8009e14:	4637      	mov	r7, r6
 8009e16:	dc04      	bgt.n	8009e22 <__swbuf_r+0x3a>
 8009e18:	4621      	mov	r1, r4
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f7ff ffbc 	bl	8009d98 <_fflush_r>
 8009e20:	b9e0      	cbnz	r0, 8009e5c <__swbuf_r+0x74>
 8009e22:	68a3      	ldr	r3, [r4, #8]
 8009e24:	3b01      	subs	r3, #1
 8009e26:	60a3      	str	r3, [r4, #8]
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	1c5a      	adds	r2, r3, #1
 8009e2c:	6022      	str	r2, [r4, #0]
 8009e2e:	701e      	strb	r6, [r3, #0]
 8009e30:	6962      	ldr	r2, [r4, #20]
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d004      	beq.n	8009e42 <__swbuf_r+0x5a>
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	07db      	lsls	r3, r3, #31
 8009e3c:	d506      	bpl.n	8009e4c <__swbuf_r+0x64>
 8009e3e:	2e0a      	cmp	r6, #10
 8009e40:	d104      	bne.n	8009e4c <__swbuf_r+0x64>
 8009e42:	4621      	mov	r1, r4
 8009e44:	4628      	mov	r0, r5
 8009e46:	f7ff ffa7 	bl	8009d98 <_fflush_r>
 8009e4a:	b938      	cbnz	r0, 8009e5c <__swbuf_r+0x74>
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e50:	4621      	mov	r1, r4
 8009e52:	4628      	mov	r0, r5
 8009e54:	f000 f806 	bl	8009e64 <__swsetup_r>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d0d5      	beq.n	8009e08 <__swbuf_r+0x20>
 8009e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8009e60:	e7f4      	b.n	8009e4c <__swbuf_r+0x64>
	...

08009e64 <__swsetup_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	4b2a      	ldr	r3, [pc, #168]	; (8009f10 <__swsetup_r+0xac>)
 8009e68:	4605      	mov	r5, r0
 8009e6a:	6818      	ldr	r0, [r3, #0]
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	b118      	cbz	r0, 8009e78 <__swsetup_r+0x14>
 8009e70:	6a03      	ldr	r3, [r0, #32]
 8009e72:	b90b      	cbnz	r3, 8009e78 <__swsetup_r+0x14>
 8009e74:	f7fe f84a 	bl	8007f0c <__sinit>
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e7e:	0718      	lsls	r0, r3, #28
 8009e80:	d422      	bmi.n	8009ec8 <__swsetup_r+0x64>
 8009e82:	06d9      	lsls	r1, r3, #27
 8009e84:	d407      	bmi.n	8009e96 <__swsetup_r+0x32>
 8009e86:	2309      	movs	r3, #9
 8009e88:	602b      	str	r3, [r5, #0]
 8009e8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e8e:	81a3      	strh	r3, [r4, #12]
 8009e90:	f04f 30ff 	mov.w	r0, #4294967295
 8009e94:	e034      	b.n	8009f00 <__swsetup_r+0x9c>
 8009e96:	0758      	lsls	r0, r3, #29
 8009e98:	d512      	bpl.n	8009ec0 <__swsetup_r+0x5c>
 8009e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e9c:	b141      	cbz	r1, 8009eb0 <__swsetup_r+0x4c>
 8009e9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ea2:	4299      	cmp	r1, r3
 8009ea4:	d002      	beq.n	8009eac <__swsetup_r+0x48>
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	f7fe ffd8 	bl	8008e5c <_free_r>
 8009eac:	2300      	movs	r3, #0
 8009eae:	6363      	str	r3, [r4, #52]	; 0x34
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009eb6:	81a3      	strh	r3, [r4, #12]
 8009eb8:	2300      	movs	r3, #0
 8009eba:	6063      	str	r3, [r4, #4]
 8009ebc:	6923      	ldr	r3, [r4, #16]
 8009ebe:	6023      	str	r3, [r4, #0]
 8009ec0:	89a3      	ldrh	r3, [r4, #12]
 8009ec2:	f043 0308 	orr.w	r3, r3, #8
 8009ec6:	81a3      	strh	r3, [r4, #12]
 8009ec8:	6923      	ldr	r3, [r4, #16]
 8009eca:	b94b      	cbnz	r3, 8009ee0 <__swsetup_r+0x7c>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ed6:	d003      	beq.n	8009ee0 <__swsetup_r+0x7c>
 8009ed8:	4621      	mov	r1, r4
 8009eda:	4628      	mov	r0, r5
 8009edc:	f000 f90c 	bl	800a0f8 <__smakebuf_r>
 8009ee0:	89a0      	ldrh	r0, [r4, #12]
 8009ee2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ee6:	f010 0301 	ands.w	r3, r0, #1
 8009eea:	d00a      	beq.n	8009f02 <__swsetup_r+0x9e>
 8009eec:	2300      	movs	r3, #0
 8009eee:	60a3      	str	r3, [r4, #8]
 8009ef0:	6963      	ldr	r3, [r4, #20]
 8009ef2:	425b      	negs	r3, r3
 8009ef4:	61a3      	str	r3, [r4, #24]
 8009ef6:	6923      	ldr	r3, [r4, #16]
 8009ef8:	b943      	cbnz	r3, 8009f0c <__swsetup_r+0xa8>
 8009efa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009efe:	d1c4      	bne.n	8009e8a <__swsetup_r+0x26>
 8009f00:	bd38      	pop	{r3, r4, r5, pc}
 8009f02:	0781      	lsls	r1, r0, #30
 8009f04:	bf58      	it	pl
 8009f06:	6963      	ldrpl	r3, [r4, #20]
 8009f08:	60a3      	str	r3, [r4, #8]
 8009f0a:	e7f4      	b.n	8009ef6 <__swsetup_r+0x92>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e7f7      	b.n	8009f00 <__swsetup_r+0x9c>
 8009f10:	20000064 	.word	0x20000064

08009f14 <memmove>:
 8009f14:	4288      	cmp	r0, r1
 8009f16:	b510      	push	{r4, lr}
 8009f18:	eb01 0402 	add.w	r4, r1, r2
 8009f1c:	d902      	bls.n	8009f24 <memmove+0x10>
 8009f1e:	4284      	cmp	r4, r0
 8009f20:	4623      	mov	r3, r4
 8009f22:	d807      	bhi.n	8009f34 <memmove+0x20>
 8009f24:	1e43      	subs	r3, r0, #1
 8009f26:	42a1      	cmp	r1, r4
 8009f28:	d008      	beq.n	8009f3c <memmove+0x28>
 8009f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f32:	e7f8      	b.n	8009f26 <memmove+0x12>
 8009f34:	4402      	add	r2, r0
 8009f36:	4601      	mov	r1, r0
 8009f38:	428a      	cmp	r2, r1
 8009f3a:	d100      	bne.n	8009f3e <memmove+0x2a>
 8009f3c:	bd10      	pop	{r4, pc}
 8009f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f46:	e7f7      	b.n	8009f38 <memmove+0x24>

08009f48 <_sbrk_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d06      	ldr	r5, [pc, #24]	; (8009f64 <_sbrk_r+0x1c>)
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4608      	mov	r0, r1
 8009f52:	602b      	str	r3, [r5, #0]
 8009f54:	f7f8 f9cc 	bl	80022f0 <_sbrk>
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d102      	bne.n	8009f62 <_sbrk_r+0x1a>
 8009f5c:	682b      	ldr	r3, [r5, #0]
 8009f5e:	b103      	cbz	r3, 8009f62 <_sbrk_r+0x1a>
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	bd38      	pop	{r3, r4, r5, pc}
 8009f64:	200004d0 	.word	0x200004d0

08009f68 <memcpy>:
 8009f68:	440a      	add	r2, r1
 8009f6a:	4291      	cmp	r1, r2
 8009f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f70:	d100      	bne.n	8009f74 <memcpy+0xc>
 8009f72:	4770      	bx	lr
 8009f74:	b510      	push	{r4, lr}
 8009f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f7e:	4291      	cmp	r1, r2
 8009f80:	d1f9      	bne.n	8009f76 <memcpy+0xe>
 8009f82:	bd10      	pop	{r4, pc}

08009f84 <__assert_func>:
 8009f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f86:	4614      	mov	r4, r2
 8009f88:	461a      	mov	r2, r3
 8009f8a:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <__assert_func+0x2c>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4605      	mov	r5, r0
 8009f90:	68d8      	ldr	r0, [r3, #12]
 8009f92:	b14c      	cbz	r4, 8009fa8 <__assert_func+0x24>
 8009f94:	4b07      	ldr	r3, [pc, #28]	; (8009fb4 <__assert_func+0x30>)
 8009f96:	9100      	str	r1, [sp, #0]
 8009f98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f9c:	4906      	ldr	r1, [pc, #24]	; (8009fb8 <__assert_func+0x34>)
 8009f9e:	462b      	mov	r3, r5
 8009fa0:	f000 f872 	bl	800a088 <fiprintf>
 8009fa4:	f000 f906 	bl	800a1b4 <abort>
 8009fa8:	4b04      	ldr	r3, [pc, #16]	; (8009fbc <__assert_func+0x38>)
 8009faa:	461c      	mov	r4, r3
 8009fac:	e7f3      	b.n	8009f96 <__assert_func+0x12>
 8009fae:	bf00      	nop
 8009fb0:	20000064 	.word	0x20000064
 8009fb4:	0800b06f 	.word	0x0800b06f
 8009fb8:	0800b07c 	.word	0x0800b07c
 8009fbc:	0800b0aa 	.word	0x0800b0aa

08009fc0 <_calloc_r>:
 8009fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fc2:	fba1 2402 	umull	r2, r4, r1, r2
 8009fc6:	b94c      	cbnz	r4, 8009fdc <_calloc_r+0x1c>
 8009fc8:	4611      	mov	r1, r2
 8009fca:	9201      	str	r2, [sp, #4]
 8009fcc:	f7fe ffba 	bl	8008f44 <_malloc_r>
 8009fd0:	9a01      	ldr	r2, [sp, #4]
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	b930      	cbnz	r0, 8009fe4 <_calloc_r+0x24>
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	b003      	add	sp, #12
 8009fda:	bd30      	pop	{r4, r5, pc}
 8009fdc:	220c      	movs	r2, #12
 8009fde:	6002      	str	r2, [r0, #0]
 8009fe0:	2500      	movs	r5, #0
 8009fe2:	e7f8      	b.n	8009fd6 <_calloc_r+0x16>
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	f7fe f83c 	bl	8008062 <memset>
 8009fea:	e7f4      	b.n	8009fd6 <_calloc_r+0x16>

08009fec <__ascii_mbtowc>:
 8009fec:	b082      	sub	sp, #8
 8009fee:	b901      	cbnz	r1, 8009ff2 <__ascii_mbtowc+0x6>
 8009ff0:	a901      	add	r1, sp, #4
 8009ff2:	b142      	cbz	r2, 800a006 <__ascii_mbtowc+0x1a>
 8009ff4:	b14b      	cbz	r3, 800a00a <__ascii_mbtowc+0x1e>
 8009ff6:	7813      	ldrb	r3, [r2, #0]
 8009ff8:	600b      	str	r3, [r1, #0]
 8009ffa:	7812      	ldrb	r2, [r2, #0]
 8009ffc:	1e10      	subs	r0, r2, #0
 8009ffe:	bf18      	it	ne
 800a000:	2001      	movne	r0, #1
 800a002:	b002      	add	sp, #8
 800a004:	4770      	bx	lr
 800a006:	4610      	mov	r0, r2
 800a008:	e7fb      	b.n	800a002 <__ascii_mbtowc+0x16>
 800a00a:	f06f 0001 	mvn.w	r0, #1
 800a00e:	e7f8      	b.n	800a002 <__ascii_mbtowc+0x16>

0800a010 <_realloc_r>:
 800a010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a014:	4680      	mov	r8, r0
 800a016:	4614      	mov	r4, r2
 800a018:	460e      	mov	r6, r1
 800a01a:	b921      	cbnz	r1, 800a026 <_realloc_r+0x16>
 800a01c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a020:	4611      	mov	r1, r2
 800a022:	f7fe bf8f 	b.w	8008f44 <_malloc_r>
 800a026:	b92a      	cbnz	r2, 800a034 <_realloc_r+0x24>
 800a028:	f7fe ff18 	bl	8008e5c <_free_r>
 800a02c:	4625      	mov	r5, r4
 800a02e:	4628      	mov	r0, r5
 800a030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a034:	f000 f8c5 	bl	800a1c2 <_malloc_usable_size_r>
 800a038:	4284      	cmp	r4, r0
 800a03a:	4607      	mov	r7, r0
 800a03c:	d802      	bhi.n	800a044 <_realloc_r+0x34>
 800a03e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a042:	d812      	bhi.n	800a06a <_realloc_r+0x5a>
 800a044:	4621      	mov	r1, r4
 800a046:	4640      	mov	r0, r8
 800a048:	f7fe ff7c 	bl	8008f44 <_malloc_r>
 800a04c:	4605      	mov	r5, r0
 800a04e:	2800      	cmp	r0, #0
 800a050:	d0ed      	beq.n	800a02e <_realloc_r+0x1e>
 800a052:	42bc      	cmp	r4, r7
 800a054:	4622      	mov	r2, r4
 800a056:	4631      	mov	r1, r6
 800a058:	bf28      	it	cs
 800a05a:	463a      	movcs	r2, r7
 800a05c:	f7ff ff84 	bl	8009f68 <memcpy>
 800a060:	4631      	mov	r1, r6
 800a062:	4640      	mov	r0, r8
 800a064:	f7fe fefa 	bl	8008e5c <_free_r>
 800a068:	e7e1      	b.n	800a02e <_realloc_r+0x1e>
 800a06a:	4635      	mov	r5, r6
 800a06c:	e7df      	b.n	800a02e <_realloc_r+0x1e>

0800a06e <__ascii_wctomb>:
 800a06e:	b149      	cbz	r1, 800a084 <__ascii_wctomb+0x16>
 800a070:	2aff      	cmp	r2, #255	; 0xff
 800a072:	bf85      	ittet	hi
 800a074:	238a      	movhi	r3, #138	; 0x8a
 800a076:	6003      	strhi	r3, [r0, #0]
 800a078:	700a      	strbls	r2, [r1, #0]
 800a07a:	f04f 30ff 	movhi.w	r0, #4294967295
 800a07e:	bf98      	it	ls
 800a080:	2001      	movls	r0, #1
 800a082:	4770      	bx	lr
 800a084:	4608      	mov	r0, r1
 800a086:	4770      	bx	lr

0800a088 <fiprintf>:
 800a088:	b40e      	push	{r1, r2, r3}
 800a08a:	b503      	push	{r0, r1, lr}
 800a08c:	4601      	mov	r1, r0
 800a08e:	ab03      	add	r3, sp, #12
 800a090:	4805      	ldr	r0, [pc, #20]	; (800a0a8 <fiprintf+0x20>)
 800a092:	f853 2b04 	ldr.w	r2, [r3], #4
 800a096:	6800      	ldr	r0, [r0, #0]
 800a098:	9301      	str	r3, [sp, #4]
 800a09a:	f7ff fcdd 	bl	8009a58 <_vfiprintf_r>
 800a09e:	b002      	add	sp, #8
 800a0a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0a4:	b003      	add	sp, #12
 800a0a6:	4770      	bx	lr
 800a0a8:	20000064 	.word	0x20000064

0800a0ac <__swhatbuf_r>:
 800a0ac:	b570      	push	{r4, r5, r6, lr}
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b4:	2900      	cmp	r1, #0
 800a0b6:	b096      	sub	sp, #88	; 0x58
 800a0b8:	4615      	mov	r5, r2
 800a0ba:	461e      	mov	r6, r3
 800a0bc:	da0d      	bge.n	800a0da <__swhatbuf_r+0x2e>
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a0c4:	f04f 0100 	mov.w	r1, #0
 800a0c8:	bf0c      	ite	eq
 800a0ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a0ce:	2340      	movne	r3, #64	; 0x40
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	6031      	str	r1, [r6, #0]
 800a0d4:	602b      	str	r3, [r5, #0]
 800a0d6:	b016      	add	sp, #88	; 0x58
 800a0d8:	bd70      	pop	{r4, r5, r6, pc}
 800a0da:	466a      	mov	r2, sp
 800a0dc:	f000 f848 	bl	800a170 <_fstat_r>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	dbec      	blt.n	800a0be <__swhatbuf_r+0x12>
 800a0e4:	9901      	ldr	r1, [sp, #4]
 800a0e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a0ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a0ee:	4259      	negs	r1, r3
 800a0f0:	4159      	adcs	r1, r3
 800a0f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0f6:	e7eb      	b.n	800a0d0 <__swhatbuf_r+0x24>

0800a0f8 <__smakebuf_r>:
 800a0f8:	898b      	ldrh	r3, [r1, #12]
 800a0fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0fc:	079d      	lsls	r5, r3, #30
 800a0fe:	4606      	mov	r6, r0
 800a100:	460c      	mov	r4, r1
 800a102:	d507      	bpl.n	800a114 <__smakebuf_r+0x1c>
 800a104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	6123      	str	r3, [r4, #16]
 800a10c:	2301      	movs	r3, #1
 800a10e:	6163      	str	r3, [r4, #20]
 800a110:	b002      	add	sp, #8
 800a112:	bd70      	pop	{r4, r5, r6, pc}
 800a114:	ab01      	add	r3, sp, #4
 800a116:	466a      	mov	r2, sp
 800a118:	f7ff ffc8 	bl	800a0ac <__swhatbuf_r>
 800a11c:	9900      	ldr	r1, [sp, #0]
 800a11e:	4605      	mov	r5, r0
 800a120:	4630      	mov	r0, r6
 800a122:	f7fe ff0f 	bl	8008f44 <_malloc_r>
 800a126:	b948      	cbnz	r0, 800a13c <__smakebuf_r+0x44>
 800a128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a12c:	059a      	lsls	r2, r3, #22
 800a12e:	d4ef      	bmi.n	800a110 <__smakebuf_r+0x18>
 800a130:	f023 0303 	bic.w	r3, r3, #3
 800a134:	f043 0302 	orr.w	r3, r3, #2
 800a138:	81a3      	strh	r3, [r4, #12]
 800a13a:	e7e3      	b.n	800a104 <__smakebuf_r+0xc>
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	6020      	str	r0, [r4, #0]
 800a140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a144:	81a3      	strh	r3, [r4, #12]
 800a146:	9b00      	ldr	r3, [sp, #0]
 800a148:	6163      	str	r3, [r4, #20]
 800a14a:	9b01      	ldr	r3, [sp, #4]
 800a14c:	6120      	str	r0, [r4, #16]
 800a14e:	b15b      	cbz	r3, 800a168 <__smakebuf_r+0x70>
 800a150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a154:	4630      	mov	r0, r6
 800a156:	f000 f81d 	bl	800a194 <_isatty_r>
 800a15a:	b128      	cbz	r0, 800a168 <__smakebuf_r+0x70>
 800a15c:	89a3      	ldrh	r3, [r4, #12]
 800a15e:	f023 0303 	bic.w	r3, r3, #3
 800a162:	f043 0301 	orr.w	r3, r3, #1
 800a166:	81a3      	strh	r3, [r4, #12]
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	431d      	orrs	r5, r3
 800a16c:	81a5      	strh	r5, [r4, #12]
 800a16e:	e7cf      	b.n	800a110 <__smakebuf_r+0x18>

0800a170 <_fstat_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	4d07      	ldr	r5, [pc, #28]	; (800a190 <_fstat_r+0x20>)
 800a174:	2300      	movs	r3, #0
 800a176:	4604      	mov	r4, r0
 800a178:	4608      	mov	r0, r1
 800a17a:	4611      	mov	r1, r2
 800a17c:	602b      	str	r3, [r5, #0]
 800a17e:	f7f8 f88f 	bl	80022a0 <_fstat>
 800a182:	1c43      	adds	r3, r0, #1
 800a184:	d102      	bne.n	800a18c <_fstat_r+0x1c>
 800a186:	682b      	ldr	r3, [r5, #0]
 800a188:	b103      	cbz	r3, 800a18c <_fstat_r+0x1c>
 800a18a:	6023      	str	r3, [r4, #0]
 800a18c:	bd38      	pop	{r3, r4, r5, pc}
 800a18e:	bf00      	nop
 800a190:	200004d0 	.word	0x200004d0

0800a194 <_isatty_r>:
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	4d06      	ldr	r5, [pc, #24]	; (800a1b0 <_isatty_r+0x1c>)
 800a198:	2300      	movs	r3, #0
 800a19a:	4604      	mov	r4, r0
 800a19c:	4608      	mov	r0, r1
 800a19e:	602b      	str	r3, [r5, #0]
 800a1a0:	f7f8 f88e 	bl	80022c0 <_isatty>
 800a1a4:	1c43      	adds	r3, r0, #1
 800a1a6:	d102      	bne.n	800a1ae <_isatty_r+0x1a>
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	b103      	cbz	r3, 800a1ae <_isatty_r+0x1a>
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	bd38      	pop	{r3, r4, r5, pc}
 800a1b0:	200004d0 	.word	0x200004d0

0800a1b4 <abort>:
 800a1b4:	b508      	push	{r3, lr}
 800a1b6:	2006      	movs	r0, #6
 800a1b8:	f000 f834 	bl	800a224 <raise>
 800a1bc:	2001      	movs	r0, #1
 800a1be:	f7f8 f823 	bl	8002208 <_exit>

0800a1c2 <_malloc_usable_size_r>:
 800a1c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c6:	1f18      	subs	r0, r3, #4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	bfbc      	itt	lt
 800a1cc:	580b      	ldrlt	r3, [r1, r0]
 800a1ce:	18c0      	addlt	r0, r0, r3
 800a1d0:	4770      	bx	lr

0800a1d2 <_raise_r>:
 800a1d2:	291f      	cmp	r1, #31
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	460d      	mov	r5, r1
 800a1da:	d904      	bls.n	800a1e6 <_raise_r+0x14>
 800a1dc:	2316      	movs	r3, #22
 800a1de:	6003      	str	r3, [r0, #0]
 800a1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e4:	bd38      	pop	{r3, r4, r5, pc}
 800a1e6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a1e8:	b112      	cbz	r2, 800a1f0 <_raise_r+0x1e>
 800a1ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1ee:	b94b      	cbnz	r3, 800a204 <_raise_r+0x32>
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 f831 	bl	800a258 <_getpid_r>
 800a1f6:	462a      	mov	r2, r5
 800a1f8:	4601      	mov	r1, r0
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a200:	f000 b818 	b.w	800a234 <_kill_r>
 800a204:	2b01      	cmp	r3, #1
 800a206:	d00a      	beq.n	800a21e <_raise_r+0x4c>
 800a208:	1c59      	adds	r1, r3, #1
 800a20a:	d103      	bne.n	800a214 <_raise_r+0x42>
 800a20c:	2316      	movs	r3, #22
 800a20e:	6003      	str	r3, [r0, #0]
 800a210:	2001      	movs	r0, #1
 800a212:	e7e7      	b.n	800a1e4 <_raise_r+0x12>
 800a214:	2400      	movs	r4, #0
 800a216:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a21a:	4628      	mov	r0, r5
 800a21c:	4798      	blx	r3
 800a21e:	2000      	movs	r0, #0
 800a220:	e7e0      	b.n	800a1e4 <_raise_r+0x12>
	...

0800a224 <raise>:
 800a224:	4b02      	ldr	r3, [pc, #8]	; (800a230 <raise+0xc>)
 800a226:	4601      	mov	r1, r0
 800a228:	6818      	ldr	r0, [r3, #0]
 800a22a:	f7ff bfd2 	b.w	800a1d2 <_raise_r>
 800a22e:	bf00      	nop
 800a230:	20000064 	.word	0x20000064

0800a234 <_kill_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4d07      	ldr	r5, [pc, #28]	; (800a254 <_kill_r+0x20>)
 800a238:	2300      	movs	r3, #0
 800a23a:	4604      	mov	r4, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	4611      	mov	r1, r2
 800a240:	602b      	str	r3, [r5, #0]
 800a242:	f7f7 ffd1 	bl	80021e8 <_kill>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	d102      	bne.n	800a250 <_kill_r+0x1c>
 800a24a:	682b      	ldr	r3, [r5, #0]
 800a24c:	b103      	cbz	r3, 800a250 <_kill_r+0x1c>
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	bd38      	pop	{r3, r4, r5, pc}
 800a252:	bf00      	nop
 800a254:	200004d0 	.word	0x200004d0

0800a258 <_getpid_r>:
 800a258:	f7f7 bfbe 	b.w	80021d8 <_getpid>

0800a25c <_init>:
 800a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25e:	bf00      	nop
 800a260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a262:	bc08      	pop	{r3}
 800a264:	469e      	mov	lr, r3
 800a266:	4770      	bx	lr

0800a268 <_fini>:
 800a268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26a:	bf00      	nop
 800a26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26e:	bc08      	pop	{r3}
 800a270:	469e      	mov	lr, r3
 800a272:	4770      	bx	lr
